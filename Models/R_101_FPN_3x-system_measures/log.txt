[07/29 15:50:54] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 15:50:54] d2.data.datasets.coco INFO: Converting annotations of dataset 'test' to COCO format ...)
[07/29 15:50:54] d2.data.datasets.coco INFO: Converting dataset dicts into COCO format
[07/29 15:50:56] d2.data.datasets.coco INFO: Conversion finished, #images: 468, #annotations: 10616
[07/29 15:50:56] d2.data.datasets.coco INFO: Caching COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json' ...
[07/29 15:50:57] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 15:50:57] d2.data.datasets.coco INFO: Converting annotations of dataset 'val' to COCO format ...)
[07/29 15:50:57] d2.data.datasets.coco INFO: Converting dataset dicts into COCO format
[07/29 15:50:59] d2.data.datasets.coco INFO: Conversion finished, #images: 468, #annotations: 10786
[07/29 15:50:59] d2.data.datasets.coco INFO: Caching COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json' ...
[07/29 15:51:13] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 15:51:13] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 15:51:13] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 15:51:13] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 15:51:13] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 15:51:13] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 15:51:13] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 15:51:15] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 15:51:15] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 15:51:15] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 15:51:15] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 15:52:47] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 15:52:47] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 15:52:48] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 15:52:48] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 15:52:48] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 15:52:48] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 15:52:48] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 15:52:48] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 15:52:48] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 15:53:22] d2.engine.train_loop INFO: Starting training from iteration 0
[07/29 15:53:43] d2.utils.events INFO:  eta: 3:14:46  iter: 19  total_loss: 1.901  loss_cls: 0.625  loss_box_reg: 0.129  loss_rpn_cls: 0.787  loss_rpn_loc: 0.269  time: 1.0135  data_time: 0.2872  lr: 0.000084  max_mem: 7087M
[07/29 15:54:02] d2.utils.events INFO:  eta: 3:21:11  iter: 39  total_loss: 1.603  loss_cls: 0.455  loss_box_reg: 0.557  loss_rpn_cls: 0.185  loss_rpn_loc: 0.217  time: 0.9832  data_time: 0.1790  lr: 0.000167  max_mem: 7087M
[07/29 15:54:20] d2.utils.events INFO:  eta: 3:23:31  iter: 59  total_loss: 1.436  loss_cls: 0.448  loss_box_reg: 0.634  loss_rpn_cls: 0.118  loss_rpn_loc: 0.195  time: 0.9586  data_time: 0.0822  lr: 0.000251  max_mem: 7087M
[07/29 15:54:38] d2.utils.events INFO:  eta: 3:24:44  iter: 79  total_loss: 1.472  loss_cls: 0.454  loss_box_reg: 0.735  loss_rpn_cls: 0.073  loss_rpn_loc: 0.166  time: 0.9455  data_time: 0.0682  lr: 0.000334  max_mem: 7087M
[07/29 15:54:56] d2.utils.events INFO:  eta: 3:25:08  iter: 99  total_loss: 1.422  loss_cls: 0.427  loss_box_reg: 0.806  loss_rpn_cls: 0.053  loss_rpn_loc: 0.124  time: 0.9373  data_time: 0.0815  lr: 0.000417  max_mem: 7087M
[07/29 15:55:15] d2.utils.events INFO:  eta: 3:25:00  iter: 119  total_loss: 1.173  loss_cls: 0.345  loss_box_reg: 0.659  loss_rpn_cls: 0.037  loss_rpn_loc: 0.118  time: 0.9310  data_time: 0.0522  lr: 0.000500  max_mem: 7087M
[07/29 15:55:32] d2.utils.events INFO:  eta: 3:24:47  iter: 139  total_loss: 0.860  loss_cls: 0.264  loss_box_reg: 0.510  loss_rpn_cls: 0.019  loss_rpn_loc: 0.081  time: 0.9242  data_time: 0.0448  lr: 0.000584  max_mem: 7087M
[07/29 15:55:51] d2.utils.events INFO:  eta: 3:25:07  iter: 159  total_loss: 0.582  loss_cls: 0.202  loss_box_reg: 0.303  loss_rpn_cls: 0.014  loss_rpn_loc: 0.071  time: 0.9278  data_time: 0.1244  lr: 0.000667  max_mem: 7087M
[07/29 15:56:10] d2.utils.events INFO:  eta: 3:24:23  iter: 179  total_loss: 0.532  loss_cls: 0.197  loss_box_reg: 0.244  loss_rpn_cls: 0.015  loss_rpn_loc: 0.068  time: 0.9284  data_time: 0.1049  lr: 0.000750  max_mem: 7087M
[07/29 15:56:28] d2.utils.events INFO:  eta: 3:23:44  iter: 199  total_loss: 0.479  loss_cls: 0.167  loss_box_reg: 0.228  loss_rpn_cls: 0.009  loss_rpn_loc: 0.072  time: 0.9257  data_time: 0.0757  lr: 0.000833  max_mem: 7087M
[07/29 15:56:45] d2.utils.events INFO:  eta: 3:23:22  iter: 219  total_loss: 0.442  loss_cls: 0.131  loss_box_reg: 0.217  loss_rpn_cls: 0.010  loss_rpn_loc: 0.068  time: 0.9207  data_time: 0.0152  lr: 0.000917  max_mem: 7087M
[07/29 15:57:02] d2.utils.events INFO:  eta: 3:22:31  iter: 239  total_loss: 0.347  loss_cls: 0.114  loss_box_reg: 0.179  loss_rpn_cls: 0.010  loss_rpn_loc: 0.055  time: 0.9146  data_time: 0.0383  lr: 0.001000  max_mem: 7087M
[07/29 15:57:20] d2.utils.events INFO:  eta: 3:21:20  iter: 259  total_loss: 0.361  loss_cls: 0.119  loss_box_reg: 0.182  loss_rpn_cls: 0.007  loss_rpn_loc: 0.062  time: 0.9106  data_time: 0.0302  lr: 0.001083  max_mem: 7087M
[07/29 15:57:37] d2.utils.events INFO:  eta: 3:20:55  iter: 279  total_loss: 0.504  loss_cls: 0.180  loss_box_reg: 0.211  loss_rpn_cls: 0.014  loss_rpn_loc: 0.077  time: 0.9083  data_time: 0.0248  lr: 0.001166  max_mem: 7087M
[07/29 15:57:57] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 15:57:57] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 15:57:57] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 15:57:57] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 15:57:57] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 15:58:01] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0930 s / img. ETA=0:01:47
[07/29 15:58:06] d2.evaluation.evaluator INFO: Inference done 41/468. 0.0944 s / img. ETA=0:01:21
[07/29 15:58:12] d2.evaluation.evaluator INFO: Inference done 63/468. 0.0947 s / img. ETA=0:01:28
[07/29 15:58:17] d2.evaluation.evaluator INFO: Inference done 95/468. 0.0939 s / img. ETA=0:01:14
[07/29 15:58:22] d2.evaluation.evaluator INFO: Inference done 128/468. 0.0935 s / img. ETA=0:01:03
[07/29 15:58:29] d2.evaluation.evaluator INFO: Inference done 134/468. 0.0934 s / img. ETA=0:01:17
[07/29 15:58:34] d2.evaluation.evaluator INFO: Inference done 162/468. 0.0937 s / img. ETA=0:01:08
[07/29 15:58:39] d2.evaluation.evaluator INFO: Inference done 195/468. 0.0940 s / img. ETA=0:00:57
[07/29 15:58:45] d2.evaluation.evaluator INFO: Inference done 227/468. 0.0942 s / img. ETA=0:00:49
[07/29 15:58:50] d2.evaluation.evaluator INFO: Inference done 257/468. 0.0942 s / img. ETA=0:00:42
[07/29 15:58:55] d2.evaluation.evaluator INFO: Inference done 282/468. 0.0940 s / img. ETA=0:00:37
[07/29 15:59:00] d2.evaluation.evaluator INFO: Inference done 337/468. 0.0934 s / img. ETA=0:00:23
[07/29 15:59:05] d2.evaluation.evaluator INFO: Inference done 391/468. 0.0930 s / img. ETA=0:00:13
[07/29 15:59:10] d2.evaluation.evaluator INFO: Inference done 446/468. 0.0927 s / img. ETA=0:00:03
[07/29 15:59:12] d2.evaluation.evaluator INFO: Total inference time: 0:01:12.777979 (0.157188 s / img per device, on 1 devices)
[07/29 15:59:12] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:42 (0.092671 s / img per device, on 1 devices)
[07/29 15:59:12] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 15:59:12] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 15:59:12] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 15:59:12] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 83.413 | 98.390 | 97.105 |  nan  | 82.363 | 84.485 |
[07/29 15:59:12] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 15:59:12] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 15:59:12] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 15:59:12] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 15:59:12] d2.evaluation.testing INFO: copypaste: 83.4126,98.3898,97.1046,nan,82.3634,84.4845
[07/29 15:59:15] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:58
[07/29 15:59:20] detectron2 INFO: Loss on Validation  done 40/468. 0.0001 s / img. ETA=0:01:11
[07/29 15:59:25] detectron2 INFO: Loss on Validation  done 70/468. 0.0001 s / img. ETA=0:01:07
[07/29 15:59:30] detectron2 INFO: Loss on Validation  done 103/468. 0.0001 s / img. ETA=0:00:59
[07/29 15:59:35] detectron2 INFO: Loss on Validation  done 133/468. 0.0001 s / img. ETA=0:00:55
[07/29 15:59:40] detectron2 INFO: Loss on Validation  done 163/468. 0.0001 s / img. ETA=0:00:50
[07/29 15:59:45] detectron2 INFO: Loss on Validation  done 195/468. 0.0001 s / img. ETA=0:00:44
[07/29 15:59:50] detectron2 INFO: Loss on Validation  done 226/468. 0.0001 s / img. ETA=0:00:39
[07/29 15:59:55] detectron2 INFO: Loss on Validation  done 256/468. 0.0001 s / img. ETA=0:00:34
[07/29 16:00:00] detectron2 INFO: Loss on Validation  done 291/468. 0.0001 s / img. ETA=0:00:28
[07/29 16:00:05] detectron2 INFO: Loss on Validation  done 339/468. 0.0001 s / img. ETA=0:00:19
[07/29 16:00:11] detectron2 INFO: Loss on Validation  done 390/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:00:16] detectron2 INFO: Loss on Validation  done 437/468. 0.0001 s / img. ETA=0:00:04
[07/29 16:00:19] detectron2 INFO: mean_loss=0.32906902715045755, best_loss=inf
[07/29 16:00:19] detectron2 INFO: saving model to: model_0000299.pth, saved_model_names=model_0000299.pth
[07/29 16:00:19] d2.utils.events INFO:  eta: 3:20:43  iter: 299  total_loss: 0.337  loss_cls: 0.113  loss_box_reg: 0.165  loss_rpn_cls: 0.007  loss_rpn_loc: 0.055  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.9060  data_time: 0.0289  lr: 0.001250  max_mem: 7087M
[07/29 16:00:36] d2.utils.events INFO:  eta: 3:20:19  iter: 319  total_loss: 0.318  loss_cls: 0.095  loss_box_reg: 0.157  loss_rpn_cls: 0.004  loss_rpn_loc: 0.063  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.9034  data_time: 0.0276  lr: 0.001333  max_mem: 7087M
[07/29 16:00:54] d2.utils.events INFO:  eta: 3:20:06  iter: 339  total_loss: 0.325  loss_cls: 0.098  loss_box_reg: 0.159  loss_rpn_cls: 0.005  loss_rpn_loc: 0.062  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.9016  data_time: 0.0207  lr: 0.001416  max_mem: 7087M
[07/29 16:01:11] d2.utils.events INFO:  eta: 3:19:36  iter: 359  total_loss: 0.348  loss_cls: 0.111  loss_box_reg: 0.167  loss_rpn_cls: 0.009  loss_rpn_loc: 0.054  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8988  data_time: 0.0145  lr: 0.001499  max_mem: 7087M
[07/29 16:01:28] d2.utils.events INFO:  eta: 3:19:06  iter: 379  total_loss: 0.304  loss_cls: 0.090  loss_box_reg: 0.149  loss_rpn_cls: 0.006  loss_rpn_loc: 0.056  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8967  data_time: 0.0146  lr: 0.001583  max_mem: 7087M
[07/29 16:01:45] d2.utils.events INFO:  eta: 3:18:29  iter: 399  total_loss: 0.300  loss_cls: 0.086  loss_box_reg: 0.143  loss_rpn_cls: 0.003  loss_rpn_loc: 0.059  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8948  data_time: 0.0125  lr: 0.001666  max_mem: 7087M
[07/29 16:02:02] d2.utils.events INFO:  eta: 3:18:03  iter: 419  total_loss: 0.281  loss_cls: 0.072  loss_box_reg: 0.138  loss_rpn_cls: 0.004  loss_rpn_loc: 0.062  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8929  data_time: 0.0137  lr: 0.001749  max_mem: 7087M
[07/29 16:02:19] d2.utils.events INFO:  eta: 3:17:20  iter: 439  total_loss: 0.290  loss_cls: 0.085  loss_box_reg: 0.146  loss_rpn_cls: 0.005  loss_rpn_loc: 0.064  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8902  data_time: 0.0149  lr: 0.001832  max_mem: 7087M
[07/29 16:02:36] d2.utils.events INFO:  eta: 3:16:55  iter: 459  total_loss: 0.296  loss_cls: 0.070  loss_box_reg: 0.132  loss_rpn_cls: 0.005  loss_rpn_loc: 0.063  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8888  data_time: 0.0138  lr: 0.001916  max_mem: 7087M
[07/29 16:02:53] d2.utils.events INFO:  eta: 3:16:25  iter: 479  total_loss: 0.303  loss_cls: 0.062  loss_box_reg: 0.141  loss_rpn_cls: 0.015  loss_rpn_loc: 0.059  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8875  data_time: 0.0138  lr: 0.001999  max_mem: 7087M
[07/29 16:03:11] d2.utils.events INFO:  eta: 3:16:06  iter: 499  total_loss: 0.291  loss_cls: 0.084  loss_box_reg: 0.142  loss_rpn_cls: 0.005  loss_rpn_loc: 0.055  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8865  data_time: 0.0149  lr: 0.002082  max_mem: 7087M
[07/29 16:03:28] d2.utils.events INFO:  eta: 3:15:48  iter: 519  total_loss: 0.288  loss_cls: 0.089  loss_box_reg: 0.142  loss_rpn_cls: 0.003  loss_rpn_loc: 0.061  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8854  data_time: 0.0131  lr: 0.002165  max_mem: 7087M
[07/29 16:03:45] d2.utils.events INFO:  eta: 3:15:33  iter: 539  total_loss: 0.361  loss_cls: 0.125  loss_box_reg: 0.165  loss_rpn_cls: 0.006  loss_rpn_loc: 0.069  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8853  data_time: 0.0143  lr: 0.002249  max_mem: 7087M
[07/29 16:04:03] d2.utils.events INFO:  eta: 3:15:35  iter: 559  total_loss: 0.349  loss_cls: 0.108  loss_box_reg: 0.149  loss_rpn_cls: 0.007  loss_rpn_loc: 0.066  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8853  data_time: 0.0126  lr: 0.002332  max_mem: 7087M
[07/29 16:04:20] d2.utils.events INFO:  eta: 3:15:02  iter: 579  total_loss: 0.270  loss_cls: 0.074  loss_box_reg: 0.125  loss_rpn_cls: 0.008  loss_rpn_loc: 0.052  validation_loss: 0.329  loss_failed_to_get_better_count: 0.000  time: 0.8839  data_time: 0.0125  lr: 0.002415  max_mem: 7087M
[07/29 16:04:41] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:04:41] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:04:41] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:04:41] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:04:43] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1045 s / img. ETA=0:01:03
[07/29 16:04:48] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1023 s / img. ETA=0:00:53
[07/29 16:04:54] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1059 s / img. ETA=0:00:50
[07/29 16:04:59] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1048 s / img. ETA=0:00:43
[07/29 16:05:04] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1041 s / img. ETA=0:00:38
[07/29 16:05:09] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1049 s / img. ETA=0:00:33
[07/29 16:05:14] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1041 s / img. ETA=0:00:28
[07/29 16:05:19] d2.evaluation.evaluator INFO: Inference done 297/468. 0.1030 s / img. ETA=0:00:21
[07/29 16:05:24] d2.evaluation.evaluator INFO: Inference done 351/468. 0.1011 s / img. ETA=0:00:14
[07/29 16:05:29] d2.evaluation.evaluator INFO: Inference done 405/468. 0.0998 s / img. ETA=0:00:07
[07/29 16:05:34] d2.evaluation.evaluator INFO: Inference done 459/468. 0.0988 s / img. ETA=0:00:01
[07/29 16:05:35] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.546478 (0.113491 s / img per device, on 1 devices)
[07/29 16:05:35] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098629 s / img per device, on 1 devices)
[07/29 16:05:35] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:05:35] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:05:35] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:05:36] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 80.358 | 98.583 | 97.433 |  nan  | 84.083 | 78.673 |
[07/29 16:05:36] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:05:36] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:05:36] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:05:36] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:05:36] d2.evaluation.testing INFO: copypaste: 80.3583,98.5830,97.4330,nan,84.0825,78.6731
[07/29 16:05:38] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:56
[07/29 16:05:43] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:54
[07/29 16:05:48] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 16:05:53] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 16:05:58] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 16:06:03] detectron2 INFO: Loss on Validation  done 203/468. 0.0001 s / img. ETA=0:00:34
[07/29 16:06:08] detectron2 INFO: Loss on Validation  done 241/468. 0.0001 s / img. ETA=0:00:29
[07/29 16:06:13] detectron2 INFO: Loss on Validation  done 281/468. 0.0001 s / img. ETA=0:00:24
[07/29 16:06:18] detectron2 INFO: Loss on Validation  done 329/468. 0.0001 s / img. ETA=0:00:17
[07/29 16:06:24] detectron2 INFO: Loss on Validation  done 380/468. 0.0001 s / img. ETA=0:00:10
[07/29 16:06:29] detectron2 INFO: Loss on Validation  done 429/468. 0.0001 s / img. ETA=0:00:04
[07/29 16:06:33] detectron2 INFO: mean_loss=0.3150369518328001, best_loss=0.32906902715045755
[07/29 16:06:33] detectron2 INFO: saving model to: model_0000599.pth, saved_model_names=model_0000299.pth, model_0000599.pth
[07/29 16:06:33] d2.utils.events INFO:  eta: 3:14:38  iter: 599  total_loss: 0.266  loss_cls: 0.062  loss_box_reg: 0.132  loss_rpn_cls: 0.005  loss_rpn_loc: 0.060  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8829  data_time: 0.0152  lr: 0.002498  max_mem: 7087M
[07/29 16:06:50] d2.utils.events INFO:  eta: 3:14:17  iter: 619  total_loss: 0.302  loss_cls: 0.085  loss_box_reg: 0.138  loss_rpn_cls: 0.006  loss_rpn_loc: 0.069  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8819  data_time: 0.0137  lr: 0.002582  max_mem: 7087M
[07/29 16:07:07] d2.utils.events INFO:  eta: 3:13:57  iter: 639  total_loss: 0.267  loss_cls: 0.073  loss_box_reg: 0.118  loss_rpn_cls: 0.005  loss_rpn_loc: 0.059  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8808  data_time: 0.0149  lr: 0.002665  max_mem: 7087M
[07/29 16:07:24] d2.utils.events INFO:  eta: 3:13:26  iter: 659  total_loss: 0.268  loss_cls: 0.066  loss_box_reg: 0.117  loss_rpn_cls: 0.008  loss_rpn_loc: 0.071  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8801  data_time: 0.0149  lr: 0.002748  max_mem: 7087M
[07/29 16:07:42] d2.utils.events INFO:  eta: 3:13:09  iter: 679  total_loss: 0.235  loss_cls: 0.058  loss_box_reg: 0.110  loss_rpn_cls: 0.005  loss_rpn_loc: 0.055  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8802  data_time: 0.0133  lr: 0.002831  max_mem: 7087M
[07/29 16:07:59] d2.utils.events INFO:  eta: 3:13:02  iter: 699  total_loss: 0.275  loss_cls: 0.071  loss_box_reg: 0.129  loss_rpn_cls: 0.004  loss_rpn_loc: 0.056  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8803  data_time: 0.0140  lr: 0.002915  max_mem: 7087M
[07/29 16:08:17] d2.utils.events INFO:  eta: 3:12:51  iter: 719  total_loss: 0.248  loss_cls: 0.068  loss_box_reg: 0.119  loss_rpn_cls: 0.003  loss_rpn_loc: 0.055  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8803  data_time: 0.0156  lr: 0.002998  max_mem: 7087M
[07/29 16:08:34] d2.utils.events INFO:  eta: 3:12:34  iter: 739  total_loss: 0.256  loss_cls: 0.068  loss_box_reg: 0.125  loss_rpn_cls: 0.005  loss_rpn_loc: 0.058  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8800  data_time: 0.0153  lr: 0.003081  max_mem: 7087M
[07/29 16:08:51] d2.utils.events INFO:  eta: 3:12:12  iter: 759  total_loss: 0.245  loss_cls: 0.065  loss_box_reg: 0.119  loss_rpn_cls: 0.004  loss_rpn_loc: 0.063  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8791  data_time: 0.0124  lr: 0.003164  max_mem: 7087M
[07/29 16:09:09] d2.utils.events INFO:  eta: 3:11:59  iter: 779  total_loss: 0.250  loss_cls: 0.061  loss_box_reg: 0.125  loss_rpn_cls: 0.004  loss_rpn_loc: 0.060  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8788  data_time: 0.0153  lr: 0.003248  max_mem: 7087M
[07/29 16:09:26] d2.utils.events INFO:  eta: 3:11:42  iter: 799  total_loss: 0.257  loss_cls: 0.062  loss_box_reg: 0.119  loss_rpn_cls: 0.004  loss_rpn_loc: 0.055  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8785  data_time: 0.0152  lr: 0.003331  max_mem: 7087M
[07/29 16:09:44] d2.utils.events INFO:  eta: 3:11:31  iter: 819  total_loss: 0.240  loss_cls: 0.055  loss_box_reg: 0.110  loss_rpn_cls: 0.004  loss_rpn_loc: 0.071  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8784  data_time: 0.0138  lr: 0.003414  max_mem: 7087M
[07/29 16:10:01] d2.utils.events INFO:  eta: 3:11:08  iter: 839  total_loss: 0.234  loss_cls: 0.061  loss_box_reg: 0.112  loss_rpn_cls: 0.005  loss_rpn_loc: 0.057  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8778  data_time: 0.0153  lr: 0.003497  max_mem: 7087M
[07/29 16:10:18] d2.utils.events INFO:  eta: 3:10:49  iter: 859  total_loss: 0.255  loss_cls: 0.062  loss_box_reg: 0.116  loss_rpn_cls: 0.007  loss_rpn_loc: 0.063  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8776  data_time: 0.0135  lr: 0.003581  max_mem: 7087M
[07/29 16:10:35] d2.utils.events INFO:  eta: 3:10:33  iter: 879  total_loss: 0.271  loss_cls: 0.069  loss_box_reg: 0.123  loss_rpn_cls: 0.007  loss_rpn_loc: 0.075  validation_loss: 0.322  loss_failed_to_get_better_count: 0.000  time: 0.8772  data_time: 0.0168  lr: 0.003664  max_mem: 7087M
[07/29 16:10:55] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:10:55] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:10:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:10:55] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:10:57] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1050 s / img. ETA=0:01:08
[07/29 16:11:02] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1024 s / img. ETA=0:00:51
[07/29 16:11:08] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1040 s / img. ETA=0:00:48
[07/29 16:11:13] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1044 s / img. ETA=0:00:43
[07/29 16:11:18] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1040 s / img. ETA=0:00:37
[07/29 16:11:23] d2.evaluation.evaluator INFO: Inference done 213/468. 0.1050 s / img. ETA=0:00:32
[07/29 16:11:28] d2.evaluation.evaluator INFO: Inference done 255/468. 0.1048 s / img. ETA=0:00:26
[07/29 16:11:33] d2.evaluation.evaluator INFO: Inference done 303/468. 0.1032 s / img. ETA=0:00:20
[07/29 16:11:38] d2.evaluation.evaluator INFO: Inference done 358/468. 0.1013 s / img. ETA=0:00:12
[07/29 16:11:43] d2.evaluation.evaluator INFO: Inference done 412/468. 0.0999 s / img. ETA=0:00:06
[07/29 16:11:48] d2.evaluation.evaluator INFO: Inference done 466/468. 0.0989 s / img. ETA=0:00:00
[07/29 16:11:48] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.885479 (0.112064 s / img per device, on 1 devices)
[07/29 16:11:48] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098884 s / img per device, on 1 devices)
[07/29 16:11:49] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:11:49] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:11:49] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:11:49] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 88.290 | 98.813 | 98.741 |  nan  | 87.340 | 88.866 |
[07/29 16:11:49] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:11:49] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:11:49] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:11:49] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:11:49] d2.evaluation.testing INFO: copypaste: 88.2901,98.8127,98.7413,nan,87.3404,88.8657
[07/29 16:11:51] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:55
[07/29 16:11:56] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 16:12:01] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 16:12:06] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 16:12:12] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 16:12:17] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:12:22] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:12:27] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:25
[07/29 16:12:32] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:12:37] detectron2 INFO: Loss on Validation  done 376/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:12:42] detectron2 INFO: Loss on Validation  done 424/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:12:47] detectron2 INFO: mean_loss=0.27454329396213306, best_loss=0.3150369518328001
[07/29 16:12:47] detectron2 INFO: saving model to: model_0000899.pth, saved_model_names=model_0000299.pth, model_0000599.pth, model_0000899.pth
[07/29 16:12:47] d2.utils.events INFO:  eta: 3:10:31  iter: 899  total_loss: 0.275  loss_cls: 0.077  loss_box_reg: 0.126  loss_rpn_cls: 0.005  loss_rpn_loc: 0.060  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8776  data_time: 0.0173  lr: 0.003747  max_mem: 7087M
[07/29 16:13:04] d2.utils.events INFO:  eta: 3:10:09  iter: 919  total_loss: 0.242  loss_cls: 0.061  loss_box_reg: 0.114  loss_rpn_cls: 0.005  loss_rpn_loc: 0.060  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8774  data_time: 0.0167  lr: 0.003830  max_mem: 7087M
[07/29 16:13:21] d2.utils.events INFO:  eta: 3:09:46  iter: 939  total_loss: 0.216  loss_cls: 0.057  loss_box_reg: 0.106  loss_rpn_cls: 0.003  loss_rpn_loc: 0.055  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8768  data_time: 0.0126  lr: 0.003914  max_mem: 7087M
[07/29 16:13:39] d2.utils.events INFO:  eta: 3:09:31  iter: 959  total_loss: 0.226  loss_cls: 0.053  loss_box_reg: 0.100  loss_rpn_cls: 0.005  loss_rpn_loc: 0.049  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8766  data_time: 0.0170  lr: 0.003997  max_mem: 7087M
[07/29 16:13:56] d2.utils.events INFO:  eta: 3:09:11  iter: 979  total_loss: 0.232  loss_cls: 0.045  loss_box_reg: 0.112  loss_rpn_cls: 0.007  loss_rpn_loc: 0.066  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8762  data_time: 0.0141  lr: 0.004080  max_mem: 7087M
[07/29 16:14:13] d2.utils.events INFO:  eta: 3:08:57  iter: 999  total_loss: 0.259  loss_cls: 0.073  loss_box_reg: 0.119  loss_rpn_cls: 0.005  loss_rpn_loc: 0.062  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8760  data_time: 0.0151  lr: 0.004163  max_mem: 7087M
[07/29 16:14:30] d2.utils.events INFO:  eta: 3:08:49  iter: 1019  total_loss: 0.229  loss_cls: 0.052  loss_box_reg: 0.117  loss_rpn_cls: 0.003  loss_rpn_loc: 0.051  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8757  data_time: 0.0126  lr: 0.004247  max_mem: 7087M
[07/29 16:14:47] d2.utils.events INFO:  eta: 3:08:24  iter: 1039  total_loss: 0.233  loss_cls: 0.053  loss_box_reg: 0.111  loss_rpn_cls: 0.006  loss_rpn_loc: 0.054  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8752  data_time: 0.0140  lr: 0.004330  max_mem: 7087M
[07/29 16:15:04] d2.utils.events INFO:  eta: 3:08:00  iter: 1059  total_loss: 0.204  loss_cls: 0.045  loss_box_reg: 0.103  loss_rpn_cls: 0.004  loss_rpn_loc: 0.051  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8748  data_time: 0.0151  lr: 0.004413  max_mem: 7087M
[07/29 16:15:21] d2.utils.events INFO:  eta: 3:07:32  iter: 1079  total_loss: 0.225  loss_cls: 0.051  loss_box_reg: 0.111  loss_rpn_cls: 0.004  loss_rpn_loc: 0.052  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8743  data_time: 0.0242  lr: 0.004496  max_mem: 7087M
[07/29 16:15:39] d2.utils.events INFO:  eta: 3:07:14  iter: 1099  total_loss: 0.233  loss_cls: 0.048  loss_box_reg: 0.111  loss_rpn_cls: 0.004  loss_rpn_loc: 0.055  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8744  data_time: 0.0169  lr: 0.004580  max_mem: 7087M
[07/29 16:15:56] d2.utils.events INFO:  eta: 3:06:34  iter: 1119  total_loss: 0.222  loss_cls: 0.053  loss_box_reg: 0.113  loss_rpn_cls: 0.003  loss_rpn_loc: 0.051  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8737  data_time: 0.0153  lr: 0.004663  max_mem: 7087M
[07/29 16:16:13] d2.utils.events INFO:  eta: 3:06:14  iter: 1139  total_loss: 0.245  loss_cls: 0.049  loss_box_reg: 0.110  loss_rpn_cls: 0.005  loss_rpn_loc: 0.066  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8732  data_time: 0.0134  lr: 0.004746  max_mem: 7087M
[07/29 16:16:30] d2.utils.events INFO:  eta: 3:05:51  iter: 1159  total_loss: 0.233  loss_cls: 0.050  loss_box_reg: 0.102  loss_rpn_cls: 0.005  loss_rpn_loc: 0.071  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8730  data_time: 0.0146  lr: 0.004829  max_mem: 7087M
[07/29 16:16:47] d2.utils.events INFO:  eta: 3:05:33  iter: 1179  total_loss: 0.231  loss_cls: 0.053  loss_box_reg: 0.114  loss_rpn_cls: 0.005  loss_rpn_loc: 0.062  validation_loss: 0.315  loss_failed_to_get_better_count: 0.000  time: 0.8730  data_time: 0.0163  lr: 0.004913  max_mem: 7087M
[07/29 16:17:06] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:17:06] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:17:06] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:17:06] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:17:09] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1009 s / img. ETA=0:00:59
[07/29 16:17:14] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1016 s / img. ETA=0:00:50
[07/29 16:17:19] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1039 s / img. ETA=0:00:48
[07/29 16:17:24] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1021 s / img. ETA=0:00:43
[07/29 16:17:29] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1025 s / img. ETA=0:00:38
[07/29 16:17:34] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1030 s / img. ETA=0:00:33
[07/29 16:17:39] d2.evaluation.evaluator INFO: Inference done 251/468. 0.1031 s / img. ETA=0:00:27
[07/29 16:17:44] d2.evaluation.evaluator INFO: Inference done 298/468. 0.1017 s / img. ETA=0:00:20
[07/29 16:17:49] d2.evaluation.evaluator INFO: Inference done 353/468. 0.1000 s / img. ETA=0:00:13
[07/29 16:17:54] d2.evaluation.evaluator INFO: Inference done 407/468. 0.0987 s / img. ETA=0:00:07
[07/29 16:17:59] d2.evaluation.evaluator INFO: Inference done 461/468. 0.0978 s / img. ETA=0:00:00
[07/29 16:18:00] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.995776 (0.112302 s / img per device, on 1 devices)
[07/29 16:18:00] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097708 s / img per device, on 1 devices)
[07/29 16:18:00] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:18:00] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:18:00] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:18:01] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 89.937 | 98.944 | 98.903 |  nan  | 88.305 | 90.729 |
[07/29 16:18:01] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:18:01] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:18:01] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:18:01] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:18:01] d2.evaluation.testing INFO: copypaste: 89.9372,98.9440,98.9029,nan,88.3052,90.7288
[07/29 16:18:03] detectron2 INFO: Loss on Validation  done 11/468. 0.0000 s / img. ETA=0:00:50
[07/29 16:18:08] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:53
[07/29 16:18:13] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 16:18:18] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 16:18:23] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:39
[07/29 16:18:28] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:18:33] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:18:38] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:24
[07/29 16:18:43] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:18:48] detectron2 INFO: Loss on Validation  done 376/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:18:53] detectron2 INFO: Loss on Validation  done 424/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:18:58] detectron2 INFO: mean_loss=0.22204631070859254, best_loss=0.27454329396213306
[07/29 16:18:58] detectron2 INFO: saving model to: model_0001199.pth, saved_model_names=model_0000299.pth, model_0000599.pth, model_0000899.pth, model_0001199.pth
[07/29 16:18:58] d2.utils.events INFO:  eta: 3:05:16  iter: 1199  total_loss: 0.231  loss_cls: 0.047  loss_box_reg: 0.113  loss_rpn_cls: 0.004  loss_rpn_loc: 0.060  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8726  data_time: 0.0154  lr: 0.004996  max_mem: 7087M
[07/29 16:19:16] d2.utils.events INFO:  eta: 3:04:59  iter: 1219  total_loss: 0.235  loss_cls: 0.051  loss_box_reg: 0.121  loss_rpn_cls: 0.004  loss_rpn_loc: 0.050  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8727  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 16:19:32] d2.utils.events INFO:  eta: 3:04:33  iter: 1239  total_loss: 0.230  loss_cls: 0.047  loss_box_reg: 0.112  loss_rpn_cls: 0.006  loss_rpn_loc: 0.054  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8717  data_time: 0.0144  lr: 0.005000  max_mem: 7087M
[07/29 16:19:49] d2.utils.events INFO:  eta: 3:04:17  iter: 1259  total_loss: 0.202  loss_cls: 0.047  loss_box_reg: 0.101  loss_rpn_cls: 0.005  loss_rpn_loc: 0.048  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8716  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:20:06] d2.utils.events INFO:  eta: 3:03:43  iter: 1279  total_loss: 0.235  loss_cls: 0.056  loss_box_reg: 0.108  loss_rpn_cls: 0.004  loss_rpn_loc: 0.051  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0156  lr: 0.005000  max_mem: 7087M
[07/29 16:20:24] d2.utils.events INFO:  eta: 3:03:28  iter: 1299  total_loss: 0.223  loss_cls: 0.047  loss_box_reg: 0.097  loss_rpn_cls: 0.004  loss_rpn_loc: 0.062  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8712  data_time: 0.0158  lr: 0.005000  max_mem: 7087M
[07/29 16:20:41] d2.utils.events INFO:  eta: 3:03:23  iter: 1319  total_loss: 0.228  loss_cls: 0.047  loss_box_reg: 0.105  loss_rpn_cls: 0.006  loss_rpn_loc: 0.056  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8712  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 16:20:58] d2.utils.events INFO:  eta: 3:02:55  iter: 1339  total_loss: 0.199  loss_cls: 0.037  loss_box_reg: 0.102  loss_rpn_cls: 0.007  loss_rpn_loc: 0.048  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8709  data_time: 0.0129  lr: 0.005000  max_mem: 7087M
[07/29 16:21:15] d2.utils.events INFO:  eta: 3:02:47  iter: 1359  total_loss: 0.187  loss_cls: 0.037  loss_box_reg: 0.094  loss_rpn_cls: 0.003  loss_rpn_loc: 0.049  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8707  data_time: 0.0171  lr: 0.005000  max_mem: 7087M
[07/29 16:21:33] d2.utils.events INFO:  eta: 3:02:29  iter: 1379  total_loss: 0.183  loss_cls: 0.044  loss_box_reg: 0.090  loss_rpn_cls: 0.003  loss_rpn_loc: 0.048  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8708  data_time: 0.0130  lr: 0.005000  max_mem: 7087M
[07/29 16:21:50] d2.utils.events INFO:  eta: 3:02:16  iter: 1399  total_loss: 0.211  loss_cls: 0.040  loss_box_reg: 0.103  loss_rpn_cls: 0.004  loss_rpn_loc: 0.050  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8708  data_time: 0.0164  lr: 0.005000  max_mem: 7087M
[07/29 16:22:08] d2.utils.events INFO:  eta: 3:02:06  iter: 1419  total_loss: 0.221  loss_cls: 0.043  loss_box_reg: 0.090  loss_rpn_cls: 0.006  loss_rpn_loc: 0.068  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 16:22:25] d2.utils.events INFO:  eta: 3:01:54  iter: 1439  total_loss: 0.229  loss_cls: 0.042  loss_box_reg: 0.090  loss_rpn_cls: 0.007  loss_rpn_loc: 0.080  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0136  lr: 0.005000  max_mem: 7087M
[07/29 16:22:43] d2.utils.events INFO:  eta: 3:01:36  iter: 1459  total_loss: 0.207  loss_cls: 0.039  loss_box_reg: 0.086  loss_rpn_cls: 0.007  loss_rpn_loc: 0.072  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8709  data_time: 0.0138  lr: 0.005000  max_mem: 7087M
[07/29 16:23:01] d2.utils.events INFO:  eta: 3:01:27  iter: 1479  total_loss: 0.280  loss_cls: 0.072  loss_box_reg: 0.119  loss_rpn_cls: 0.008  loss_rpn_loc: 0.060  validation_loss: 0.295  loss_failed_to_get_better_count: 0.000  time: 0.8711  data_time: 0.0168  lr: 0.005000  max_mem: 7087M
[07/29 16:23:20] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:23:20] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:23:20] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:23:20] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:23:23] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0977 s / img. ETA=0:00:57
[07/29 16:23:28] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1027 s / img. ETA=0:00:51
[07/29 16:23:33] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1045 s / img. ETA=0:00:48
[07/29 16:23:38] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1026 s / img. ETA=0:00:42
[07/29 16:23:43] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1034 s / img. ETA=0:00:37
[07/29 16:23:48] d2.evaluation.evaluator INFO: Inference done 212/468. 0.1032 s / img. ETA=0:00:32
[07/29 16:23:53] d2.evaluation.evaluator INFO: Inference done 253/468. 0.1032 s / img. ETA=0:00:27
[07/29 16:23:58] d2.evaluation.evaluator INFO: Inference done 301/468. 0.1023 s / img. ETA=0:00:20
[07/29 16:24:03] d2.evaluation.evaluator INFO: Inference done 355/468. 0.1006 s / img. ETA=0:00:13
[07/29 16:24:08] d2.evaluation.evaluator INFO: Inference done 409/468. 0.0993 s / img. ETA=0:00:06
[07/29 16:24:13] d2.evaluation.evaluator INFO: Inference done 463/468. 0.0984 s / img. ETA=0:00:00
[07/29 16:24:14] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.858737 (0.112006 s / img per device, on 1 devices)
[07/29 16:24:14] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098284 s / img per device, on 1 devices)
[07/29 16:24:14] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:24:14] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:24:14] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:24:14] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 90.471 | 98.898 | 98.838 |  nan  | 89.653 | 90.983 |
[07/29 16:24:14] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:24:14] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:24:14] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:24:14] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:24:14] d2.evaluation.testing INFO: copypaste: 90.4710,98.8982,98.8379,nan,89.6527,90.9825
[07/29 16:24:17] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:53
[07/29 16:24:22] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 16:24:27] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 16:24:32] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 16:24:37] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 16:24:42] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:24:47] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:24:52] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:24
[07/29 16:24:57] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:25:02] detectron2 INFO: Loss on Validation  done 376/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:25:07] detectron2 INFO: Loss on Validation  done 424/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:25:12] detectron2 INFO: mean_loss=0.24073816174583876, best_loss=0.22204631070859254
[07/29 16:25:12] detectron2 INFO: could not find a better loss with mean_loss=0.24073816174583876 best_loss=0.22204631070859254 and failed count=1
[07/29 16:25:12] detectron2 INFO: saving model to: model_0001499.pth, saved_model_names=model_0000299.pth, model_0000599.pth, model_0000899.pth, model_0001199.pth, model_0001499.pth
[07/29 16:25:12] d2.utils.events INFO:  eta: 3:01:20  iter: 1499  total_loss: 0.253  loss_cls: 0.052  loss_box_reg: 0.114  loss_rpn_cls: 0.007  loss_rpn_loc: 0.085  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8713  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 16:25:30] d2.utils.events INFO:  eta: 3:01:07  iter: 1519  total_loss: 0.245  loss_cls: 0.054  loss_box_reg: 0.103  loss_rpn_cls: 0.007  loss_rpn_loc: 0.074  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8713  data_time: 0.0165  lr: 0.005000  max_mem: 7087M
[07/29 16:25:47] d2.utils.events INFO:  eta: 3:00:37  iter: 1539  total_loss: 0.238  loss_cls: 0.051  loss_box_reg: 0.115  loss_rpn_cls: 0.006  loss_rpn_loc: 0.065  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8711  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:26:04] d2.utils.events INFO:  eta: 3:00:06  iter: 1559  total_loss: 0.218  loss_cls: 0.049  loss_box_reg: 0.106  loss_rpn_cls: 0.005  loss_rpn_loc: 0.048  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0179  lr: 0.005000  max_mem: 7087M
[07/29 16:26:21] d2.utils.events INFO:  eta: 2:59:54  iter: 1579  total_loss: 0.197  loss_cls: 0.048  loss_box_reg: 0.095  loss_rpn_cls: 0.005  loss_rpn_loc: 0.044  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:26:39] d2.utils.events INFO:  eta: 2:59:37  iter: 1599  total_loss: 0.213  loss_cls: 0.047  loss_box_reg: 0.105  loss_rpn_cls: 0.006  loss_rpn_loc: 0.052  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8708  data_time: 0.0158  lr: 0.005000  max_mem: 7087M
[07/29 16:26:55] d2.utils.events INFO:  eta: 2:59:22  iter: 1619  total_loss: 0.210  loss_cls: 0.041  loss_box_reg: 0.100  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8705  data_time: 0.0166  lr: 0.005000  max_mem: 7087M
[07/29 16:27:13] d2.utils.events INFO:  eta: 2:59:05  iter: 1639  total_loss: 0.203  loss_cls: 0.043  loss_box_reg: 0.098  loss_rpn_cls: 0.005  loss_rpn_loc: 0.053  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8707  data_time: 0.0134  lr: 0.005000  max_mem: 7087M
[07/29 16:27:31] d2.utils.events INFO:  eta: 2:58:55  iter: 1659  total_loss: 0.202  loss_cls: 0.045  loss_box_reg: 0.098  loss_rpn_cls: 0.005  loss_rpn_loc: 0.051  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8708  data_time: 0.0177  lr: 0.005000  max_mem: 7087M
[07/29 16:27:48] d2.utils.events INFO:  eta: 2:58:48  iter: 1679  total_loss: 0.220  loss_cls: 0.050  loss_box_reg: 0.101  loss_rpn_cls: 0.004  loss_rpn_loc: 0.058  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8709  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 16:28:06] d2.utils.events INFO:  eta: 2:58:28  iter: 1699  total_loss: 0.185  loss_cls: 0.042  loss_box_reg: 0.086  loss_rpn_cls: 0.004  loss_rpn_loc: 0.050  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8709  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 16:28:23] d2.utils.events INFO:  eta: 2:58:03  iter: 1719  total_loss: 0.192  loss_cls: 0.041  loss_box_reg: 0.094  loss_rpn_cls: 0.004  loss_rpn_loc: 0.051  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8711  data_time: 0.0145  lr: 0.005000  max_mem: 7087M
[07/29 16:28:41] d2.utils.events INFO:  eta: 2:57:45  iter: 1739  total_loss: 0.219  loss_cls: 0.039  loss_box_reg: 0.104  loss_rpn_cls: 0.005  loss_rpn_loc: 0.061  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8711  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:28:58] d2.utils.events INFO:  eta: 2:57:38  iter: 1759  total_loss: 0.196  loss_cls: 0.041  loss_box_reg: 0.101  loss_rpn_cls: 0.004  loss_rpn_loc: 0.051  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8711  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 16:29:16] d2.utils.events INFO:  eta: 2:57:11  iter: 1779  total_loss: 0.218  loss_cls: 0.044  loss_box_reg: 0.098  loss_rpn_cls: 0.004  loss_rpn_loc: 0.061  validation_loss: 0.275  loss_failed_to_get_better_count: 0.000  time: 0.8711  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 16:29:36] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:29:36] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:29:36] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:29:36] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:29:39] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1061 s / img. ETA=0:00:56
[07/29 16:29:44] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1055 s / img. ETA=0:00:53
[07/29 16:29:49] d2.evaluation.evaluator INFO: Inference done 88/468. 0.1043 s / img. ETA=0:00:49
[07/29 16:29:54] d2.evaluation.evaluator INFO: Inference done 129/468. 0.1037 s / img. ETA=0:00:43
[07/29 16:29:59] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1028 s / img. ETA=0:00:37
[07/29 16:30:04] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1031 s / img. ETA=0:00:33
[07/29 16:30:09] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1031 s / img. ETA=0:00:27
[07/29 16:30:14] d2.evaluation.evaluator INFO: Inference done 296/468. 0.1024 s / img. ETA=0:00:21
[07/29 16:30:19] d2.evaluation.evaluator INFO: Inference done 350/468. 0.1007 s / img. ETA=0:00:14
[07/29 16:30:24] d2.evaluation.evaluator INFO: Inference done 404/468. 0.0993 s / img. ETA=0:00:07
[07/29 16:30:29] d2.evaluation.evaluator INFO: Inference done 458/468. 0.0984 s / img. ETA=0:00:01
[07/29 16:30:30] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.230964 (0.112810 s / img per device, on 1 devices)
[07/29 16:30:30] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098256 s / img per device, on 1 devices)
[07/29 16:30:30] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:30:30] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:30:30] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:30:31] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 92.214 | 98.958 | 98.919 |  nan  | 91.067 | 92.760 |
[07/29 16:30:31] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:30:31] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:30:31] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:30:31] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:30:31] d2.evaluation.testing INFO: copypaste: 92.2139,98.9583,98.9192,nan,91.0671,92.7602
[07/29 16:30:33] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:55
[07/29 16:30:38] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 16:30:43] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 16:30:48] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 16:30:53] detectron2 INFO: Loss on Validation  done 163/468. 0.0001 s / img. ETA=0:00:40
[07/29 16:30:58] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:31:04] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:31:09] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:25
[07/29 16:31:14] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:31:19] detectron2 INFO: Loss on Validation  done 375/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:31:24] detectron2 INFO: Loss on Validation  done 423/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:31:29] detectron2 INFO: mean_loss=0.19486001614312065, best_loss=0.22204631070859254
[07/29 16:31:29] detectron2 INFO: saving model to: model_0001799.pth, saved_model_names=model_0000299.pth, model_0000599.pth, model_0000899.pth, model_0001199.pth, model_0001499.pth, model_0001799.pth
[07/29 16:31:29] detectron2 INFO: exeeded model save threshold - removing model_0000299.pth
[07/29 16:31:29] detectron2 INFO: saved_model_names=model_0000599.pth, model_0000899.pth, model_0001199.pth, model_0001499.pth, model_0001799.pth
[07/29 16:31:29] d2.utils.events INFO:  eta: 2:56:52  iter: 1799  total_loss: 0.185  loss_cls: 0.046  loss_box_reg: 0.089  loss_rpn_cls: 0.005  loss_rpn_loc: 0.047  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:31:46] d2.utils.events INFO:  eta: 2:56:28  iter: 1819  total_loss: 0.193  loss_cls: 0.045  loss_box_reg: 0.093  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8710  data_time: 0.0145  lr: 0.005000  max_mem: 7087M
[07/29 16:32:03] d2.utils.events INFO:  eta: 2:56:17  iter: 1839  total_loss: 0.195  loss_cls: 0.045  loss_box_reg: 0.100  loss_rpn_cls: 0.002  loss_rpn_loc: 0.046  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8709  data_time: 0.0166  lr: 0.005000  max_mem: 7087M
[07/29 16:32:20] d2.utils.events INFO:  eta: 2:55:59  iter: 1859  total_loss: 0.193  loss_cls: 0.038  loss_box_reg: 0.092  loss_rpn_cls: 0.004  loss_rpn_loc: 0.046  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8707  data_time: 0.0231  lr: 0.005000  max_mem: 7087M
[07/29 16:32:38] d2.utils.events INFO:  eta: 2:55:36  iter: 1879  total_loss: 0.189  loss_cls: 0.037  loss_box_reg: 0.094  loss_rpn_cls: 0.004  loss_rpn_loc: 0.052  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8706  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:32:55] d2.utils.events INFO:  eta: 2:55:05  iter: 1899  total_loss: 0.171  loss_cls: 0.039  loss_box_reg: 0.077  loss_rpn_cls: 0.005  loss_rpn_loc: 0.047  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8705  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:33:12] d2.utils.events INFO:  eta: 2:54:50  iter: 1919  total_loss: 0.170  loss_cls: 0.038  loss_box_reg: 0.084  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8706  data_time: 0.0144  lr: 0.005000  max_mem: 7087M
[07/29 16:33:30] d2.utils.events INFO:  eta: 2:54:41  iter: 1939  total_loss: 0.166  loss_cls: 0.037  loss_box_reg: 0.094  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8706  data_time: 0.0148  lr: 0.005000  max_mem: 7087M
[07/29 16:33:47] d2.utils.events INFO:  eta: 2:54:19  iter: 1959  total_loss: 0.180  loss_cls: 0.036  loss_box_reg: 0.084  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8705  data_time: 0.0140  lr: 0.005000  max_mem: 7087M
[07/29 16:34:04] d2.utils.events INFO:  eta: 2:54:02  iter: 1979  total_loss: 0.192  loss_cls: 0.039  loss_box_reg: 0.082  loss_rpn_cls: 0.004  loss_rpn_loc: 0.054  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8704  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 16:34:21] d2.utils.events INFO:  eta: 2:53:36  iter: 1999  total_loss: 0.189  loss_cls: 0.037  loss_box_reg: 0.092  loss_rpn_cls: 0.004  loss_rpn_loc: 0.050  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8702  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:34:39] d2.utils.events INFO:  eta: 2:53:21  iter: 2019  total_loss: 0.179  loss_cls: 0.035  loss_box_reg: 0.082  loss_rpn_cls: 0.003  loss_rpn_loc: 0.046  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8702  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:34:56] d2.utils.events INFO:  eta: 2:53:03  iter: 2039  total_loss: 0.185  loss_cls: 0.037  loss_box_reg: 0.092  loss_rpn_cls: 0.003  loss_rpn_loc: 0.050  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8701  data_time: 0.0170  lr: 0.005000  max_mem: 7087M
[07/29 16:35:14] d2.utils.events INFO:  eta: 2:52:49  iter: 2059  total_loss: 0.185  loss_cls: 0.039  loss_box_reg: 0.090  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8702  data_time: 0.0150  lr: 0.005000  max_mem: 7087M
[07/29 16:35:31] d2.utils.events INFO:  eta: 2:52:38  iter: 2079  total_loss: 0.190  loss_cls: 0.046  loss_box_reg: 0.087  loss_rpn_cls: 0.003  loss_rpn_loc: 0.038  validation_loss: 0.258  loss_failed_to_get_better_count: 0.000  time: 0.8701  data_time: 0.0167  lr: 0.005000  max_mem: 7087M
[07/29 16:35:50] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:35:50] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:35:50] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:35:50] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:35:53] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1004 s / img. ETA=0:01:03
[07/29 16:35:58] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1023 s / img. ETA=0:00:52
[07/29 16:36:03] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1040 s / img. ETA=0:00:49
[07/29 16:36:08] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1039 s / img. ETA=0:00:44
[07/29 16:36:13] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1038 s / img. ETA=0:00:38
[07/29 16:36:18] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1041 s / img. ETA=0:00:33
[07/29 16:36:23] d2.evaluation.evaluator INFO: Inference done 249/468. 0.1035 s / img. ETA=0:00:27
[07/29 16:36:28] d2.evaluation.evaluator INFO: Inference done 293/468. 0.1024 s / img. ETA=0:00:21
[07/29 16:36:33] d2.evaluation.evaluator INFO: Inference done 347/468. 0.1007 s / img. ETA=0:00:14
[07/29 16:36:38] d2.evaluation.evaluator INFO: Inference done 401/468. 0.0994 s / img. ETA=0:00:07
[07/29 16:36:43] d2.evaluation.evaluator INFO: Inference done 455/468. 0.0984 s / img. ETA=0:00:01
[07/29 16:36:45] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.563916 (0.113529 s / img per device, on 1 devices)
[07/29 16:36:45] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098205 s / img per device, on 1 devices)
[07/29 16:36:45] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:36:45] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:36:45] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:36:45] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 89.901 | 98.908 | 98.901 |  nan  | 88.884 | 90.239 |
[07/29 16:36:45] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:36:45] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:36:45] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:36:45] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:36:45] d2.evaluation.testing INFO: copypaste: 89.9007,98.9075,98.9015,nan,88.8839,90.2394
[07/29 16:36:48] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 16:36:53] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 16:36:58] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 16:37:03] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 16:37:08] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 16:37:13] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:37:18] detectron2 INFO: Loss on Validation  done 238/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:37:23] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 16:37:28] detectron2 INFO: Loss on Validation  done 323/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:37:33] detectron2 INFO: Loss on Validation  done 372/468. 0.0001 s / img. ETA=0:00:12
[07/29 16:37:38] detectron2 INFO: Loss on Validation  done 421/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:37:43] detectron2 INFO: mean_loss=0.19123022244832846, best_loss=0.19486001614312065
[07/29 16:37:43] detectron2 INFO: could not find a better loss with mean_loss=0.19123022244832846 best_loss=0.19486001614312065 and failed count=1
[07/29 16:37:43] detectron2 INFO: saving model to: model_0002099.pth, saved_model_names=model_0000599.pth, model_0000899.pth, model_0001199.pth, model_0001499.pth, model_0001799.pth, model_0002099.pth
[07/29 16:37:43] detectron2 INFO: exeeded model save threshold - removing model_0000599.pth
[07/29 16:37:43] detectron2 INFO: saved_model_names=model_0000899.pth, model_0001199.pth, model_0001499.pth, model_0001799.pth, model_0002099.pth
[07/29 16:37:43] d2.utils.events INFO:  eta: 2:52:21  iter: 2099  total_loss: 0.194  loss_cls: 0.041  loss_box_reg: 0.088  loss_rpn_cls: 0.003  loss_rpn_loc: 0.062  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8702  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 16:38:00] d2.utils.events INFO:  eta: 2:52:04  iter: 2119  total_loss: 0.176  loss_cls: 0.038  loss_box_reg: 0.080  loss_rpn_cls: 0.004  loss_rpn_loc: 0.046  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8700  data_time: 0.0148  lr: 0.005000  max_mem: 7087M
[07/29 16:38:18] d2.utils.events INFO:  eta: 2:51:47  iter: 2139  total_loss: 0.174  loss_cls: 0.035  loss_box_reg: 0.091  loss_rpn_cls: 0.004  loss_rpn_loc: 0.037  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8700  data_time: 0.0124  lr: 0.005000  max_mem: 7087M
[07/29 16:38:35] d2.utils.events INFO:  eta: 2:51:37  iter: 2159  total_loss: 0.163  loss_cls: 0.038  loss_box_reg: 0.084  loss_rpn_cls: 0.003  loss_rpn_loc: 0.038  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8700  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 16:38:52] d2.utils.events INFO:  eta: 2:51:12  iter: 2179  total_loss: 0.180  loss_cls: 0.037  loss_box_reg: 0.091  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0170  lr: 0.005000  max_mem: 7087M
[07/29 16:39:10] d2.utils.events INFO:  eta: 2:50:55  iter: 2199  total_loss: 0.188  loss_cls: 0.039  loss_box_reg: 0.093  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 16:39:27] d2.utils.events INFO:  eta: 2:50:36  iter: 2219  total_loss: 0.178  loss_cls: 0.036  loss_box_reg: 0.083  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 16:39:44] d2.utils.events INFO:  eta: 2:50:29  iter: 2239  total_loss: 0.187  loss_cls: 0.042  loss_box_reg: 0.090  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0130  lr: 0.005000  max_mem: 7087M
[07/29 16:40:02] d2.utils.events INFO:  eta: 2:50:17  iter: 2259  total_loss: 0.169  loss_cls: 0.037  loss_box_reg: 0.073  loss_rpn_cls: 0.003  loss_rpn_loc: 0.041  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0164  lr: 0.005000  max_mem: 7087M
[07/29 16:40:19] d2.utils.events INFO:  eta: 2:50:09  iter: 2279  total_loss: 0.166  loss_cls: 0.030  loss_box_reg: 0.089  loss_rpn_cls: 0.003  loss_rpn_loc: 0.044  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0177  lr: 0.005000  max_mem: 7087M
[07/29 16:40:37] d2.utils.events INFO:  eta: 2:49:52  iter: 2299  total_loss: 0.180  loss_cls: 0.038  loss_box_reg: 0.084  loss_rpn_cls: 0.003  loss_rpn_loc: 0.049  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0127  lr: 0.005000  max_mem: 7087M
[07/29 16:40:54] d2.utils.events INFO:  eta: 2:49:29  iter: 2319  total_loss: 0.177  loss_cls: 0.034  loss_box_reg: 0.090  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:41:11] d2.utils.events INFO:  eta: 2:49:11  iter: 2339  total_loss: 0.159  loss_cls: 0.033  loss_box_reg: 0.084  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0168  lr: 0.005000  max_mem: 7087M
[07/29 16:41:28] d2.utils.events INFO:  eta: 2:48:50  iter: 2359  total_loss: 0.154  loss_cls: 0.032  loss_box_reg: 0.074  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0140  lr: 0.005000  max_mem: 7087M
[07/29 16:41:45] d2.utils.events INFO:  eta: 2:48:33  iter: 2379  total_loss: 0.157  loss_cls: 0.032  loss_box_reg: 0.080  loss_rpn_cls: 0.003  loss_rpn_loc: 0.038  validation_loss: 0.241  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 16:42:06] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:42:06] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:42:06] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:42:06] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:42:08] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1063 s / img. ETA=0:00:49
[07/29 16:42:13] d2.evaluation.evaluator INFO: Inference done 49/468. 0.1074 s / img. ETA=0:00:54
[07/29 16:42:18] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1066 s / img. ETA=0:00:49
[07/29 16:42:23] d2.evaluation.evaluator INFO: Inference done 129/468. 0.1049 s / img. ETA=0:00:43
[07/29 16:42:28] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1047 s / img. ETA=0:00:37
[07/29 16:42:34] d2.evaluation.evaluator INFO: Inference done 210/468. 0.1048 s / img. ETA=0:00:32
[07/29 16:42:39] d2.evaluation.evaluator INFO: Inference done 251/468. 0.1042 s / img. ETA=0:00:27
[07/29 16:42:44] d2.evaluation.evaluator INFO: Inference done 298/468. 0.1026 s / img. ETA=0:00:20
[07/29 16:42:49] d2.evaluation.evaluator INFO: Inference done 352/468. 0.1008 s / img. ETA=0:00:13
[07/29 16:42:54] d2.evaluation.evaluator INFO: Inference done 406/468. 0.0995 s / img. ETA=0:00:07
[07/29 16:42:59] d2.evaluation.evaluator INFO: Inference done 460/468. 0.0985 s / img. ETA=0:00:00
[07/29 16:43:00] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.970296 (0.112247 s / img per device, on 1 devices)
[07/29 16:43:00] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098409 s / img per device, on 1 devices)
[07/29 16:43:00] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:43:00] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:43:00] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:43:00] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 90.380 | 98.956 | 98.934 |  nan  | 90.375 | 90.513 |
[07/29 16:43:00] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:43:00] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:43:00] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:43:00] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:43:00] d2.evaluation.testing INFO: copypaste: 90.3805,98.9555,98.9343,nan,90.3750,90.5131
[07/29 16:43:02] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 16:43:07] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 16:43:12] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:49
[07/29 16:43:17] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 16:43:23] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 16:43:28] detectron2 INFO: Loss on Validation  done 203/468. 0.0001 s / img. ETA=0:00:34
[07/29 16:43:33] detectron2 INFO: Loss on Validation  done 241/468. 0.0001 s / img. ETA=0:00:29
[07/29 16:43:38] detectron2 INFO: Loss on Validation  done 281/468. 0.0001 s / img. ETA=0:00:24
[07/29 16:43:43] detectron2 INFO: Loss on Validation  done 328/468. 0.0001 s / img. ETA=0:00:17
[07/29 16:43:48] detectron2 INFO: Loss on Validation  done 378/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:43:53] detectron2 INFO: Loss on Validation  done 426/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:43:57] detectron2 INFO: mean_loss=0.18059760322568635, best_loss=0.19486001614312065
[07/29 16:43:57] detectron2 INFO: saving model to: model_0002399.pth, saved_model_names=model_0000899.pth, model_0001199.pth, model_0001499.pth, model_0001799.pth, model_0002099.pth, model_0002399.pth
[07/29 16:43:57] detectron2 INFO: exeeded model save threshold - removing model_0000899.pth
[07/29 16:43:57] detectron2 INFO: saved_model_names=model_0001199.pth, model_0001499.pth, model_0001799.pth, model_0002099.pth, model_0002399.pth
[07/29 16:43:57] d2.utils.events INFO:  eta: 2:48:22  iter: 2399  total_loss: 0.152  loss_cls: 0.033  loss_box_reg: 0.078  loss_rpn_cls: 0.003  loss_rpn_loc: 0.041  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0151  lr: 0.005000  max_mem: 7087M
[07/29 16:44:15] d2.utils.events INFO:  eta: 2:48:02  iter: 2419  total_loss: 0.159  loss_cls: 0.031  loss_box_reg: 0.075  loss_rpn_cls: 0.003  loss_rpn_loc: 0.041  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 16:44:32] d2.utils.events INFO:  eta: 2:47:38  iter: 2439  total_loss: 0.176  loss_cls: 0.036  loss_box_reg: 0.082  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 16:44:50] d2.utils.events INFO:  eta: 2:47:29  iter: 2459  total_loss: 0.176  loss_cls: 0.033  loss_box_reg: 0.080  loss_rpn_cls: 0.003  loss_rpn_loc: 0.052  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0139  lr: 0.005000  max_mem: 7087M
[07/29 16:45:07] d2.utils.events INFO:  eta: 2:47:03  iter: 2479  total_loss: 0.176  loss_cls: 0.034  loss_box_reg: 0.082  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0167  lr: 0.005000  max_mem: 7087M
[07/29 16:45:24] d2.utils.events INFO:  eta: 2:46:34  iter: 2499  total_loss: 0.160  loss_cls: 0.035  loss_box_reg: 0.081  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0125  lr: 0.005000  max_mem: 7087M
[07/29 16:45:42] d2.utils.events INFO:  eta: 2:46:15  iter: 2519  total_loss: 0.157  loss_cls: 0.035  loss_box_reg: 0.081  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:46:00] d2.utils.events INFO:  eta: 2:46:10  iter: 2539  total_loss: 0.150  loss_cls: 0.029  loss_box_reg: 0.069  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0143  lr: 0.005000  max_mem: 7087M
[07/29 16:46:17] d2.utils.events INFO:  eta: 2:46:04  iter: 2559  total_loss: 0.157  loss_cls: 0.032  loss_box_reg: 0.077  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0174  lr: 0.005000  max_mem: 7087M
[07/29 16:46:35] d2.utils.events INFO:  eta: 2:45:36  iter: 2579  total_loss: 0.152  loss_cls: 0.033  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0163  lr: 0.005000  max_mem: 7087M
[07/29 16:46:52] d2.utils.events INFO:  eta: 2:45:35  iter: 2599  total_loss: 0.144  loss_cls: 0.028  loss_box_reg: 0.069  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0136  lr: 0.005000  max_mem: 7087M
[07/29 16:47:10] d2.utils.events INFO:  eta: 2:45:29  iter: 2619  total_loss: 0.153  loss_cls: 0.030  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 16:47:27] d2.utils.events INFO:  eta: 2:45:08  iter: 2639  total_loss: 0.166  loss_cls: 0.032  loss_box_reg: 0.083  loss_rpn_cls: 0.003  loss_rpn_loc: 0.044  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 16:47:45] d2.utils.events INFO:  eta: 2:44:54  iter: 2659  total_loss: 0.159  loss_cls: 0.030  loss_box_reg: 0.077  loss_rpn_cls: 0.003  loss_rpn_loc: 0.037  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 16:48:02] d2.utils.events INFO:  eta: 2:44:33  iter: 2679  total_loss: 0.167  loss_cls: 0.036  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.035  validation_loss: 0.231  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0181  lr: 0.005000  max_mem: 7087M
[07/29 16:48:21] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:48:21] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:48:21] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:48:21] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:48:24] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0994 s / img. ETA=0:01:03
[07/29 16:48:29] d2.evaluation.evaluator INFO: Inference done 49/468. 0.1014 s / img. ETA=0:00:56
[07/29 16:48:34] d2.evaluation.evaluator INFO: Inference done 86/468. 0.1029 s / img. ETA=0:00:51
[07/29 16:48:39] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1035 s / img. ETA=0:00:44
[07/29 16:48:44] d2.evaluation.evaluator INFO: Inference done 168/468. 0.1028 s / img. ETA=0:00:38
[07/29 16:48:49] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1035 s / img. ETA=0:00:33
[07/29 16:48:54] d2.evaluation.evaluator INFO: Inference done 249/468. 0.1033 s / img. ETA=0:00:27
[07/29 16:48:59] d2.evaluation.evaluator INFO: Inference done 294/468. 0.1020 s / img. ETA=0:00:21
[07/29 16:49:04] d2.evaluation.evaluator INFO: Inference done 348/468. 0.1004 s / img. ETA=0:00:14
[07/29 16:49:09] d2.evaluation.evaluator INFO: Inference done 402/468. 0.0991 s / img. ETA=0:00:07
[07/29 16:49:14] d2.evaluation.evaluator INFO: Inference done 456/468. 0.0982 s / img. ETA=0:00:01
[07/29 16:49:16] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.565532 (0.113532 s / img per device, on 1 devices)
[07/29 16:49:16] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098053 s / img per device, on 1 devices)
[07/29 16:49:16] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:49:16] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:49:16] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:49:16] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 92.924 | 98.929 | 98.928 |  nan  | 91.264 | 93.686 |
[07/29 16:49:16] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:49:16] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:49:16] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:49:16] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:49:16] d2.evaluation.testing INFO: copypaste: 92.9240,98.9293,98.9280,nan,91.2641,93.6859
[07/29 16:49:19] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 16:49:24] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 16:49:29] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 16:49:34] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:46
[07/29 16:49:39] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 16:49:44] detectron2 INFO: Loss on Validation  done 200/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:49:49] detectron2 INFO: Loss on Validation  done 238/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:49:54] detectron2 INFO: Loss on Validation  done 276/468. 0.0001 s / img. ETA=0:00:25
[07/29 16:49:59] detectron2 INFO: Loss on Validation  done 322/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:50:04] detectron2 INFO: Loss on Validation  done 371/468. 0.0001 s / img. ETA=0:00:12
[07/29 16:50:09] detectron2 INFO: Loss on Validation  done 419/468. 0.0001 s / img. ETA=0:00:06
[07/29 16:50:14] detectron2 INFO: Loss on Validation  done 467/468. 0.0001 s / img. ETA=0:00:00
[07/29 16:50:15] detectron2 INFO: mean_loss=0.15299182322134222, best_loss=0.18059760322568635
[07/29 16:50:15] detectron2 INFO: saving model to: model_0002699.pth, saved_model_names=model_0001199.pth, model_0001499.pth, model_0001799.pth, model_0002099.pth, model_0002399.pth, model_0002699.pth
[07/29 16:50:15] detectron2 INFO: exeeded model save threshold - removing model_0001199.pth
[07/29 16:50:15] detectron2 INFO: saved_model_names=model_0001499.pth, model_0001799.pth, model_0002099.pth, model_0002399.pth, model_0002699.pth
[07/29 16:50:15] d2.utils.events INFO:  eta: 2:44:16  iter: 2699  total_loss: 0.148  loss_cls: 0.032  loss_box_reg: 0.067  loss_rpn_cls: 0.003  loss_rpn_loc: 0.037  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 16:50:31] d2.utils.events INFO:  eta: 2:43:54  iter: 2719  total_loss: 0.152  loss_cls: 0.030  loss_box_reg: 0.079  loss_rpn_cls: 0.002  loss_rpn_loc: 0.039  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:50:49] d2.utils.events INFO:  eta: 2:43:37  iter: 2739  total_loss: 0.145  loss_cls: 0.031  loss_box_reg: 0.067  loss_rpn_cls: 0.003  loss_rpn_loc: 0.032  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:51:07] d2.utils.events INFO:  eta: 2:43:21  iter: 2759  total_loss: 0.340  loss_cls: 0.109  loss_box_reg: 0.117  loss_rpn_cls: 0.011  loss_rpn_loc: 0.059  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0165  lr: 0.005000  max_mem: 7087M
[07/29 16:51:24] d2.utils.events INFO:  eta: 2:43:04  iter: 2779  total_loss: 0.308  loss_cls: 0.092  loss_box_reg: 0.129  loss_rpn_cls: 0.013  loss_rpn_loc: 0.070  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 16:51:41] d2.utils.events INFO:  eta: 2:42:42  iter: 2799  total_loss: 0.291  loss_cls: 0.074  loss_box_reg: 0.126  loss_rpn_cls: 0.007  loss_rpn_loc: 0.070  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 16:51:58] d2.utils.events INFO:  eta: 2:42:25  iter: 2819  total_loss: 0.195  loss_cls: 0.045  loss_box_reg: 0.094  loss_rpn_cls: 0.006  loss_rpn_loc: 0.048  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0167  lr: 0.005000  max_mem: 7087M
[07/29 16:52:15] d2.utils.events INFO:  eta: 2:42:08  iter: 2839  total_loss: 0.204  loss_cls: 0.048  loss_box_reg: 0.096  loss_rpn_cls: 0.005  loss_rpn_loc: 0.048  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0174  lr: 0.005000  max_mem: 7087M
[07/29 16:52:34] d2.utils.events INFO:  eta: 2:42:01  iter: 2859  total_loss: 0.201  loss_cls: 0.046  loss_box_reg: 0.087  loss_rpn_cls: 0.005  loss_rpn_loc: 0.058  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0143  lr: 0.005000  max_mem: 7087M
[07/29 16:52:51] d2.utils.events INFO:  eta: 2:41:42  iter: 2879  total_loss: 0.169  loss_cls: 0.037  loss_box_reg: 0.077  loss_rpn_cls: 0.004  loss_rpn_loc: 0.044  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 16:53:08] d2.utils.events INFO:  eta: 2:41:32  iter: 2899  total_loss: 0.183  loss_cls: 0.035  loss_box_reg: 0.088  loss_rpn_cls: 0.004  loss_rpn_loc: 0.050  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0166  lr: 0.005000  max_mem: 7087M
[07/29 16:53:26] d2.utils.events INFO:  eta: 2:41:14  iter: 2919  total_loss: 0.176  loss_cls: 0.036  loss_box_reg: 0.082  loss_rpn_cls: 0.004  loss_rpn_loc: 0.050  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0150  lr: 0.005000  max_mem: 7087M
[07/29 16:53:43] d2.utils.events INFO:  eta: 2:40:51  iter: 2939  total_loss: 0.165  loss_cls: 0.034  loss_box_reg: 0.080  loss_rpn_cls: 0.004  loss_rpn_loc: 0.047  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0142  lr: 0.005000  max_mem: 7087M
[07/29 16:54:00] d2.utils.events INFO:  eta: 2:40:40  iter: 2959  total_loss: 0.158  loss_cls: 0.033  loss_box_reg: 0.077  loss_rpn_cls: 0.004  loss_rpn_loc: 0.040  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0182  lr: 0.005000  max_mem: 7087M
[07/29 16:54:18] d2.utils.events INFO:  eta: 2:40:25  iter: 2979  total_loss: 0.172  loss_cls: 0.037  loss_box_reg: 0.087  loss_rpn_cls: 0.005  loss_rpn_loc: 0.043  validation_loss: 0.222  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0194  lr: 0.005000  max_mem: 7087M
[07/29 16:54:39] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 16:54:39] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 16:54:39] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 16:54:39] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 16:54:42] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1035 s / img. ETA=0:01:03
[07/29 16:54:47] d2.evaluation.evaluator INFO: Inference done 50/468. 0.1028 s / img. ETA=0:00:54
[07/29 16:54:52] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1027 s / img. ETA=0:00:50
[07/29 16:54:57] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1042 s / img. ETA=0:00:44
[07/29 16:55:02] d2.evaluation.evaluator INFO: Inference done 168/468. 0.1050 s / img. ETA=0:00:38
[07/29 16:55:07] d2.evaluation.evaluator INFO: Inference done 207/468. 0.1052 s / img. ETA=0:00:33
[07/29 16:55:12] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1063 s / img. ETA=0:00:28
[07/29 16:55:17] d2.evaluation.evaluator INFO: Inference done 292/468. 0.1050 s / img. ETA=0:00:22
[07/29 16:55:22] d2.evaluation.evaluator INFO: Inference done 345/468. 0.1031 s / img. ETA=0:00:14
[07/29 16:55:27] d2.evaluation.evaluator INFO: Inference done 399/468. 0.1016 s / img. ETA=0:00:08
[07/29 16:55:32] d2.evaluation.evaluator INFO: Inference done 452/468. 0.1005 s / img. ETA=0:00:01
[07/29 16:55:34] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.800915 (0.114041 s / img per device, on 1 devices)
[07/29 16:55:34] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.100302 s / img per device, on 1 devices)
[07/29 16:55:34] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 16:55:34] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 16:55:34] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 16:55:34] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.122 | 98.912 | 98.908 |  nan  | 91.410 | 94.127 |
[07/29 16:55:34] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 16:55:34] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 16:55:34] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 16:55:34] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 16:55:34] d2.evaluation.testing INFO: copypaste: 93.1223,98.9121,98.9082,nan,91.4100,94.1269
[07/29 16:55:37] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 16:55:42] detectron2 INFO: Loss on Validation  done 48/468. 0.0001 s / img. ETA=0:00:56
[07/29 16:55:47] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 16:55:52] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:46
[07/29 16:55:57] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 16:56:02] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 16:56:07] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 16:56:12] detectron2 INFO: Loss on Validation  done 278/468. 0.0001 s / img. ETA=0:00:25
[07/29 16:56:17] detectron2 INFO: Loss on Validation  done 325/468. 0.0001 s / img. ETA=0:00:18
[07/29 16:56:22] detectron2 INFO: Loss on Validation  done 374/468. 0.0001 s / img. ETA=0:00:11
[07/29 16:56:27] detectron2 INFO: Loss on Validation  done 422/468. 0.0001 s / img. ETA=0:00:05
[07/29 16:56:32] detectron2 INFO: mean_loss=0.15954915430267325, best_loss=0.15299182322134222
[07/29 16:56:32] detectron2 INFO: could not find a better loss with mean_loss=0.15954915430267325 best_loss=0.15299182322134222 and failed count=1
[07/29 16:56:32] detectron2 INFO: saving model to: model_0002999.pth, saved_model_names=model_0001499.pth, model_0001799.pth, model_0002099.pth, model_0002399.pth, model_0002699.pth, model_0002999.pth
[07/29 16:56:32] detectron2 INFO: exeeded model save threshold - removing model_0001499.pth
[07/29 16:56:32] detectron2 INFO: saved_model_names=model_0001799.pth, model_0002099.pth, model_0002399.pth, model_0002699.pth, model_0002999.pth
[07/29 16:56:33] d2.utils.events INFO:  eta: 2:40:23  iter: 2999  total_loss: 0.140  loss_cls: 0.018  loss_box_reg: 0.067  loss_rpn_cls: 0.009  loss_rpn_loc: 0.039  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8701  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 16:56:50] d2.utils.events INFO:  eta: 2:40:00  iter: 3019  total_loss: 0.175  loss_cls: 0.038  loss_box_reg: 0.083  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8700  data_time: 0.0185  lr: 0.005000  max_mem: 7087M
[07/29 16:57:07] d2.utils.events INFO:  eta: 2:39:41  iter: 3039  total_loss: 0.169  loss_cls: 0.032  loss_box_reg: 0.074  loss_rpn_cls: 0.003  loss_rpn_loc: 0.046  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8700  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 16:57:24] d2.utils.events INFO:  eta: 2:39:15  iter: 3059  total_loss: 0.178  loss_cls: 0.041  loss_box_reg: 0.089  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 16:57:42] d2.utils.events INFO:  eta: 2:39:03  iter: 3079  total_loss: 0.147  loss_cls: 0.035  loss_box_reg: 0.069  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0140  lr: 0.005000  max_mem: 7087M
[07/29 16:57:59] d2.utils.events INFO:  eta: 2:38:37  iter: 3099  total_loss: 0.144  loss_cls: 0.028  loss_box_reg: 0.079  loss_rpn_cls: 0.003  loss_rpn_loc: 0.038  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0156  lr: 0.005000  max_mem: 7087M
[07/29 16:58:16] d2.utils.events INFO:  eta: 2:38:28  iter: 3119  total_loss: 0.145  loss_cls: 0.028  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0139  lr: 0.005000  max_mem: 7087M
[07/29 16:58:33] d2.utils.events INFO:  eta: 2:38:03  iter: 3139  total_loss: 0.160  loss_cls: 0.029  loss_box_reg: 0.077  loss_rpn_cls: 0.004  loss_rpn_loc: 0.041  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 16:58:50] d2.utils.events INFO:  eta: 2:37:36  iter: 3159  total_loss: 0.151  loss_cls: 0.029  loss_box_reg: 0.079  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0163  lr: 0.005000  max_mem: 7087M
[07/29 16:59:08] d2.utils.events INFO:  eta: 2:37:25  iter: 3179  total_loss: 0.173  loss_cls: 0.036  loss_box_reg: 0.085  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0150  lr: 0.005000  max_mem: 7087M
[07/29 16:59:25] d2.utils.events INFO:  eta: 2:36:59  iter: 3199  total_loss: 0.153  loss_cls: 0.029  loss_box_reg: 0.080  loss_rpn_cls: 0.003  loss_rpn_loc: 0.037  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 16:59:42] d2.utils.events INFO:  eta: 2:36:41  iter: 3219  total_loss: 0.140  loss_cls: 0.032  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0142  lr: 0.005000  max_mem: 7087M
[07/29 17:00:00] d2.utils.events INFO:  eta: 2:36:23  iter: 3239  total_loss: 0.136  loss_cls: 0.025  loss_box_reg: 0.066  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0162  lr: 0.005000  max_mem: 7087M
[07/29 17:00:17] d2.utils.events INFO:  eta: 2:36:02  iter: 3259  total_loss: 0.153  loss_cls: 0.029  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 17:00:35] d2.utils.events INFO:  eta: 2:35:48  iter: 3279  total_loss: 0.134  loss_cls: 0.025  loss_box_reg: 0.059  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.208  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0151  lr: 0.005000  max_mem: 7087M
[07/29 17:00:54] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:00:54] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:00:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:00:54] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:00:57] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1118 s / img. ETA=0:01:05
[07/29 17:01:02] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1058 s / img. ETA=0:00:53
[07/29 17:01:07] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1082 s / img. ETA=0:00:50
[07/29 17:01:12] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1070 s / img. ETA=0:00:44
[07/29 17:01:17] d2.evaluation.evaluator INFO: Inference done 167/468. 0.1056 s / img. ETA=0:00:39
[07/29 17:01:22] d2.evaluation.evaluator INFO: Inference done 207/468. 0.1058 s / img. ETA=0:00:33
[07/29 17:01:27] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1056 s / img. ETA=0:00:28
[07/29 17:01:32] d2.evaluation.evaluator INFO: Inference done 291/468. 0.1045 s / img. ETA=0:00:22
[07/29 17:01:37] d2.evaluation.evaluator INFO: Inference done 345/468. 0.1025 s / img. ETA=0:00:14
[07/29 17:01:42] d2.evaluation.evaluator INFO: Inference done 399/468. 0.1009 s / img. ETA=0:00:08
[07/29 17:01:47] d2.evaluation.evaluator INFO: Inference done 453/468. 0.0997 s / img. ETA=0:00:01
[07/29 17:01:49] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.864937 (0.114179 s / img per device, on 1 devices)
[07/29 17:01:49] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099519 s / img per device, on 1 devices)
[07/29 17:01:49] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:01:49] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:01:49] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:01:49] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.279 | 98.961 | 98.953 |  nan  | 91.012 | 94.223 |
[07/29 17:01:49] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:01:49] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:01:49] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:01:49] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:01:49] d2.evaluation.testing INFO: copypaste: 93.2791,98.9606,98.9525,nan,91.0119,94.2229
[07/29 17:01:52] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:01:57] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:02:02] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:02:07] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 17:02:12] detectron2 INFO: Loss on Validation  done 161/468. 0.0001 s / img. ETA=0:00:41
[07/29 17:02:17] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:02:22] detectron2 INFO: Loss on Validation  done 237/468. 0.0001 s / img. ETA=0:00:30
[07/29 17:02:27] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 17:02:32] detectron2 INFO: Loss on Validation  done 320/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:02:37] detectron2 INFO: Loss on Validation  done 369/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:02:42] detectron2 INFO: Loss on Validation  done 418/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:02:47] detectron2 INFO: Loss on Validation  done 466/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:02:48] detectron2 INFO: mean_loss=0.17572354030975335, best_loss=0.15299182322134222
[07/29 17:02:48] detectron2 INFO: could not find a better loss with mean_loss=0.17572354030975335 best_loss=0.15299182322134222 and failed count=2
[07/29 17:02:48] detectron2 INFO: saving model to: model_0003299.pth, saved_model_names=model_0001799.pth, model_0002099.pth, model_0002399.pth, model_0002699.pth, model_0002999.pth, model_0003299.pth
[07/29 17:02:48] detectron2 INFO: exeeded model save threshold - removing model_0001799.pth
[07/29 17:02:48] detectron2 INFO: saved_model_names=model_0002099.pth, model_0002399.pth, model_0002699.pth, model_0002999.pth, model_0003299.pth
[07/29 17:02:48] d2.utils.events INFO:  eta: 2:35:31  iter: 3299  total_loss: 0.142  loss_cls: 0.025  loss_box_reg: 0.061  loss_rpn_cls: 0.003  loss_rpn_loc: 0.047  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0179  lr: 0.005000  max_mem: 7087M
[07/29 17:03:05] d2.utils.events INFO:  eta: 2:35:27  iter: 3319  total_loss: 0.151  loss_cls: 0.026  loss_box_reg: 0.073  loss_rpn_cls: 0.003  loss_rpn_loc: 0.042  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0156  lr: 0.005000  max_mem: 7087M
[07/29 17:03:23] d2.utils.events INFO:  eta: 2:35:20  iter: 3339  total_loss: 0.156  loss_cls: 0.030  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.044  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0135  lr: 0.005000  max_mem: 7087M
[07/29 17:03:40] d2.utils.events INFO:  eta: 2:35:06  iter: 3359  total_loss: 0.157  loss_cls: 0.032  loss_box_reg: 0.079  loss_rpn_cls: 0.004  loss_rpn_loc: 0.046  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 17:03:58] d2.utils.events INFO:  eta: 2:34:45  iter: 3379  total_loss: 0.156  loss_cls: 0.030  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 17:04:15] d2.utils.events INFO:  eta: 2:34:21  iter: 3399  total_loss: 0.151  loss_cls: 0.027  loss_box_reg: 0.065  loss_rpn_cls: 0.003  loss_rpn_loc: 0.038  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 17:04:32] d2.utils.events INFO:  eta: 2:33:51  iter: 3419  total_loss: 0.154  loss_cls: 0.032  loss_box_reg: 0.073  loss_rpn_cls: 0.002  loss_rpn_loc: 0.041  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0134  lr: 0.005000  max_mem: 7087M
[07/29 17:04:49] d2.utils.events INFO:  eta: 2:33:37  iter: 3439  total_loss: 0.147  loss_cls: 0.029  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0134  lr: 0.005000  max_mem: 7087M
[07/29 17:05:07] d2.utils.events INFO:  eta: 2:33:29  iter: 3459  total_loss: 0.151  loss_cls: 0.027  loss_box_reg: 0.070  loss_rpn_cls: 0.003  loss_rpn_loc: 0.041  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 17:05:24] d2.utils.events INFO:  eta: 2:33:14  iter: 3479  total_loss: 0.148  loss_cls: 0.027  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0146  lr: 0.005000  max_mem: 7087M
[07/29 17:05:41] d2.utils.events INFO:  eta: 2:33:04  iter: 3499  total_loss: 0.151  loss_cls: 0.025  loss_box_reg: 0.070  loss_rpn_cls: 0.002  loss_rpn_loc: 0.043  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8694  data_time: 0.0136  lr: 0.005000  max_mem: 7087M
[07/29 17:05:59] d2.utils.events INFO:  eta: 2:32:56  iter: 3519  total_loss: 0.169  loss_cls: 0.032  loss_box_reg: 0.073  loss_rpn_cls: 0.004  loss_rpn_loc: 0.057  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0139  lr: 0.005000  max_mem: 7087M
[07/29 17:06:16] d2.utils.events INFO:  eta: 2:32:29  iter: 3539  total_loss: 0.142  loss_cls: 0.028  loss_box_reg: 0.064  loss_rpn_cls: 0.003  loss_rpn_loc: 0.035  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0163  lr: 0.005000  max_mem: 7087M
[07/29 17:06:34] d2.utils.events INFO:  eta: 2:32:19  iter: 3559  total_loss: 0.138  loss_cls: 0.025  loss_box_reg: 0.067  loss_rpn_cls: 0.003  loss_rpn_loc: 0.041  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0142  lr: 0.005000  max_mem: 7087M
[07/29 17:06:51] d2.utils.events INFO:  eta: 2:32:02  iter: 3579  total_loss: 0.143  loss_cls: 0.031  loss_box_reg: 0.066  loss_rpn_cls: 0.003  loss_rpn_loc: 0.034  validation_loss: 0.195  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0138  lr: 0.005000  max_mem: 7087M
[07/29 17:07:11] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:07:11] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:07:11] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:07:12] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:07:14] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1056 s / img. ETA=0:00:49
[07/29 17:07:19] d2.evaluation.evaluator INFO: Inference done 49/468. 0.1048 s / img. ETA=0:00:55
[07/29 17:07:24] d2.evaluation.evaluator INFO: Inference done 86/468. 0.1053 s / img. ETA=0:00:51
[07/29 17:07:29] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1036 s / img. ETA=0:00:44
[07/29 17:07:35] d2.evaluation.evaluator INFO: Inference done 167/468. 0.1036 s / img. ETA=0:00:39
[07/29 17:07:40] d2.evaluation.evaluator INFO: Inference done 207/468. 0.1043 s / img. ETA=0:00:33
[07/29 17:07:45] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1045 s / img. ETA=0:00:28
[07/29 17:07:50] d2.evaluation.evaluator INFO: Inference done 291/468. 0.1035 s / img. ETA=0:00:22
[07/29 17:07:55] d2.evaluation.evaluator INFO: Inference done 345/468. 0.1016 s / img. ETA=0:00:14
[07/29 17:08:00] d2.evaluation.evaluator INFO: Inference done 399/468. 0.1001 s / img. ETA=0:00:08
[07/29 17:08:05] d2.evaluation.evaluator INFO: Inference done 453/468. 0.0991 s / img. ETA=0:00:01
[07/29 17:08:06] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.827746 (0.114099 s / img per device, on 1 devices)
[07/29 17:08:06] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098882 s / img per device, on 1 devices)
[07/29 17:08:06] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:08:06] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:08:06] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:08:07] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.515 | 98.935 | 98.935 |  nan  | 92.137 | 95.427 |
[07/29 17:08:07] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:08:07] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:08:07] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:08:07] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:08:07] d2.evaluation.testing INFO: copypaste: 94.5146,98.9352,98.9345,nan,92.1371,95.4269
[07/29 17:08:09] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:08:14] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 17:08:19] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:08:24] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 17:08:29] detectron2 INFO: Loss on Validation  done 163/468. 0.0001 s / img. ETA=0:00:40
[07/29 17:08:35] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 17:08:40] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 17:08:45] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:25
[07/29 17:08:50] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 17:08:55] detectron2 INFO: Loss on Validation  done 376/468. 0.0001 s / img. ETA=0:00:11
[07/29 17:09:00] detectron2 INFO: Loss on Validation  done 424/468. 0.0001 s / img. ETA=0:00:05
[07/29 17:09:05] detectron2 INFO: mean_loss=0.1466805888295102, best_loss=0.15299182322134222
[07/29 17:09:05] detectron2 INFO: saving model to: model_0003599.pth, saved_model_names=model_0002099.pth, model_0002399.pth, model_0002699.pth, model_0002999.pth, model_0003299.pth, model_0003599.pth
[07/29 17:09:05] detectron2 INFO: exeeded model save threshold - removing model_0002099.pth
[07/29 17:09:05] detectron2 INFO: saved_model_names=model_0002399.pth, model_0002699.pth, model_0002999.pth, model_0003299.pth, model_0003599.pth
[07/29 17:09:05] d2.utils.events INFO:  eta: 2:31:39  iter: 3599  total_loss: 0.129  loss_cls: 0.025  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0176  lr: 0.005000  max_mem: 7087M
[07/29 17:09:22] d2.utils.events INFO:  eta: 2:31:13  iter: 3619  total_loss: 0.141  loss_cls: 0.026  loss_box_reg: 0.073  loss_rpn_cls: 0.003  loss_rpn_loc: 0.035  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0175  lr: 0.005000  max_mem: 7087M
[07/29 17:09:40] d2.utils.events INFO:  eta: 2:31:04  iter: 3639  total_loss: 0.133  loss_cls: 0.026  loss_box_reg: 0.065  loss_rpn_cls: 0.003  loss_rpn_loc: 0.037  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 17:09:57] d2.utils.events INFO:  eta: 2:30:41  iter: 3659  total_loss: 0.158  loss_cls: 0.029  loss_box_reg: 0.065  loss_rpn_cls: 0.003  loss_rpn_loc: 0.045  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0151  lr: 0.005000  max_mem: 7087M
[07/29 17:10:14] d2.utils.events INFO:  eta: 2:30:25  iter: 3679  total_loss: 0.137  loss_cls: 0.024  loss_box_reg: 0.067  loss_rpn_cls: 0.003  loss_rpn_loc: 0.034  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 17:10:32] d2.utils.events INFO:  eta: 2:30:04  iter: 3699  total_loss: 0.155  loss_cls: 0.027  loss_box_reg: 0.074  loss_rpn_cls: 0.003  loss_rpn_loc: 0.038  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 17:10:49] d2.utils.events INFO:  eta: 2:29:47  iter: 3719  total_loss: 0.138  loss_cls: 0.032  loss_box_reg: 0.075  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8695  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 17:11:06] d2.utils.events INFO:  eta: 2:29:22  iter: 3739  total_loss: 0.141  loss_cls: 0.025  loss_box_reg: 0.066  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8693  data_time: 0.0138  lr: 0.005000  max_mem: 7087M
[07/29 17:11:22] d2.utils.events INFO:  eta: 2:28:52  iter: 3759  total_loss: 0.138  loss_cls: 0.024  loss_box_reg: 0.077  loss_rpn_cls: 0.003  loss_rpn_loc: 0.035  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8692  data_time: 0.0170  lr: 0.005000  max_mem: 7087M
[07/29 17:11:40] d2.utils.events INFO:  eta: 2:28:35  iter: 3779  total_loss: 0.140  loss_cls: 0.025  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.033  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8692  data_time: 0.0144  lr: 0.005000  max_mem: 7087M
[07/29 17:11:57] d2.utils.events INFO:  eta: 2:28:22  iter: 3799  total_loss: 0.146  loss_cls: 0.029  loss_box_reg: 0.072  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8692  data_time: 0.0173  lr: 0.005000  max_mem: 7087M
[07/29 17:12:14] d2.utils.events INFO:  eta: 2:27:51  iter: 3819  total_loss: 0.153  loss_cls: 0.032  loss_box_reg: 0.070  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 17:12:31] d2.utils.events INFO:  eta: 2:27:33  iter: 3839  total_loss: 0.148  loss_cls: 0.032  loss_box_reg: 0.078  loss_rpn_cls: 0.003  loss_rpn_loc: 0.035  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0156  lr: 0.005000  max_mem: 7087M
[07/29 17:12:49] d2.utils.events INFO:  eta: 2:27:13  iter: 3859  total_loss: 0.146  loss_cls: 0.030  loss_box_reg: 0.070  loss_rpn_cls: 0.003  loss_rpn_loc: 0.042  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0142  lr: 0.005000  max_mem: 7087M
[07/29 17:13:06] d2.utils.events INFO:  eta: 2:27:03  iter: 3879  total_loss: 0.154  loss_cls: 0.028  loss_box_reg: 0.075  loss_rpn_cls: 0.003  loss_rpn_loc: 0.042  validation_loss: 0.193  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0174  lr: 0.005000  max_mem: 7087M
[07/29 17:13:26] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:13:26] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:13:26] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:13:26] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:13:28] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1014 s / img. ETA=0:00:57
[07/29 17:13:33] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1001 s / img. ETA=0:00:51
[07/29 17:13:38] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1033 s / img. ETA=0:00:49
[07/29 17:13:43] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1033 s / img. ETA=0:00:44
[07/29 17:13:48] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1028 s / img. ETA=0:00:38
[07/29 17:13:53] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1033 s / img. ETA=0:00:33
[07/29 17:13:59] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1029 s / img. ETA=0:00:27
[07/29 17:14:04] d2.evaluation.evaluator INFO: Inference done 296/468. 0.1022 s / img. ETA=0:00:21
[07/29 17:14:09] d2.evaluation.evaluator INFO: Inference done 350/468. 0.1006 s / img. ETA=0:00:14
[07/29 17:14:14] d2.evaluation.evaluator INFO: Inference done 404/468. 0.0992 s / img. ETA=0:00:07
[07/29 17:14:19] d2.evaluation.evaluator INFO: Inference done 458/468. 0.0984 s / img. ETA=0:00:01
[07/29 17:14:20] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.416053 (0.113210 s / img per device, on 1 devices)
[07/29 17:14:20] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098248 s / img per device, on 1 devices)
[07/29 17:14:20] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:14:20] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:14:20] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:14:20] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.942 | 98.968 | 98.966 |  nan  | 92.583 | 95.812 |
[07/29 17:14:20] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:14:20] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:14:20] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:14:20] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:14:20] d2.evaluation.testing INFO: copypaste: 94.9416,98.9678,98.9660,nan,92.5827,95.8116
[07/29 17:14:23] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:14:28] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:14:33] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:14:38] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 17:14:43] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 17:14:48] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 17:14:53] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 17:14:58] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 17:15:03] detectron2 INFO: Loss on Validation  done 323/468. 0.0001 s / img. ETA=0:00:18
[07/29 17:15:08] detectron2 INFO: Loss on Validation  done 372/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:15:14] detectron2 INFO: Loss on Validation  done 420/468. 0.0001 s / img. ETA=0:00:05
[07/29 17:15:19] detectron2 INFO: Loss on Validation  done 468/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:15:19] detectron2 INFO: mean_loss=0.14792111576303246, best_loss=0.1466805888295102
[07/29 17:15:19] detectron2 INFO: could not find a better loss with mean_loss=0.14792111576303246 best_loss=0.1466805888295102 and failed count=1
[07/29 17:15:19] detectron2 INFO: saving model to: model_0003899.pth, saved_model_names=model_0002399.pth, model_0002699.pth, model_0002999.pth, model_0003299.pth, model_0003599.pth, model_0003899.pth
[07/29 17:15:19] detectron2 INFO: exeeded model save threshold - removing model_0002399.pth
[07/29 17:15:19] detectron2 INFO: saved_model_names=model_0002699.pth, model_0002999.pth, model_0003299.pth, model_0003599.pth, model_0003899.pth
[07/29 17:15:19] d2.utils.events INFO:  eta: 2:26:37  iter: 3899  total_loss: 0.133  loss_cls: 0.026  loss_box_reg: 0.068  loss_rpn_cls: 0.003  loss_rpn_loc: 0.032  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0170  lr: 0.005000  max_mem: 7087M
[07/29 17:15:36] d2.utils.events INFO:  eta: 2:26:21  iter: 3919  total_loss: 0.134  loss_cls: 0.023  loss_box_reg: 0.065  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0140  lr: 0.005000  max_mem: 7087M
[07/29 17:15:53] d2.utils.events INFO:  eta: 2:25:59  iter: 3939  total_loss: 0.135  loss_cls: 0.028  loss_box_reg: 0.067  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0164  lr: 0.005000  max_mem: 7087M
[07/29 17:16:11] d2.utils.events INFO:  eta: 2:25:41  iter: 3959  total_loss: 0.138  loss_cls: 0.027  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0132  lr: 0.005000  max_mem: 7087M
[07/29 17:16:28] d2.utils.events INFO:  eta: 2:25:23  iter: 3979  total_loss: 0.127  loss_cls: 0.026  loss_box_reg: 0.063  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 17:16:46] d2.utils.events INFO:  eta: 2:24:59  iter: 3999  total_loss: 0.120  loss_cls: 0.023  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 17:17:03] d2.utils.events INFO:  eta: 2:24:41  iter: 4019  total_loss: 0.128  loss_cls: 0.022  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0169  lr: 0.005000  max_mem: 7087M
[07/29 17:17:20] d2.utils.events INFO:  eta: 2:24:24  iter: 4039  total_loss: 0.133  loss_cls: 0.027  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0168  lr: 0.005000  max_mem: 7087M
[07/29 17:17:37] d2.utils.events INFO:  eta: 2:24:13  iter: 4059  total_loss: 0.138  loss_cls: 0.027  loss_box_reg: 0.069  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 17:17:55] d2.utils.events INFO:  eta: 2:23:53  iter: 4079  total_loss: 0.126  loss_cls: 0.025  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 17:18:13] d2.utils.events INFO:  eta: 2:23:42  iter: 4099  total_loss: 0.129  loss_cls: 0.021  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0142  lr: 0.005000  max_mem: 7087M
[07/29 17:18:31] d2.utils.events INFO:  eta: 2:23:29  iter: 4119  total_loss: 0.132  loss_cls: 0.021  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8692  data_time: 0.0168  lr: 0.005000  max_mem: 7087M
[07/29 17:18:48] d2.utils.events INFO:  eta: 2:23:13  iter: 4139  total_loss: 0.147  loss_cls: 0.029  loss_box_reg: 0.077  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0167  lr: 0.005000  max_mem: 7087M
[07/29 17:19:04] d2.utils.events INFO:  eta: 2:22:55  iter: 4159  total_loss: 0.137  loss_cls: 0.028  loss_box_reg: 0.068  loss_rpn_cls: 0.003  loss_rpn_loc: 0.033  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0150  lr: 0.005000  max_mem: 7087M
[07/29 17:19:22] d2.utils.events INFO:  eta: 2:22:40  iter: 4179  total_loss: 0.143  loss_cls: 0.025  loss_box_reg: 0.069  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.191  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0164  lr: 0.005000  max_mem: 7087M
[07/29 17:19:42] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:19:42] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:19:42] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:19:42] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:19:45] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1100 s / img. ETA=0:00:59
[07/29 17:19:50] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1016 s / img. ETA=0:00:51
[07/29 17:19:55] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1023 s / img. ETA=0:00:50
[07/29 17:20:00] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1017 s / img. ETA=0:00:44
[07/29 17:20:05] d2.evaluation.evaluator INFO: Inference done 167/468. 0.1026 s / img. ETA=0:00:39
[07/29 17:20:10] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1029 s / img. ETA=0:00:33
[07/29 17:20:16] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1031 s / img. ETA=0:00:28
[07/29 17:20:21] d2.evaluation.evaluator INFO: Inference done 292/468. 0.1018 s / img. ETA=0:00:22
[07/29 17:20:26] d2.evaluation.evaluator INFO: Inference done 346/468. 0.1002 s / img. ETA=0:00:14
[07/29 17:20:31] d2.evaluation.evaluator INFO: Inference done 400/468. 0.0989 s / img. ETA=0:00:07
[07/29 17:20:36] d2.evaluation.evaluator INFO: Inference done 454/468. 0.0980 s / img. ETA=0:00:01
[07/29 17:20:37] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.864373 (0.114178 s / img per device, on 1 devices)
[07/29 17:20:37] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097830 s / img per device, on 1 devices)
[07/29 17:20:37] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:20:37] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:20:37] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:20:38] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.409 | 98.964 | 98.963 |  nan  | 91.739 | 94.040 |
[07/29 17:20:38] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:20:38] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:20:38] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:20:38] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:20:38] d2.evaluation.testing INFO: copypaste: 93.4086,98.9637,98.9629,nan,91.7386,94.0399
[07/29 17:20:40] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 17:20:45] detectron2 INFO: Loss on Validation  done 48/468. 0.0001 s / img. ETA=0:00:56
[07/29 17:20:50] detectron2 INFO: Loss on Validation  done 84/468. 0.0001 s / img. ETA=0:00:52
[07/29 17:20:55] detectron2 INFO: Loss on Validation  done 123/468. 0.0001 s / img. ETA=0:00:46
[07/29 17:21:00] detectron2 INFO: Loss on Validation  done 161/468. 0.0001 s / img. ETA=0:00:41
[07/29 17:21:05] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:21:10] detectron2 INFO: Loss on Validation  done 236/468. 0.0001 s / img. ETA=0:00:31
[07/29 17:21:15] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 17:21:20] detectron2 INFO: Loss on Validation  done 320/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:21:25] detectron2 INFO: Loss on Validation  done 370/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:21:30] detectron2 INFO: Loss on Validation  done 419/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:21:35] detectron2 INFO: Loss on Validation  done 467/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:21:36] detectron2 INFO: mean_loss=0.14196365930424992, best_loss=0.1466805888295102
[07/29 17:21:36] detectron2 INFO: could not find a better loss with mean_loss=0.14196365930424992 best_loss=0.1466805888295102 and failed count=2
[07/29 17:21:36] detectron2 INFO: saving model to: model_0004199.pth, saved_model_names=model_0002699.pth, model_0002999.pth, model_0003299.pth, model_0003599.pth, model_0003899.pth, model_0004199.pth
[07/29 17:21:36] detectron2 INFO: exeeded model save threshold - removing model_0002699.pth
[07/29 17:21:36] detectron2 INFO: saved_model_names=model_0002999.pth, model_0003299.pth, model_0003599.pth, model_0003899.pth, model_0004199.pth
[07/29 17:21:36] d2.utils.events INFO:  eta: 2:22:24  iter: 4199  total_loss: 0.141  loss_cls: 0.026  loss_box_reg: 0.065  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 17:21:53] d2.utils.events INFO:  eta: 2:22:06  iter: 4219  total_loss: 0.117  loss_cls: 0.022  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0169  lr: 0.005000  max_mem: 7087M
[07/29 17:22:10] d2.utils.events INFO:  eta: 2:21:49  iter: 4239  total_loss: 0.105  loss_cls: 0.018  loss_box_reg: 0.051  loss_rpn_cls: 0.003  loss_rpn_loc: 0.031  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0158  lr: 0.005000  max_mem: 7087M
[07/29 17:22:28] d2.utils.events INFO:  eta: 2:21:36  iter: 4259  total_loss: 0.129  loss_cls: 0.023  loss_box_reg: 0.056  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0184  lr: 0.005000  max_mem: 7087M
[07/29 17:22:46] d2.utils.events INFO:  eta: 2:21:18  iter: 4279  total_loss: 0.143  loss_cls: 0.026  loss_box_reg: 0.074  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 17:23:03] d2.utils.events INFO:  eta: 2:20:54  iter: 4299  total_loss: 0.152  loss_cls: 0.027  loss_box_reg: 0.082  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0150  lr: 0.005000  max_mem: 7087M
[07/29 17:23:20] d2.utils.events INFO:  eta: 2:20:35  iter: 4319  total_loss: 0.139  loss_cls: 0.027  loss_box_reg: 0.063  loss_rpn_cls: 0.003  loss_rpn_loc: 0.040  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0164  lr: 0.005000  max_mem: 7087M
[07/29 17:23:37] d2.utils.events INFO:  eta: 2:20:18  iter: 4339  total_loss: 0.115  loss_cls: 0.023  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0166  lr: 0.005000  max_mem: 7087M
[07/29 17:23:55] d2.utils.events INFO:  eta: 2:20:00  iter: 4359  total_loss: 0.127  loss_cls: 0.023  loss_box_reg: 0.063  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0136  lr: 0.005000  max_mem: 7087M
[07/29 17:24:12] d2.utils.events INFO:  eta: 2:19:43  iter: 4379  total_loss: 0.149  loss_cls: 0.028  loss_box_reg: 0.066  loss_rpn_cls: 0.002  loss_rpn_loc: 0.040  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 17:24:29] d2.utils.events INFO:  eta: 2:19:26  iter: 4399  total_loss: 0.138  loss_cls: 0.025  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 17:24:47] d2.utils.events INFO:  eta: 2:19:13  iter: 4419  total_loss: 0.122  loss_cls: 0.023  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:25:04] d2.utils.events INFO:  eta: 2:18:55  iter: 4439  total_loss: 0.137  loss_cls: 0.024  loss_box_reg: 0.067  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0160  lr: 0.005000  max_mem: 7087M
[07/29 17:25:22] d2.utils.events INFO:  eta: 2:18:36  iter: 4459  total_loss: 0.123  loss_cls: 0.022  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8690  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:25:39] d2.utils.events INFO:  eta: 2:18:16  iter: 4479  total_loss: 0.145  loss_cls: 0.026  loss_box_reg: 0.076  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.186  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 17:25:58] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:25:58] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:25:58] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:25:58] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:26:00] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1079 s / img. ETA=0:00:57
[07/29 17:26:05] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1070 s / img. ETA=0:00:51
[07/29 17:26:10] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1064 s / img. ETA=0:00:50
[07/29 17:26:15] d2.evaluation.evaluator INFO: Inference done 126/468. 0.1052 s / img. ETA=0:00:44
[07/29 17:26:21] d2.evaluation.evaluator INFO: Inference done 166/468. 0.1047 s / img. ETA=0:00:39
[07/29 17:26:26] d2.evaluation.evaluator INFO: Inference done 204/468. 0.1045 s / img. ETA=0:00:34
[07/29 17:26:31] d2.evaluation.evaluator INFO: Inference done 244/468. 0.1045 s / img. ETA=0:00:29
[07/29 17:26:36] d2.evaluation.evaluator INFO: Inference done 288/468. 0.1040 s / img. ETA=0:00:23
[07/29 17:26:41] d2.evaluation.evaluator INFO: Inference done 342/468. 0.1019 s / img. ETA=0:00:15
[07/29 17:26:46] d2.evaluation.evaluator INFO: Inference done 396/468. 0.1004 s / img. ETA=0:00:08
[07/29 17:26:51] d2.evaluation.evaluator INFO: Inference done 450/468. 0.0994 s / img. ETA=0:00:02
[07/29 17:26:53] d2.evaluation.evaluator INFO: Total inference time: 0:00:53.064899 (0.114611 s / img per device, on 1 devices)
[07/29 17:26:53] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.099076 s / img per device, on 1 devices)
[07/29 17:26:53] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:26:53] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:26:53] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:26:53] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.007 | 98.931 | 98.931 |  nan  | 91.307 | 93.712 |
[07/29 17:26:53] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:26:53] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:26:53] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:26:53] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:26:53] d2.evaluation.testing INFO: copypaste: 93.0071,98.9311,98.9311,nan,91.3075,93.7119
[07/29 17:26:56] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:27:01] detectron2 INFO: Loss on Validation  done 48/468. 0.0001 s / img. ETA=0:00:55
[07/29 17:27:06] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:27:11] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:46
[07/29 17:27:16] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:41
[07/29 17:27:21] detectron2 INFO: Loss on Validation  done 200/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:27:26] detectron2 INFO: Loss on Validation  done 238/468. 0.0001 s / img. ETA=0:00:30
[07/29 17:27:31] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 17:27:36] detectron2 INFO: Loss on Validation  done 320/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:27:41] detectron2 INFO: Loss on Validation  done 369/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:27:47] detectron2 INFO: Loss on Validation  done 418/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:27:52] detectron2 INFO: Loss on Validation  done 466/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:27:52] detectron2 INFO: mean_loss=0.1391322108589738, best_loss=0.1466805888295102
[07/29 17:27:52] detectron2 INFO: saving model to: model_0004499.pth, saved_model_names=model_0002999.pth, model_0003299.pth, model_0003599.pth, model_0003899.pth, model_0004199.pth, model_0004499.pth
[07/29 17:27:52] detectron2 INFO: exeeded model save threshold - removing model_0002999.pth
[07/29 17:27:52] detectron2 INFO: saved_model_names=model_0003299.pth, model_0003599.pth, model_0003899.pth, model_0004199.pth, model_0004499.pth
[07/29 17:27:52] d2.utils.events INFO:  eta: 2:17:56  iter: 4499  total_loss: 0.128  loss_cls: 0.023  loss_box_reg: 0.065  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0174  lr: 0.005000  max_mem: 7087M
[07/29 17:28:09] d2.utils.events INFO:  eta: 2:17:33  iter: 4519  total_loss: 0.135  loss_cls: 0.023  loss_box_reg: 0.063  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0200  lr: 0.005000  max_mem: 7087M
[07/29 17:28:26] d2.utils.events INFO:  eta: 2:17:10  iter: 4539  total_loss: 0.139  loss_cls: 0.024  loss_box_reg: 0.072  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8687  data_time: 0.0242  lr: 0.005000  max_mem: 7087M
[07/29 17:28:44] d2.utils.events INFO:  eta: 2:16:53  iter: 4559  total_loss: 0.125  loss_cls: 0.024  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0182  lr: 0.005000  max_mem: 7087M
[07/29 17:29:01] d2.utils.events INFO:  eta: 2:16:36  iter: 4579  total_loss: 0.159  loss_cls: 0.031  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 17:29:18] d2.utils.events INFO:  eta: 2:16:18  iter: 4599  total_loss: 0.138  loss_cls: 0.026  loss_box_reg: 0.064  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0165  lr: 0.005000  max_mem: 7087M
[07/29 17:29:36] d2.utils.events INFO:  eta: 2:16:01  iter: 4619  total_loss: 0.148  loss_cls: 0.028  loss_box_reg: 0.057  loss_rpn_cls: 0.003  loss_rpn_loc: 0.042  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0158  lr: 0.005000  max_mem: 7087M
[07/29 17:29:54] d2.utils.events INFO:  eta: 2:15:43  iter: 4639  total_loss: 0.122  loss_cls: 0.021  loss_box_reg: 0.063  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0162  lr: 0.005000  max_mem: 7087M
[07/29 17:30:11] d2.utils.events INFO:  eta: 2:15:26  iter: 4659  total_loss: 0.132  loss_cls: 0.022  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 17:30:28] d2.utils.events INFO:  eta: 2:15:08  iter: 4679  total_loss: 0.141  loss_cls: 0.026  loss_box_reg: 0.077  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 17:30:46] d2.utils.events INFO:  eta: 2:14:50  iter: 4699  total_loss: 0.137  loss_cls: 0.023  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0166  lr: 0.005000  max_mem: 7087M
[07/29 17:31:03] d2.utils.events INFO:  eta: 2:14:34  iter: 4719  total_loss: 0.127  loss_cls: 0.026  loss_box_reg: 0.060  loss_rpn_cls: 0.003  loss_rpn_loc: 0.033  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0143  lr: 0.005000  max_mem: 7087M
[07/29 17:31:21] d2.utils.events INFO:  eta: 2:14:19  iter: 4739  total_loss: 0.140  loss_cls: 0.027  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0146  lr: 0.005000  max_mem: 7087M
[07/29 17:31:38] d2.utils.events INFO:  eta: 2:14:09  iter: 4759  total_loss: 0.140  loss_cls: 0.024  loss_box_reg: 0.069  loss_rpn_cls: 0.003  loss_rpn_loc: 0.033  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0126  lr: 0.005000  max_mem: 7087M
[07/29 17:31:55] d2.utils.events INFO:  eta: 2:13:51  iter: 4779  total_loss: 0.124  loss_cls: 0.024  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.181  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0154  lr: 0.005000  max_mem: 7087M
[07/29 17:32:14] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:32:14] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:32:14] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:32:15] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:32:17] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1027 s / img. ETA=0:00:48
[07/29 17:32:22] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1038 s / img. ETA=0:00:50
[07/29 17:32:27] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1049 s / img. ETA=0:00:47
[07/29 17:32:32] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1045 s / img. ETA=0:00:44
[07/29 17:32:37] d2.evaluation.evaluator INFO: Inference done 167/468. 0.1040 s / img. ETA=0:00:39
[07/29 17:32:42] d2.evaluation.evaluator INFO: Inference done 207/468. 0.1051 s / img. ETA=0:00:33
[07/29 17:32:47] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1051 s / img. ETA=0:00:28
[07/29 17:32:53] d2.evaluation.evaluator INFO: Inference done 292/468. 0.1045 s / img. ETA=0:00:22
[07/29 17:32:58] d2.evaluation.evaluator INFO: Inference done 346/468. 0.1024 s / img. ETA=0:00:14
[07/29 17:33:03] d2.evaluation.evaluator INFO: Inference done 400/468. 0.1008 s / img. ETA=0:00:07
[07/29 17:33:08] d2.evaluation.evaluator INFO: Inference done 454/468. 0.0997 s / img. ETA=0:00:01
[07/29 17:33:09] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.657881 (0.113732 s / img per device, on 1 devices)
[07/29 17:33:09] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099476 s / img per device, on 1 devices)
[07/29 17:33:09] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:33:09] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:33:09] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:33:10] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 92.839 | 98.899 | 98.899 |  nan  | 91.128 | 93.471 |
[07/29 17:33:10] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:33:10] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:33:10] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:33:10] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:33:10] d2.evaluation.testing INFO: copypaste: 92.8387,98.8992,98.8991,nan,91.1275,93.4709
[07/29 17:33:12] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:33:17] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:33:22] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:33:27] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 17:33:32] detectron2 INFO: Loss on Validation  done 161/468. 0.0001 s / img. ETA=0:00:41
[07/29 17:33:37] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:33:42] detectron2 INFO: Loss on Validation  done 237/468. 0.0001 s / img. ETA=0:00:31
[07/29 17:33:48] detectron2 INFO: Loss on Validation  done 275/468. 0.0001 s / img. ETA=0:00:25
[07/29 17:33:53] detectron2 INFO: Loss on Validation  done 321/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:33:58] detectron2 INFO: Loss on Validation  done 371/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:34:03] detectron2 INFO: Loss on Validation  done 419/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:34:08] detectron2 INFO: Loss on Validation  done 467/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:34:08] detectron2 INFO: mean_loss=0.13883173140969918, best_loss=0.1391322108589738
[07/29 17:34:08] detectron2 INFO: could not find a better loss with mean_loss=0.13883173140969918 best_loss=0.1391322108589738 and failed count=1
[07/29 17:34:08] detectron2 INFO: saving model to: model_0004799.pth, saved_model_names=model_0003299.pth, model_0003599.pth, model_0003899.pth, model_0004199.pth, model_0004499.pth, model_0004799.pth
[07/29 17:34:08] detectron2 INFO: exeeded model save threshold - removing model_0003299.pth
[07/29 17:34:08] detectron2 INFO: saved_model_names=model_0003599.pth, model_0003899.pth, model_0004199.pth, model_0004499.pth, model_0004799.pth
[07/29 17:34:08] d2.utils.events INFO:  eta: 2:13:33  iter: 4799  total_loss: 0.128  loss_cls: 0.024  loss_box_reg: 0.069  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 17:34:25] d2.utils.events INFO:  eta: 2:13:17  iter: 4819  total_loss: 0.125  loss_cls: 0.026  loss_box_reg: 0.063  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8687  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 17:34:42] d2.utils.events INFO:  eta: 2:12:55  iter: 4839  total_loss: 0.121  loss_cls: 0.020  loss_box_reg: 0.065  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8687  data_time: 0.0140  lr: 0.005000  max_mem: 7087M
[07/29 17:35:00] d2.utils.events INFO:  eta: 2:12:32  iter: 4859  total_loss: 0.132  loss_cls: 0.025  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8687  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 17:35:17] d2.utils.events INFO:  eta: 2:12:14  iter: 4879  total_loss: 0.132  loss_cls: 0.027  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 17:35:34] d2.utils.events INFO:  eta: 2:11:56  iter: 4899  total_loss: 0.122  loss_cls: 0.025  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0144  lr: 0.005000  max_mem: 7087M
[07/29 17:35:52] d2.utils.events INFO:  eta: 2:11:39  iter: 4919  total_loss: 0.137  loss_cls: 0.024  loss_box_reg: 0.062  loss_rpn_cls: 0.003  loss_rpn_loc: 0.042  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8687  data_time: 0.0148  lr: 0.005000  max_mem: 7087M
[07/29 17:36:09] d2.utils.events INFO:  eta: 2:11:22  iter: 4939  total_loss: 0.114  loss_cls: 0.021  loss_box_reg: 0.054  loss_rpn_cls: 0.003  loss_rpn_loc: 0.031  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 17:36:26] d2.utils.events INFO:  eta: 2:11:03  iter: 4959  total_loss: 0.112  loss_cls: 0.024  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:36:43] d2.utils.events INFO:  eta: 2:10:45  iter: 4979  total_loss: 0.125  loss_cls: 0.024  loss_box_reg: 0.070  loss_rpn_cls: 0.003  loss_rpn_loc: 0.037  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0169  lr: 0.005000  max_mem: 7087M
[07/29 17:37:00] d2.utils.events INFO:  eta: 2:10:26  iter: 4999  total_loss: 0.123  loss_cls: 0.021  loss_box_reg: 0.065  loss_rpn_cls: 0.003  loss_rpn_loc: 0.032  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0146  lr: 0.005000  max_mem: 7087M
[07/29 17:37:18] d2.utils.events INFO:  eta: 2:10:11  iter: 5019  total_loss: 0.121  loss_cls: 0.022  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0180  lr: 0.005000  max_mem: 7087M
[07/29 17:37:35] d2.utils.events INFO:  eta: 2:09:55  iter: 5039  total_loss: 0.121  loss_cls: 0.023  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:37:53] d2.utils.events INFO:  eta: 2:09:37  iter: 5059  total_loss: 0.114  loss_cls: 0.022  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 17:38:10] d2.utils.events INFO:  eta: 2:09:19  iter: 5079  total_loss: 0.127  loss_cls: 0.021  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.178  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0148  lr: 0.005000  max_mem: 7087M
[07/29 17:38:29] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:38:29] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:38:29] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:38:30] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:38:33] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1122 s / img. ETA=0:01:00
[07/29 17:38:38] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1029 s / img. ETA=0:00:50
[07/29 17:38:43] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1035 s / img. ETA=0:00:49
[07/29 17:38:48] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1030 s / img. ETA=0:00:44
[07/29 17:38:53] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1030 s / img. ETA=0:00:38
[07/29 17:38:58] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1036 s / img. ETA=0:00:33
[07/29 17:39:03] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1035 s / img. ETA=0:00:28
[07/29 17:39:08] d2.evaluation.evaluator INFO: Inference done 292/468. 0.1026 s / img. ETA=0:00:22
[07/29 17:39:13] d2.evaluation.evaluator INFO: Inference done 346/468. 0.1009 s / img. ETA=0:00:14
[07/29 17:39:18] d2.evaluation.evaluator INFO: Inference done 400/468. 0.0995 s / img. ETA=0:00:07
[07/29 17:39:23] d2.evaluation.evaluator INFO: Inference done 454/468. 0.0985 s / img. ETA=0:00:01
[07/29 17:39:25] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.816045 (0.114074 s / img per device, on 1 devices)
[07/29 17:39:25] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098336 s / img per device, on 1 devices)
[07/29 17:39:25] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:39:25] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:39:25] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:39:25] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.275 | 98.923 | 98.923 |  nan  | 91.070 | 94.445 |
[07/29 17:39:25] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:39:25] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:39:25] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:39:25] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:39:25] d2.evaluation.testing INFO: copypaste: 93.2752,98.9226,98.9226,nan,91.0697,94.4448
[07/29 17:39:28] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:53
[07/29 17:39:33] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:39:38] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:39:43] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 17:39:48] detectron2 INFO: Loss on Validation  done 163/468. 0.0001 s / img. ETA=0:00:40
[07/29 17:39:53] detectron2 INFO: Loss on Validation  done 200/468. 0.0001 s / img. ETA=0:00:35
[07/29 17:39:58] detectron2 INFO: Loss on Validation  done 238/468. 0.0001 s / img. ETA=0:00:30
[07/29 17:40:03] detectron2 INFO: Loss on Validation  done 276/468. 0.0001 s / img. ETA=0:00:25
[07/29 17:40:08] detectron2 INFO: Loss on Validation  done 322/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:40:13] detectron2 INFO: Loss on Validation  done 372/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:40:18] detectron2 INFO: Loss on Validation  done 420/468. 0.0001 s / img. ETA=0:00:05
[07/29 17:40:23] detectron2 INFO: Loss on Validation  done 468/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:40:24] detectron2 INFO: mean_loss=0.1673684855862346, best_loss=0.1391322108589738
[07/29 17:40:24] detectron2 INFO: could not find a better loss with mean_loss=0.1673684855862346 best_loss=0.1391322108589738 and failed count=2
[07/29 17:40:24] detectron2 INFO: saving model to: model_0005099.pth, saved_model_names=model_0003599.pth, model_0003899.pth, model_0004199.pth, model_0004499.pth, model_0004799.pth, model_0005099.pth
[07/29 17:40:24] detectron2 INFO: exeeded model save threshold - removing model_0003599.pth
[07/29 17:40:24] detectron2 INFO: saved_model_names=model_0003899.pth, model_0004199.pth, model_0004499.pth, model_0004799.pth, model_0005099.pth
[07/29 17:40:24] d2.utils.events INFO:  eta: 2:09:02  iter: 5099  total_loss: 0.141  loss_cls: 0.023  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0151  lr: 0.005000  max_mem: 7087M
[07/29 17:40:41] d2.utils.events INFO:  eta: 2:08:30  iter: 5119  total_loss: 0.136  loss_cls: 0.023  loss_box_reg: 0.065  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0144  lr: 0.005000  max_mem: 7087M
[07/29 17:40:58] d2.utils.events INFO:  eta: 2:08:14  iter: 5139  total_loss: 0.164  loss_cls: 0.025  loss_box_reg: 0.070  loss_rpn_cls: 0.002  loss_rpn_loc: 0.043  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8685  data_time: 0.0184  lr: 0.005000  max_mem: 7087M
[07/29 17:41:15] d2.utils.events INFO:  eta: 2:07:56  iter: 5159  total_loss: 0.144  loss_cls: 0.022  loss_box_reg: 0.069  loss_rpn_cls: 0.004  loss_rpn_loc: 0.039  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8684  data_time: 0.0176  lr: 0.005000  max_mem: 7087M
[07/29 17:41:32] d2.utils.events INFO:  eta: 2:07:34  iter: 5179  total_loss: 0.126  loss_cls: 0.021  loss_box_reg: 0.062  loss_rpn_cls: 0.003  loss_rpn_loc: 0.033  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0152  lr: 0.005000  max_mem: 7087M
[07/29 17:41:49] d2.utils.events INFO:  eta: 2:07:19  iter: 5199  total_loss: 0.111  loss_cls: 0.020  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0170  lr: 0.005000  max_mem: 7087M
[07/29 17:42:07] d2.utils.events INFO:  eta: 2:07:05  iter: 5219  total_loss: 0.137  loss_cls: 0.026  loss_box_reg: 0.073  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0183  lr: 0.005000  max_mem: 7087M
[07/29 17:42:24] d2.utils.events INFO:  eta: 2:06:46  iter: 5239  total_loss: 0.125  loss_cls: 0.026  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8682  data_time: 0.0148  lr: 0.005000  max_mem: 7087M
[07/29 17:42:41] d2.utils.events INFO:  eta: 2:06:28  iter: 5259  total_loss: 0.117  loss_cls: 0.023  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0169  lr: 0.005000  max_mem: 7087M
[07/29 17:42:59] d2.utils.events INFO:  eta: 2:06:11  iter: 5279  total_loss: 0.110  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0283  lr: 0.005000  max_mem: 7087M
[07/29 17:43:16] d2.utils.events INFO:  eta: 2:05:55  iter: 5299  total_loss: 0.140  loss_cls: 0.027  loss_box_reg: 0.063  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:43:33] d2.utils.events INFO:  eta: 2:05:38  iter: 5319  total_loss: 0.123  loss_cls: 0.024  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8683  data_time: 0.0190  lr: 0.005000  max_mem: 7087M
[07/29 17:43:50] d2.utils.events INFO:  eta: 2:05:17  iter: 5339  total_loss: 0.104  loss_cls: 0.022  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8682  data_time: 0.0153  lr: 0.005000  max_mem: 7087M
[07/29 17:44:07] d2.utils.events INFO:  eta: 2:04:57  iter: 5359  total_loss: 0.134  loss_cls: 0.026  loss_box_reg: 0.081  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8681  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 17:44:25] d2.utils.events INFO:  eta: 2:04:40  iter: 5379  total_loss: 0.125  loss_cls: 0.022  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.176  loss_failed_to_get_better_count: 0.000  time: 0.8681  data_time: 0.0165  lr: 0.005000  max_mem: 7087M
[07/29 17:44:43] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:44:43] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:44:43] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:44:43] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:44:46] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0993 s / img. ETA=0:01:13
[07/29 17:44:51] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1000 s / img. ETA=0:00:54
[07/29 17:44:56] d2.evaluation.evaluator INFO: Inference done 86/468. 0.1051 s / img. ETA=0:00:52
[07/29 17:45:01] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1044 s / img. ETA=0:00:45
[07/29 17:45:06] d2.evaluation.evaluator INFO: Inference done 167/468. 0.1041 s / img. ETA=0:00:39
[07/29 17:45:11] d2.evaluation.evaluator INFO: Inference done 207/468. 0.1043 s / img. ETA=0:00:34
[07/29 17:45:16] d2.evaluation.evaluator INFO: Inference done 246/468. 0.1042 s / img. ETA=0:00:29
[07/29 17:45:21] d2.evaluation.evaluator INFO: Inference done 291/468. 0.1033 s / img. ETA=0:00:22
[07/29 17:45:26] d2.evaluation.evaluator INFO: Inference done 345/468. 0.1016 s / img. ETA=0:00:15
[07/29 17:45:31] d2.evaluation.evaluator INFO: Inference done 399/468. 0.1001 s / img. ETA=0:00:08
[07/29 17:45:36] d2.evaluation.evaluator INFO: Inference done 453/468. 0.0991 s / img. ETA=0:00:01
[07/29 17:45:38] d2.evaluation.evaluator INFO: Total inference time: 0:00:53.291550 (0.115101 s / img per device, on 1 devices)
[07/29 17:45:38] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098923 s / img per device, on 1 devices)
[07/29 17:45:38] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:45:38] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:45:38] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:45:38] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.049 | 98.946 | 98.946 |  nan  | 92.462 | 96.156 |
[07/29 17:45:38] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:45:38] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:45:38] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:45:38] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:45:38] d2.evaluation.testing INFO: copypaste: 95.0489,98.9455,98.9455,nan,92.4622,96.1562
[07/29 17:45:41] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 17:45:46] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:45:51] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:45:56] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 17:46:01] detectron2 INFO: Loss on Validation  done 161/468. 0.0001 s / img. ETA=0:00:41
[07/29 17:46:06] detectron2 INFO: Loss on Validation  done 198/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:46:11] detectron2 INFO: Loss on Validation  done 235/468. 0.0001 s / img. ETA=0:00:31
[07/29 17:46:16] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 17:46:21] detectron2 INFO: Loss on Validation  done 320/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:46:26] detectron2 INFO: Loss on Validation  done 369/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:46:31] detectron2 INFO: Loss on Validation  done 418/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:46:36] detectron2 INFO: Loss on Validation  done 467/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:46:37] detectron2 INFO: mean_loss=0.13707834863576526, best_loss=0.1391322108589738
[07/29 17:46:37] detectron2 INFO: could not find a better loss with mean_loss=0.13707834863576526 best_loss=0.1391322108589738 and failed count=3
[07/29 17:46:37] detectron2 INFO: saving model to: model_0005399.pth, saved_model_names=model_0003899.pth, model_0004199.pth, model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth
[07/29 17:46:37] detectron2 INFO: exeeded model save threshold - removing model_0003899.pth
[07/29 17:46:37] detectron2 INFO: saved_model_names=model_0004199.pth, model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth
[07/29 17:46:37] d2.utils.events INFO:  eta: 2:04:22  iter: 5399  total_loss: 0.126  loss_cls: 0.022  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0189  lr: 0.005000  max_mem: 7087M
[07/29 17:46:54] d2.utils.events INFO:  eta: 2:04:03  iter: 5419  total_loss: 0.119  loss_cls: 0.023  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8679  data_time: 0.0161  lr: 0.005000  max_mem: 7087M
[07/29 17:47:12] d2.utils.events INFO:  eta: 2:03:47  iter: 5439  total_loss: 0.113  loss_cls: 0.021  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:47:29] d2.utils.events INFO:  eta: 2:03:29  iter: 5459  total_loss: 0.132  loss_cls: 0.027  loss_box_reg: 0.074  loss_rpn_cls: 0.003  loss_rpn_loc: 0.034  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 17:47:46] d2.utils.events INFO:  eta: 2:03:11  iter: 5479  total_loss: 0.139  loss_cls: 0.025  loss_box_reg: 0.071  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8679  data_time: 0.0173  lr: 0.005000  max_mem: 7087M
[07/29 17:48:04] d2.utils.events INFO:  eta: 2:03:00  iter: 5499  total_loss: 0.122  loss_cls: 0.020  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0147  lr: 0.005000  max_mem: 7087M
[07/29 17:48:21] d2.utils.events INFO:  eta: 2:02:43  iter: 5519  total_loss: 0.115  loss_cls: 0.022  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0157  lr: 0.005000  max_mem: 7087M
[07/29 17:48:38] d2.utils.events INFO:  eta: 2:02:31  iter: 5539  total_loss: 0.109  loss_cls: 0.020  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0135  lr: 0.005000  max_mem: 7087M
[07/29 17:48:56] d2.utils.events INFO:  eta: 2:02:11  iter: 5559  total_loss: 0.150  loss_cls: 0.025  loss_box_reg: 0.071  loss_rpn_cls: 0.002  loss_rpn_loc: 0.050  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0161  lr: 0.005000  max_mem: 7087M
[07/29 17:49:14] d2.utils.events INFO:  eta: 2:01:59  iter: 5579  total_loss: 0.137  loss_cls: 0.022  loss_box_reg: 0.057  loss_rpn_cls: 0.004  loss_rpn_loc: 0.036  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8681  data_time: 0.0166  lr: 0.005000  max_mem: 7087M
[07/29 17:49:32] d2.utils.events INFO:  eta: 2:01:48  iter: 5599  total_loss: 0.120  loss_cls: 0.024  loss_box_reg: 0.058  loss_rpn_cls: 0.003  loss_rpn_loc: 0.030  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0175  lr: 0.005000  max_mem: 7087M
[07/29 17:49:49] d2.utils.events INFO:  eta: 2:01:31  iter: 5619  total_loss: 0.111  loss_cls: 0.023  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 17:50:06] d2.utils.events INFO:  eta: 2:01:13  iter: 5639  total_loss: 0.109  loss_cls: 0.022  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:50:24] d2.utils.events INFO:  eta: 2:00:58  iter: 5659  total_loss: 0.125  loss_cls: 0.023  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0159  lr: 0.005000  max_mem: 7087M
[07/29 17:50:41] d2.utils.events INFO:  eta: 2:00:44  iter: 5679  total_loss: 0.116  loss_cls: 0.023  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.172  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0203  lr: 0.005000  max_mem: 7087M
[07/29 17:51:01] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:51:01] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:51:01] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:51:01] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:51:03] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1108 s / img. ETA=0:01:10
[07/29 17:51:08] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1061 s / img. ETA=0:00:55
[07/29 17:51:13] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1070 s / img. ETA=0:00:50
[07/29 17:51:19] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1059 s / img. ETA=0:00:44
[07/29 17:51:24] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1067 s / img. ETA=0:00:38
[07/29 17:51:29] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1065 s / img. ETA=0:00:33
[07/29 17:51:34] d2.evaluation.evaluator INFO: Inference done 248/468. 0.1059 s / img. ETA=0:00:28
[07/29 17:51:39] d2.evaluation.evaluator INFO: Inference done 293/468. 0.1046 s / img. ETA=0:00:22
[07/29 17:51:44] d2.evaluation.evaluator INFO: Inference done 347/468. 0.1025 s / img. ETA=0:00:14
[07/29 17:51:49] d2.evaluation.evaluator INFO: Inference done 401/468. 0.1009 s / img. ETA=0:00:07
[07/29 17:51:54] d2.evaluation.evaluator INFO: Inference done 455/468. 0.0998 s / img. ETA=0:00:01
[07/29 17:51:55] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.986430 (0.114442 s / img per device, on 1 devices)
[07/29 17:51:55] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099573 s / img per device, on 1 devices)
[07/29 17:51:55] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:51:55] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:51:55] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:51:56] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.765 | 98.958 | 98.958 |  nan  | 91.947 | 95.887 |
[07/29 17:51:56] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:51:56] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:51:56] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:51:56] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:51:56] d2.evaluation.testing INFO: copypaste: 94.7648,98.9582,98.9582,nan,91.9470,95.8873
[07/29 17:51:58] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:52:03] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:52:08] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 17:52:13] detectron2 INFO: Loss on Validation  done 123/468. 0.0001 s / img. ETA=0:00:46
[07/29 17:52:18] detectron2 INFO: Loss on Validation  done 161/468. 0.0001 s / img. ETA=0:00:41
[07/29 17:52:23] detectron2 INFO: Loss on Validation  done 198/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:52:28] detectron2 INFO: Loss on Validation  done 236/468. 0.0001 s / img. ETA=0:00:31
[07/29 17:52:33] detectron2 INFO: Loss on Validation  done 273/468. 0.0001 s / img. ETA=0:00:26
[07/29 17:52:39] detectron2 INFO: Loss on Validation  done 319/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:52:44] detectron2 INFO: Loss on Validation  done 368/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:52:49] detectron2 INFO: Loss on Validation  done 417/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:52:54] detectron2 INFO: Loss on Validation  done 465/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:52:54] detectron2 INFO: mean_loss=0.13626214306693646, best_loss=0.1391322108589738
[07/29 17:52:54] detectron2 INFO: could not find a better loss with mean_loss=0.13626214306693646 best_loss=0.1391322108589738 and failed count=4
[07/29 17:52:54] detectron2 INFO: saving model to: model_0005699.pth, saved_model_names=model_0004199.pth, model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth
[07/29 17:52:54] detectron2 INFO: exeeded model save threshold - removing model_0004199.pth
[07/29 17:52:54] detectron2 INFO: saved_model_names=model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth
[07/29 17:52:54] d2.utils.events INFO:  eta: 2:00:27  iter: 5699  total_loss: 0.113  loss_cls: 0.024  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0156  lr: 0.005000  max_mem: 7087M
[07/29 17:53:11] d2.utils.events INFO:  eta: 2:00:06  iter: 5719  total_loss: 0.121  loss_cls: 0.020  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0149  lr: 0.005000  max_mem: 7087M
[07/29 17:53:28] d2.utils.events INFO:  eta: 1:59:49  iter: 5739  total_loss: 0.127  loss_cls: 0.022  loss_box_reg: 0.067  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0164  lr: 0.005000  max_mem: 7087M
[07/29 17:53:45] d2.utils.events INFO:  eta: 1:59:27  iter: 5759  total_loss: 0.132  loss_cls: 0.026  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0130  lr: 0.005000  max_mem: 7087M
[07/29 17:54:02] d2.utils.events INFO:  eta: 1:59:05  iter: 5779  total_loss: 0.125  loss_cls: 0.021  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0136  lr: 0.005000  max_mem: 7087M
[07/29 17:54:20] d2.utils.events INFO:  eta: 1:58:49  iter: 5799  total_loss: 0.143  loss_cls: 0.021  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0179  lr: 0.005000  max_mem: 7087M
[07/29 17:54:37] d2.utils.events INFO:  eta: 1:58:32  iter: 5819  total_loss: 0.137  loss_cls: 0.025  loss_box_reg: 0.069  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0137  lr: 0.005000  max_mem: 7087M
[07/29 17:54:54] d2.utils.events INFO:  eta: 1:58:18  iter: 5839  total_loss: 0.152  loss_cls: 0.030  loss_box_reg: 0.075  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0182  lr: 0.005000  max_mem: 7087M
[07/29 17:55:11] d2.utils.events INFO:  eta: 1:58:01  iter: 5859  total_loss: 0.164  loss_cls: 0.035  loss_box_reg: 0.071  loss_rpn_cls: 0.002  loss_rpn_loc: 0.041  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0171  lr: 0.005000  max_mem: 7087M
[07/29 17:55:29] d2.utils.events INFO:  eta: 1:57:43  iter: 5879  total_loss: 0.145  loss_cls: 0.027  loss_box_reg: 0.074  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0178  lr: 0.005000  max_mem: 7087M
[07/29 17:55:46] d2.utils.events INFO:  eta: 1:57:26  iter: 5899  total_loss: 0.123  loss_cls: 0.024  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0155  lr: 0.005000  max_mem: 7087M
[07/29 17:56:04] d2.utils.events INFO:  eta: 1:57:08  iter: 5919  total_loss: 0.137  loss_cls: 0.027  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0141  lr: 0.005000  max_mem: 7087M
[07/29 17:56:21] d2.utils.events INFO:  eta: 1:56:55  iter: 5939  total_loss: 0.134  loss_cls: 0.024  loss_box_reg: 0.074  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0156  lr: 0.005000  max_mem: 7087M
[07/29 17:56:38] d2.utils.events INFO:  eta: 1:56:41  iter: 5959  total_loss: 0.132  loss_cls: 0.022  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0150  lr: 0.005000  max_mem: 7087M
[07/29 17:56:55] d2.utils.events INFO:  eta: 1:56:22  iter: 5979  total_loss: 0.129  loss_cls: 0.029  loss_box_reg: 0.076  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.167  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0146  lr: 0.005000  max_mem: 7087M
[07/29 17:57:15] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 17:57:15] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 17:57:15] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 17:57:15] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 17:57:17] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1027 s / img. ETA=0:00:48
[07/29 17:57:22] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1038 s / img. ETA=0:00:50
[07/29 17:57:27] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1033 s / img. ETA=0:00:47
[07/29 17:57:32] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1037 s / img. ETA=0:00:43
[07/29 17:57:37] d2.evaluation.evaluator INFO: Inference done 168/468. 0.1034 s / img. ETA=0:00:38
[07/29 17:57:42] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1038 s / img. ETA=0:00:33
[07/29 17:57:47] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1036 s / img. ETA=0:00:28
[07/29 17:57:52] d2.evaluation.evaluator INFO: Inference done 292/468. 0.1030 s / img. ETA=0:00:22
[07/29 17:57:57] d2.evaluation.evaluator INFO: Inference done 346/468. 0.1012 s / img. ETA=0:00:14
[07/29 17:58:02] d2.evaluation.evaluator INFO: Inference done 400/468. 0.0998 s / img. ETA=0:00:07
[07/29 17:58:08] d2.evaluation.evaluator INFO: Inference done 454/468. 0.0988 s / img. ETA=0:00:01
[07/29 17:58:09] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.543671 (0.113485 s / img per device, on 1 devices)
[07/29 17:58:09] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098624 s / img per device, on 1 devices)
[07/29 17:58:09] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 17:58:09] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 17:58:09] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 17:58:09] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 92.788 | 98.956 | 98.956 |  nan  | 90.765 | 93.525 |
[07/29 17:58:09] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 17:58:09] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 17:58:09] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 17:58:09] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 17:58:09] d2.evaluation.testing INFO: copypaste: 92.7883,98.9560,98.9559,nan,90.7653,93.5253
[07/29 17:58:12] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:48
[07/29 17:58:17] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 17:58:22] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 17:58:27] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 17:58:32] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 17:58:37] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 17:58:42] detectron2 INFO: Loss on Validation  done 237/468. 0.0001 s / img. ETA=0:00:31
[07/29 17:58:47] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 17:58:52] detectron2 INFO: Loss on Validation  done 320/468. 0.0001 s / img. ETA=0:00:19
[07/29 17:58:57] detectron2 INFO: Loss on Validation  done 369/468. 0.0001 s / img. ETA=0:00:12
[07/29 17:59:02] detectron2 INFO: Loss on Validation  done 418/468. 0.0001 s / img. ETA=0:00:06
[07/29 17:59:07] detectron2 INFO: Loss on Validation  done 467/468. 0.0001 s / img. ETA=0:00:00
[07/29 17:59:08] detectron2 INFO: mean_loss=0.13825539962051564, best_loss=0.1391322108589738
[07/29 17:59:08] detectron2 INFO: could not find a better loss with mean_loss=0.13825539962051564 best_loss=0.1391322108589738 and failed count=5
[07/29 17:59:08] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 131, in train
    self.after_step()
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 152, in after_step
    h.after_step()
  File "<ipython-input-32-122b9b1e5911>", line 145, in after_step
    raise Exception("Could not compute a better loss - training stopped as a result")
Exception: Could not compute a better loss - training stopped as a result
[07/29 17:59:08] d2.engine.hooks INFO: Overall training speed: 5997 iterations in 1:26:45 (0.8680 s / it)
[07/29 17:59:08] d2.engine.hooks INFO: Total training time: 2:05:43 (0:38:57 on hooks)
[07/29 18:00:53] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:00:53] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:00:53] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:00:53] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:00:53] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:00:53] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:00:53] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:00:54] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:00:54] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:00:54] detectron2 INFO: found existing models
[07/29 18:00:54] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626
[07/29 18:00:54] detectron2 INFO: best_loss=0.1391322108589738
[07/29 18:00:54] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 18:00:54] detectron2 INFO: saved_model_names=model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:01:11] d2.engine.train_loop INFO: Starting training from iteration 4500
[07/29 18:01:30] d2.utils.events INFO:  eta: 2:22:25  iter: 4519  total_loss: 0.095  loss_cls: 0.020  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8886  data_time: 0.0650  lr: 0.005000  max_mem: 7788M
[07/29 18:01:33] d2.engine.hooks INFO: Overall training speed: 21 iterations in 0:00:19 (0.9160 s / it)
[07/29 18:01:33] d2.engine.hooks INFO: Total training time: 0:00:19 (0:00:00 on hooks)
[07/29 18:02:22] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:02:22] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:02:22] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:02:22] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:02:22] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:02:22] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:02:22] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:02:22] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:02:22] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:02:22] detectron2 INFO: found existing models
[07/29 18:02:22] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626
[07/29 18:02:22] detectron2 INFO: best_loss=0.1391322108589738
[07/29 18:02:22] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 18:02:22] detectron2 INFO: saved_model_names=model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:02:55] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:02:55] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:02:55] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:02:55] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:02:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:02:55] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:02:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:02:55] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:02:55] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:02:55] detectron2 INFO: found existing models
[07/29 18:02:55] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626
[07/29 18:02:55] detectron2 INFO: best_loss=0.1391322108589738
[07/29 18:02:55] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 18:02:55] detectron2 INFO: saved_model_names=model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:03:31] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:03:31] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:03:31] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:03:31] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:03:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:03:31] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:03:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:03:31] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:03:31] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:03:31] detectron2 INFO: found existing models
[07/29 18:03:31] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626
[07/29 18:03:31] detectron2 INFO: best_loss=0.1391322108589738
[07/29 18:03:31] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 18:03:31] detectron2 INFO: saved_model_names=model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:03:35] d2.engine.train_loop INFO: Starting training from iteration 6000
[07/29 18:03:53] d2.utils.events INFO:  eta: 1:57:56  iter: 6019  total_loss: 0.127  loss_cls: 0.023  loss_box_reg: 0.064  loss_rpn_cls: 0.003  loss_rpn_loc: 0.029  time: 0.8732  data_time: 0.0715  lr: 0.005000  max_mem: 8021M
[07/29 18:04:11] d2.utils.events INFO:  eta: 1:56:09  iter: 6039  total_loss: 0.112  loss_cls: 0.021  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8701  data_time: 0.0154  lr: 0.005000  max_mem: 8021M
[07/29 18:04:28] d2.utils.events INFO:  eta: 1:55:36  iter: 6059  total_loss: 0.119  loss_cls: 0.023  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  time: 0.8684  data_time: 0.0156  lr: 0.005000  max_mem: 8021M
[07/29 18:04:45] d2.utils.events INFO:  eta: 1:55:28  iter: 6079  total_loss: 0.122  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  time: 0.8698  data_time: 0.0144  lr: 0.005000  max_mem: 8021M
[07/29 18:05:03] d2.utils.events INFO:  eta: 1:55:56  iter: 6099  total_loss: 0.121  loss_cls: 0.023  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  time: 0.8733  data_time: 0.0135  lr: 0.005000  max_mem: 8021M
[07/29 18:05:21] d2.utils.events INFO:  eta: 1:55:39  iter: 6119  total_loss: 0.119  loss_cls: 0.025  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8734  data_time: 0.0168  lr: 0.005000  max_mem: 8021M
[07/29 18:05:38] d2.utils.events INFO:  eta: 1:54:51  iter: 6139  total_loss: 0.123  loss_cls: 0.024  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  time: 0.8720  data_time: 0.0136  lr: 0.005000  max_mem: 8021M
[07/29 18:05:55] d2.utils.events INFO:  eta: 1:54:18  iter: 6159  total_loss: 0.116  loss_cls: 0.021  loss_box_reg: 0.059  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  time: 0.8707  data_time: 0.0159  lr: 0.005000  max_mem: 8021M
[07/29 18:06:13] d2.utils.events INFO:  eta: 1:54:01  iter: 6179  total_loss: 0.111  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  time: 0.8718  data_time: 0.0160  lr: 0.005000  max_mem: 8021M
[07/29 18:06:30] d2.utils.events INFO:  eta: 1:53:33  iter: 6199  total_loss: 0.110  loss_cls: 0.021  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  time: 0.8706  data_time: 0.0180  lr: 0.005000  max_mem: 8021M
[07/29 18:06:47] d2.utils.events INFO:  eta: 1:53:16  iter: 6219  total_loss: 0.121  loss_cls: 0.023  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8696  data_time: 0.0151  lr: 0.005000  max_mem: 8021M
[07/29 18:07:05] d2.utils.events INFO:  eta: 1:52:57  iter: 6239  total_loss: 0.116  loss_cls: 0.023  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  time: 0.8693  data_time: 0.0174  lr: 0.005000  max_mem: 8021M
[07/29 18:07:22] d2.utils.events INFO:  eta: 1:52:38  iter: 6259  total_loss: 0.137  loss_cls: 0.024  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  time: 0.8693  data_time: 0.0148  lr: 0.005000  max_mem: 8021M
[07/29 18:07:40] d2.utils.events INFO:  eta: 1:52:19  iter: 6279  total_loss: 0.119  loss_cls: 0.019  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  time: 0.8701  data_time: 0.0165  lr: 0.005000  max_mem: 8021M
[07/29 18:07:58] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:07:58] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 18:07:58] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 18:07:58] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 18:08:01] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1047 s / img. ETA=0:00:57
[07/29 18:08:06] d2.evaluation.evaluator INFO: Inference done 54/468. 0.1034 s / img. ETA=0:00:49
[07/29 18:08:11] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1037 s / img. ETA=0:00:48
[07/29 18:08:16] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1024 s / img. ETA=0:00:43
[07/29 18:08:21] d2.evaluation.evaluator INFO: Inference done 171/468. 0.1033 s / img. ETA=0:00:37
[07/29 18:08:26] d2.evaluation.evaluator INFO: Inference done 211/468. 0.1032 s / img. ETA=0:00:32
[07/29 18:08:31] d2.evaluation.evaluator INFO: Inference done 252/468. 0.1031 s / img. ETA=0:00:27
[07/29 18:08:36] d2.evaluation.evaluator INFO: Inference done 298/468. 0.1022 s / img. ETA=0:00:20
[07/29 18:08:41] d2.evaluation.evaluator INFO: Inference done 352/468. 0.1004 s / img. ETA=0:00:13
[07/29 18:08:46] d2.evaluation.evaluator INFO: Inference done 406/468. 0.0992 s / img. ETA=0:00:07
[07/29 18:08:51] d2.evaluation.evaluator INFO: Inference done 460/468. 0.0982 s / img. ETA=0:00:00
[07/29 18:08:52] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.094841 (0.112516 s / img per device, on 1 devices)
[07/29 18:08:52] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098142 s / img per device, on 1 devices)
[07/29 18:08:52] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 18:08:52] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 18:08:52] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 18:08:53] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.825 | 98.936 | 98.936 |  nan  | 92.080 | 95.983 |
[07/29 18:08:53] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 18:08:53] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 18:08:53] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 18:08:53] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 18:08:53] d2.evaluation.testing INFO: copypaste: 94.8250,98.9359,98.9358,nan,92.0796,95.9827
[07/29 18:08:55] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 18:09:00] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 18:09:05] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 18:09:10] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 18:09:15] detectron2 INFO: Loss on Validation  done 163/468. 0.0001 s / img. ETA=0:00:40
[07/29 18:09:20] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 18:09:26] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 18:09:31] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 18:09:36] detectron2 INFO: Loss on Validation  done 324/468. 0.0001 s / img. ETA=0:00:18
[07/29 18:09:41] detectron2 INFO: Loss on Validation  done 374/468. 0.0001 s / img. ETA=0:00:11
[07/29 18:09:46] detectron2 INFO: Loss on Validation  done 423/468. 0.0001 s / img. ETA=0:00:05
[07/29 18:09:51] detectron2 INFO: mean_loss=0.13216656002517777, best_loss=0.1391322108589738
[07/29 18:09:51] detectron2 INFO: saving model to: model_0006299.pth, saved_model_names=model_0004499.pth, model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth
[07/29 18:09:51] detectron2 INFO: exeeded model save threshold - removing model_0004499.pth
[07/29 18:09:51] detectron2 INFO: saved_model_names=model_0004799.pth, model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth
[07/29 18:09:51] detectron2 INFO: exeeded model save threshold - removing model_0004799.pth
[07/29 18:09:51] detectron2 INFO: saved_model_names=model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth
[07/29 18:09:51] d2.utils.events INFO:  eta: 1:51:35  iter: 6299  total_loss: 0.136  loss_cls: 0.024  loss_box_reg: 0.074  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8677  data_time: 0.0133  lr: 0.005000  max_mem: 8021M
[07/29 18:10:08] d2.utils.events INFO:  eta: 1:51:14  iter: 6319  total_loss: 0.116  loss_cls: 0.021  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8670  data_time: 0.0177  lr: 0.005000  max_mem: 8021M
[07/29 18:10:25] d2.utils.events INFO:  eta: 1:51:01  iter: 6339  total_loss: 0.112  loss_cls: 0.022  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8675  data_time: 0.0140  lr: 0.005000  max_mem: 8021M
[07/29 18:10:43] d2.utils.events INFO:  eta: 1:50:34  iter: 6359  total_loss: 0.110  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8668  data_time: 0.0136  lr: 0.005000  max_mem: 8021M
[07/29 18:11:00] d2.utils.events INFO:  eta: 1:50:17  iter: 6379  total_loss: 0.105  loss_cls: 0.020  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8675  data_time: 0.0137  lr: 0.005000  max_mem: 8021M
[07/29 18:11:17] d2.utils.events INFO:  eta: 1:49:57  iter: 6399  total_loss: 0.115  loss_cls: 0.024  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8670  data_time: 0.0172  lr: 0.005000  max_mem: 8021M
[07/29 18:11:35] d2.utils.events INFO:  eta: 1:49:39  iter: 6419  total_loss: 0.108  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8666  data_time: 0.0156  lr: 0.005000  max_mem: 8021M
[07/29 18:11:52] d2.utils.events INFO:  eta: 1:49:30  iter: 6439  total_loss: 0.115  loss_cls: 0.019  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8673  data_time: 0.0147  lr: 0.005000  max_mem: 8021M
[07/29 18:12:10] d2.utils.events INFO:  eta: 1:49:19  iter: 6459  total_loss: 0.121  loss_cls: 0.021  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8675  data_time: 0.0157  lr: 0.005000  max_mem: 8021M
[07/29 18:12:27] d2.utils.events INFO:  eta: 1:48:47  iter: 6479  total_loss: 0.124  loss_cls: 0.023  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8666  data_time: 0.0165  lr: 0.005000  max_mem: 8021M
[07/29 18:12:44] d2.utils.events INFO:  eta: 1:48:27  iter: 6499  total_loss: 0.116  loss_cls: 0.019  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8659  data_time: 0.0167  lr: 0.005000  max_mem: 8021M
[07/29 18:13:01] d2.utils.events INFO:  eta: 1:48:00  iter: 6519  total_loss: 0.122  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8654  data_time: 0.0138  lr: 0.005000  max_mem: 8021M
[07/29 18:13:18] d2.utils.events INFO:  eta: 1:47:53  iter: 6539  total_loss: 0.121  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8654  data_time: 0.0145  lr: 0.005000  max_mem: 8021M
[07/29 18:13:35] d2.utils.events INFO:  eta: 1:47:31  iter: 6559  total_loss: 0.112  loss_cls: 0.020  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8653  data_time: 0.0138  lr: 0.005000  max_mem: 8021M
[07/29 18:13:52] d2.utils.events INFO:  eta: 1:47:06  iter: 6579  total_loss: 0.109  loss_cls: 0.024  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8649  data_time: 0.0150  lr: 0.005000  max_mem: 8021M
[07/29 18:14:12] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:14:12] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 18:14:12] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 18:14:12] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 18:14:14] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1157 s / img. ETA=0:01:03
[07/29 18:14:19] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1058 s / img. ETA=0:00:51
[07/29 18:14:24] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1044 s / img. ETA=0:00:49
[07/29 18:14:30] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1034 s / img. ETA=0:00:43
[07/29 18:14:35] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1041 s / img. ETA=0:00:37
[07/29 18:14:40] d2.evaluation.evaluator INFO: Inference done 212/468. 0.1041 s / img. ETA=0:00:32
[07/29 18:14:45] d2.evaluation.evaluator INFO: Inference done 252/468. 0.1034 s / img. ETA=0:00:27
[07/29 18:14:50] d2.evaluation.evaluator INFO: Inference done 298/468. 0.1023 s / img. ETA=0:00:21
[07/29 18:14:55] d2.evaluation.evaluator INFO: Inference done 352/468. 0.1006 s / img. ETA=0:00:13
[07/29 18:15:00] d2.evaluation.evaluator INFO: Inference done 406/468. 0.0994 s / img. ETA=0:00:07
[07/29 18:15:05] d2.evaluation.evaluator INFO: Inference done 460/468. 0.0984 s / img. ETA=0:00:00
[07/29 18:15:06] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.348411 (0.113064 s / img per device, on 1 devices)
[07/29 18:15:06] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098332 s / img per device, on 1 devices)
[07/29 18:15:06] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 18:15:06] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 18:15:06] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 18:15:06] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 92.009 | 98.981 | 98.979 |  nan  | 90.248 | 92.737 |
[07/29 18:15:06] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 18:15:06] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 18:15:06] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 18:15:06] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 18:15:06] d2.evaluation.testing INFO: copypaste: 92.0087,98.9808,98.9792,nan,90.2480,92.7368
[07/29 18:15:09] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 18:15:14] detectron2 INFO: Loss on Validation  done 48/468. 0.0001 s / img. ETA=0:00:55
[07/29 18:15:19] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 18:15:24] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 18:15:29] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 18:15:34] detectron2 INFO: Loss on Validation  done 200/468. 0.0001 s / img. ETA=0:00:35
[07/29 18:15:39] detectron2 INFO: Loss on Validation  done 238/468. 0.0001 s / img. ETA=0:00:30
[07/29 18:15:44] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 18:15:49] detectron2 INFO: Loss on Validation  done 324/468. 0.0001 s / img. ETA=0:00:18
[07/29 18:15:54] detectron2 INFO: Loss on Validation  done 374/468. 0.0001 s / img. ETA=0:00:11
[07/29 18:15:59] detectron2 INFO: Loss on Validation  done 422/468. 0.0001 s / img. ETA=0:00:05
[07/29 18:16:04] detectron2 INFO: mean_loss=0.14339648526943244, best_loss=0.13216656002517777
[07/29 18:16:04] detectron2 INFO: could not find a better loss with mean_loss=0.14339648526943244 best_loss=0.13216656002517777 and failed count=0
[07/29 18:16:04] detectron2 INFO: saving model to: model_0006599.pth, saved_model_names=model_0005099.pth, model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth, model_0006599.pth
[07/29 18:16:04] detectron2 INFO: exeeded model save threshold - removing model_0005099.pth
[07/29 18:16:04] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth, model_0006599.pth
[07/29 18:16:04] d2.utils.events INFO:  eta: 1:46:51  iter: 6599  total_loss: 0.123  loss_cls: 0.024  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.138  loss_failed_to_get_better_count: 0.000  time: 0.8649  data_time: 0.0156  lr: 0.005000  max_mem: 8021M
[07/29 18:16:21] d2.utils.events INFO:  eta: 1:46:33  iter: 6619  total_loss: 0.133  loss_cls: 0.023  loss_box_reg: 0.067  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.138  loss_failed_to_get_better_count: 0.000  time: 0.8639  data_time: 0.0127  lr: 0.005000  max_mem: 8021M
[07/29 18:16:38] d2.utils.events INFO:  eta: 1:46:14  iter: 6639  total_loss: 0.117  loss_cls: 0.021  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.138  loss_failed_to_get_better_count: 0.000  time: 0.8637  data_time: 0.0150  lr: 0.005000  max_mem: 8021M
[07/29 18:16:56] d2.utils.events INFO:  eta: 1:45:59  iter: 6659  total_loss: 0.115  loss_cls: 0.018  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.138  loss_failed_to_get_better_count: 0.000  time: 0.8641  data_time: 0.0133  lr: 0.005000  max_mem: 8021M
[07/29 18:17:13] d2.utils.events INFO:  eta: 1:45:47  iter: 6679  total_loss: 0.121  loss_cls: 0.024  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.138  loss_failed_to_get_better_count: 0.000  time: 0.8639  data_time: 0.0165  lr: 0.005000  max_mem: 8021M
[07/29 18:17:20] d2.engine.hooks INFO: Overall training speed: 686 iterations in 0:09:53 (0.8647 s / it)
[07/29 18:17:20] d2.engine.hooks INFO: Total training time: 0:13:42 (0:03:49 on hooks)
[07/29 18:24:45] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:24:45] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:24:45] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:24:45] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:24:45] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:24:45] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:24:45] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:24:45] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:24:45] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:24:45] detectron2 INFO: found existing models
[07/29 18:24:45] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:24:45] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:24:45] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:24:45] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:30:44] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:30:44] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:30:44] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:30:44] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:30:44] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:30:44] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:30:44] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:30:44] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:30:44] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:30:44] detectron2 INFO: found existing models
[07/29 18:30:44] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:30:44] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:30:44] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:30:44] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:36:54] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:36:54] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:36:54] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:36:54] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:36:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:36:54] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:36:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:36:54] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:36:54] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:36:54] detectron2 INFO: found existing models
[07/29 18:36:54] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:36:54] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:36:54] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:36:54] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:38:20] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:38:20] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:38:20] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:38:20] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:38:20] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:38:20] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:38:20] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:38:21] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:38:21] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:38:21] detectron2 INFO: found existing models
[07/29 18:38:21] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:38:21] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:38:21] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:38:21] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:39:53] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:39:53] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:39:54] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:39:54] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:39:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:39:54] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:39:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:39:54] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:39:54] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:39:54] detectron2 INFO: found existing models
[07/29 18:39:54] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:39:54] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:39:54] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:39:54] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:40:59] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:40:59] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:40:59] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:40:59] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:40:59] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:40:59] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:40:59] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:40:59] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:40:59] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:40:59] detectron2 INFO: found existing models
[07/29 18:40:59] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:40:59] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:40:59] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:40:59] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:42:55] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:42:55] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:42:55] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:42:55] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:42:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:42:55] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:42:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:42:55] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:42:55] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:42:55] detectron2 INFO: found existing models
[07/29 18:42:55] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:42:55] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:42:55] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:42:55] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:44:25] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:44:25] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:44:26] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:44:26] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:44:26] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:44:26] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:44:26] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:44:26] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:44:26] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 3.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 4.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:44:26] detectron2 INFO: found existing models
[07/29 18:44:26] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:44:26] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:44:26] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:44:26] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:45:18] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:45:18] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:45:18] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:45:18] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:45:18] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:45:18] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:45:18] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:45:18] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:45:18] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 3.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 4.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:45:18] detectron2 INFO: found existing models
[07/29 18:45:18] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:45:18] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:45:18] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:45:18] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:47:27] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:47:27] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:47:27] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:47:27] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:47:27] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:47:27] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:47:27] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:47:27] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:47:27] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 3.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 4.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:47:27] detectron2 INFO: found existing models
[07/29 18:47:27] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13217, 0.14340
[07/29 18:47:27] detectron2 INFO: best_loss=0.14339648526943244
[07/29 18:47:27] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 18:47:27] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:49:31] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 18:49:31] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 18:49:32] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 18:49:32] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 18:49:36] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 18:49:36] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 18:49:36] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 18:49:36] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 18:49:36] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 18:49:36] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:49:36] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 18:49:38] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 18:49:38] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 18:49:38] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:49:38] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 0.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 1.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 2.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 3.0
[07/29 18:49:38] detectron2 INFO: loss failed to get better value found : 4.0
[07/29 18:49:38] detectron2 INFO: found existing models
[07/29 18:49:38] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626
[07/29 18:49:38] detectron2 INFO: best_loss=0.1391322108589738
[07/29 18:49:38] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 18:49:38] detectron2 INFO: saved_model_names=model_0005399.pth, model_0005699.pth
[07/29 18:50:00] d2.engine.train_loop INFO: Starting training from iteration 5700
[07/29 18:50:18] d2.utils.events INFO:  eta: 2:03:12  iter: 5719  total_loss: 0.115  loss_cls: 0.023  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8807  data_time: 0.0629  lr: 0.005000  max_mem: 6864M
[07/29 18:50:36] d2.utils.events INFO:  eta: 1:59:48  iter: 5739  total_loss: 0.124  loss_cls: 0.024  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8715  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 18:50:53] d2.utils.events INFO:  eta: 2:00:23  iter: 5759  total_loss: 0.121  loss_cls: 0.025  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  time: 0.8719  data_time: 0.0144  lr: 0.005000  max_mem: 6864M
[07/29 18:51:10] d2.utils.events INFO:  eta: 1:59:36  iter: 5779  total_loss: 0.114  loss_cls: 0.021  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8668  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 18:51:28] d2.utils.events INFO:  eta: 1:59:32  iter: 5799  total_loss: 0.107  loss_cls: 0.022  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8688  data_time: 0.0168  lr: 0.005000  max_mem: 6864M
[07/29 18:51:45] d2.utils.events INFO:  eta: 1:59:14  iter: 5819  total_loss: 0.116  loss_cls: 0.020  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8677  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 18:52:03] d2.utils.events INFO:  eta: 1:59:48  iter: 5839  total_loss: 0.110  loss_cls: 0.026  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8720  data_time: 0.0142  lr: 0.005000  max_mem: 6864M
[07/29 18:52:20] d2.utils.events INFO:  eta: 1:59:08  iter: 5859  total_loss: 0.122  loss_cls: 0.027  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  time: 0.8713  data_time: 0.0143  lr: 0.005000  max_mem: 6864M
[07/29 18:52:37] d2.utils.events INFO:  eta: 1:58:28  iter: 5879  total_loss: 0.140  loss_cls: 0.024  loss_box_reg: 0.070  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8693  data_time: 0.0132  lr: 0.005000  max_mem: 6864M
[07/29 18:52:55] d2.utils.events INFO:  eta: 1:58:14  iter: 5899  total_loss: 0.106  loss_cls: 0.022  loss_box_reg: 0.052  loss_rpn_cls: 0.001  loss_rpn_loc: 0.028  time: 0.8691  data_time: 0.0129  lr: 0.005000  max_mem: 6864M
[07/29 18:53:12] d2.utils.events INFO:  eta: 1:57:53  iter: 5919  total_loss: 0.140  loss_cls: 0.023  loss_box_reg: 0.068  loss_rpn_cls: 0.002  loss_rpn_loc: 0.045  time: 0.8693  data_time: 0.0144  lr: 0.005000  max_mem: 6864M
[07/29 18:53:30] d2.utils.events INFO:  eta: 1:57:29  iter: 5939  total_loss: 0.164  loss_cls: 0.027  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.044  time: 0.8696  data_time: 0.0149  lr: 0.005000  max_mem: 6864M
[07/29 18:53:47] d2.utils.events INFO:  eta: 1:57:21  iter: 5959  total_loss: 0.129  loss_cls: 0.022  loss_box_reg: 0.057  loss_rpn_cls: 0.003  loss_rpn_loc: 0.034  time: 0.8704  data_time: 0.0147  lr: 0.005000  max_mem: 6864M
[07/29 18:54:05] d2.utils.events INFO:  eta: 1:57:21  iter: 5979  total_loss: 0.106  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8715  data_time: 0.0159  lr: 0.005000  max_mem: 6864M
[07/29 18:54:24] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 18:54:24] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 18:54:24] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 18:54:24] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 18:54:25] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 18:54:28] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0966 s / img. ETA=0:01:02
[07/29 18:54:33] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1027 s / img. ETA=0:00:50
[07/29 18:54:38] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1042 s / img. ETA=0:00:49
[07/29 18:54:43] d2.evaluation.evaluator INFO: Inference done 129/468. 0.1033 s / img. ETA=0:00:43
[07/29 18:54:48] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1037 s / img. ETA=0:00:38
[07/29 18:54:53] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1039 s / img. ETA=0:00:33
[07/29 18:54:58] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1038 s / img. ETA=0:00:27
[07/29 18:55:03] d2.evaluation.evaluator INFO: Inference done 297/468. 0.1024 s / img. ETA=0:00:21
[07/29 18:55:08] d2.evaluation.evaluator INFO: Inference done 351/468. 0.1007 s / img. ETA=0:00:14
[07/29 18:55:13] d2.evaluation.evaluator INFO: Inference done 405/468. 0.0994 s / img. ETA=0:00:07
[07/29 18:55:18] d2.evaluation.evaluator INFO: Inference done 459/468. 0.0985 s / img. ETA=0:00:01
[07/29 18:55:19] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.561390 (0.113524 s / img per device, on 1 devices)
[07/29 18:55:19] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098402 s / img per device, on 1 devices)
[07/29 18:55:19] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 18:55:19] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 18:55:20] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 18:55:20] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.192 | 98.928 | 98.928 |  nan  | 92.921 | 96.072 |
[07/29 18:55:20] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 18:55:20] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 18:55:20] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 18:55:20] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 18:55:20] d2.evaluation.testing INFO: copypaste: 95.1923,98.9281,98.9281,nan,92.9207,96.0721
[07/29 18:55:22] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 18:55:27] detectron2 INFO: Loss on Validation  done 48/468. 0.0001 s / img. ETA=0:00:56
[07/29 18:55:32] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 18:55:38] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:46
[07/29 18:55:43] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 18:55:48] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 18:55:53] detectron2 INFO: Loss on Validation  done 237/468. 0.0001 s / img. ETA=0:00:31
[07/29 18:55:58] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 18:56:03] detectron2 INFO: Loss on Validation  done 323/468. 0.0001 s / img. ETA=0:00:18
[07/29 18:56:08] detectron2 INFO: Loss on Validation  done 370/468. 0.0001 s / img. ETA=0:00:12
[07/29 18:56:13] detectron2 INFO: Loss on Validation  done 419/468. 0.0001 s / img. ETA=0:00:06
[07/29 18:56:18] detectron2 INFO: Loss on Validation  done 468/468. 0.0001 s / img. ETA=0:00:00
[07/29 18:56:18] detectron2 INFO: mean_loss=0.1322426888658865, best_loss=0.1391322108589738
[07/29 18:56:18] detectron2 INFO: saving model to: model_0005999.pth, saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth
[07/29 18:56:18] d2.utils.events INFO:  eta: 1:57:12  iter: 5999  total_loss: 0.111  loss_cls: 0.022  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8718  data_time: 0.0158  lr: 0.005000  max_mem: 6864M
[07/29 18:56:36] d2.utils.events INFO:  eta: 1:56:51  iter: 6019  total_loss: 0.109  loss_cls: 0.022  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8723  data_time: 0.0139  lr: 0.005000  max_mem: 6864M
[07/29 18:56:53] d2.utils.events INFO:  eta: 1:56:12  iter: 6039  total_loss: 0.114  loss_cls: 0.019  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8715  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 18:57:10] d2.utils.events INFO:  eta: 1:55:44  iter: 6059  total_loss: 0.134  loss_cls: 0.028  loss_box_reg: 0.067  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8704  data_time: 0.0167  lr: 0.005000  max_mem: 6864M
[07/29 18:57:27] d2.utils.events INFO:  eta: 1:55:27  iter: 6079  total_loss: 0.124  loss_cls: 0.021  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8700  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 18:57:45] d2.utils.events INFO:  eta: 1:55:15  iter: 6099  total_loss: 0.129  loss_cls: 0.023  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8703  data_time: 0.0192  lr: 0.005000  max_mem: 6864M
[07/29 18:58:02] d2.utils.events INFO:  eta: 1:54:40  iter: 6119  total_loss: 0.116  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0165  lr: 0.005000  max_mem: 6864M
[07/29 18:58:20] d2.utils.events INFO:  eta: 1:54:34  iter: 6139  total_loss: 0.116  loss_cls: 0.021  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0156  lr: 0.005000  max_mem: 6864M
[07/29 18:58:37] d2.utils.events INFO:  eta: 1:54:10  iter: 6159  total_loss: 0.116  loss_cls: 0.019  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8699  data_time: 0.0166  lr: 0.005000  max_mem: 6864M
[07/29 18:58:54] d2.utils.events INFO:  eta: 1:53:50  iter: 6179  total_loss: 0.099  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8691  data_time: 0.0149  lr: 0.005000  max_mem: 6864M
[07/29 18:59:11] d2.utils.events INFO:  eta: 1:53:32  iter: 6199  total_loss: 0.122  loss_cls: 0.022  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8687  data_time: 0.0137  lr: 0.005000  max_mem: 6864M
[07/29 18:59:29] d2.utils.events INFO:  eta: 1:53:15  iter: 6219  total_loss: 0.134  loss_cls: 0.022  loss_box_reg: 0.069  loss_rpn_cls: 0.003  loss_rpn_loc: 0.037  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8686  data_time: 0.0132  lr: 0.005000  max_mem: 6864M
[07/29 18:59:46] d2.utils.events INFO:  eta: 1:53:00  iter: 6239  total_loss: 0.113  loss_cls: 0.020  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8688  data_time: 0.0170  lr: 0.005000  max_mem: 6864M
[07/29 19:00:04] d2.utils.events INFO:  eta: 1:52:57  iter: 6259  total_loss: 0.117  loss_cls: 0.020  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0132  lr: 0.005000  max_mem: 6864M
[07/29 19:00:21] d2.utils.events INFO:  eta: 1:52:40  iter: 6279  total_loss: 0.129  loss_cls: 0.019  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.040  validation_loss: 0.132  loss_failed_to_get_better_count: 0.000  time: 0.8693  data_time: 0.0143  lr: 0.005000  max_mem: 6864M
[07/29 19:00:40] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:00:40] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:00:40] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:00:41] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:00:44] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1087 s / img. ETA=0:01:00
[07/29 19:00:49] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1022 s / img. ETA=0:00:52
[07/29 19:00:54] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1052 s / img. ETA=0:00:49
[07/29 19:00:59] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1047 s / img. ETA=0:00:44
[07/29 19:01:04] d2.evaluation.evaluator INFO: Inference done 167/468. 0.1046 s / img. ETA=0:00:39
[07/29 19:01:09] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1044 s / img. ETA=0:00:33
[07/29 19:01:15] d2.evaluation.evaluator INFO: Inference done 249/468. 0.1046 s / img. ETA=0:00:28
[07/29 19:01:20] d2.evaluation.evaluator INFO: Inference done 294/468. 0.1035 s / img. ETA=0:00:21
[07/29 19:01:25] d2.evaluation.evaluator INFO: Inference done 348/468. 0.1016 s / img. ETA=0:00:14
[07/29 19:01:30] d2.evaluation.evaluator INFO: Inference done 402/468. 0.1002 s / img. ETA=0:00:07
[07/29 19:01:35] d2.evaluation.evaluator INFO: Inference done 454/468. 0.0996 s / img. ETA=0:00:01
[07/29 19:01:36] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.956036 (0.114376 s / img per device, on 1 devices)
[07/29 19:01:36] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099432 s / img per device, on 1 devices)
[07/29 19:01:36] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:01:36] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:01:36] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:01:37] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.225 | 98.939 | 98.939 |  nan  | 92.861 | 94.831 |
[07/29 19:01:37] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:01:37] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:01:37] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:01:37] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:01:37] d2.evaluation.testing INFO: copypaste: 94.2254,98.9390,98.9390,nan,92.8613,94.8315
[07/29 19:01:39] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:56
[07/29 19:01:44] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 19:01:49] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 19:01:54] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 19:01:59] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 19:02:04] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 19:02:09] detectron2 INFO: Loss on Validation  done 236/468. 0.0001 s / img. ETA=0:00:31
[07/29 19:02:14] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 19:02:19] detectron2 INFO: Loss on Validation  done 322/468. 0.0001 s / img. ETA=0:00:18
[07/29 19:02:24] detectron2 INFO: Loss on Validation  done 369/468. 0.0001 s / img. ETA=0:00:12
[07/29 19:02:30] detectron2 INFO: Loss on Validation  done 418/468. 0.0001 s / img. ETA=0:00:06
[07/29 19:02:35] detectron2 INFO: Loss on Validation  done 467/468. 0.0001 s / img. ETA=0:00:00
[07/29 19:02:35] detectron2 INFO: mean_loss=0.13219967620495188, best_loss=0.1322426888658865
[07/29 19:02:35] detectron2 INFO: could not find a better loss with mean_loss=0.13219967620495188 best_loss=0.1322426888658865 and failed count=1
[07/29 19:02:35] detectron2 INFO: saving model to: model_0006299.pth, saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth
[07/29 19:02:35] d2.utils.events INFO:  eta: 1:52:20  iter: 6299  total_loss: 0.133  loss_cls: 0.023  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8687  data_time: 0.0151  lr: 0.005000  max_mem: 6864M
[07/29 19:02:52] d2.utils.events INFO:  eta: 1:52:03  iter: 6319  total_loss: 0.121  loss_cls: 0.025  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8686  data_time: 0.0168  lr: 0.005000  max_mem: 6864M
[07/29 19:03:09] d2.utils.events INFO:  eta: 1:51:34  iter: 6339  total_loss: 0.123  loss_cls: 0.024  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0133  lr: 0.005000  max_mem: 6864M
[07/29 19:03:27] d2.utils.events INFO:  eta: 1:51:22  iter: 6359  total_loss: 0.114  loss_cls: 0.023  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8680  data_time: 0.0139  lr: 0.005000  max_mem: 6864M
[07/29 19:03:44] d2.utils.events INFO:  eta: 1:51:10  iter: 6379  total_loss: 0.091  loss_cls: 0.019  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8684  data_time: 0.0146  lr: 0.005000  max_mem: 6864M
[07/29 19:04:01] d2.utils.events INFO:  eta: 1:50:39  iter: 6399  total_loss: 0.119  loss_cls: 0.022  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8678  data_time: 0.0172  lr: 0.005000  max_mem: 6864M
[07/29 19:04:18] d2.utils.events INFO:  eta: 1:50:21  iter: 6419  total_loss: 0.121  loss_cls: 0.021  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8674  data_time: 0.0142  lr: 0.005000  max_mem: 6864M
[07/29 19:04:36] d2.utils.events INFO:  eta: 1:50:06  iter: 6439  total_loss: 0.117  loss_cls: 0.022  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8677  data_time: 0.0145  lr: 0.005000  max_mem: 6864M
[07/29 19:04:53] d2.utils.events INFO:  eta: 1:49:54  iter: 6459  total_loss: 0.157  loss_cls: 0.033  loss_box_reg: 0.077  loss_rpn_cls: 0.003  loss_rpn_loc: 0.043  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8679  data_time: 0.0149  lr: 0.005000  max_mem: 6864M
[07/29 19:05:11] d2.utils.events INFO:  eta: 1:49:31  iter: 6479  total_loss: 0.146  loss_cls: 0.033  loss_box_reg: 0.072  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8679  data_time: 0.0143  lr: 0.005000  max_mem: 6864M
[07/29 19:05:28] d2.utils.events INFO:  eta: 1:49:12  iter: 6499  total_loss: 0.137  loss_cls: 0.028  loss_box_reg: 0.072  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8677  data_time: 0.0145  lr: 0.005000  max_mem: 6864M
[07/29 19:05:45] d2.utils.events INFO:  eta: 1:48:59  iter: 6519  total_loss: 0.129  loss_cls: 0.026  loss_box_reg: 0.066  loss_rpn_cls: 0.003  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8679  data_time: 0.0166  lr: 0.005000  max_mem: 6864M
[07/29 19:06:03] d2.utils.events INFO:  eta: 1:48:40  iter: 6539  total_loss: 0.164  loss_cls: 0.036  loss_box_reg: 0.071  loss_rpn_cls: 0.003  loss_rpn_loc: 0.036  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8678  data_time: 0.0144  lr: 0.005000  max_mem: 6864M
[07/29 19:06:20] d2.utils.events INFO:  eta: 1:48:22  iter: 6559  total_loss: 0.147  loss_cls: 0.028  loss_box_reg: 0.062  loss_rpn_cls: 0.003  loss_rpn_loc: 0.039  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8679  data_time: 0.0138  lr: 0.005000  max_mem: 6864M
[07/29 19:06:38] d2.utils.events INFO:  eta: 1:48:03  iter: 6579  total_loss: 0.131  loss_cls: 0.026  loss_box_reg: 0.065  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8678  data_time: 0.0147  lr: 0.005000  max_mem: 6864M
[07/29 19:06:57] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:06:57] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:06:57] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:06:58] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:07:00] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1090 s / img. ETA=0:00:52
[07/29 19:07:05] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1040 s / img. ETA=0:00:51
[07/29 19:07:11] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1034 s / img. ETA=0:00:48
[07/29 19:07:16] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1029 s / img. ETA=0:00:43
[07/29 19:07:21] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1034 s / img. ETA=0:00:38
[07/29 19:07:26] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1041 s / img. ETA=0:00:33
[07/29 19:07:31] d2.evaluation.evaluator INFO: Inference done 248/468. 0.1042 s / img. ETA=0:00:28
[07/29 19:07:36] d2.evaluation.evaluator INFO: Inference done 293/468. 0.1031 s / img. ETA=0:00:21
[07/29 19:07:41] d2.evaluation.evaluator INFO: Inference done 347/468. 0.1014 s / img. ETA=0:00:14
[07/29 19:07:46] d2.evaluation.evaluator INFO: Inference done 401/468. 0.1000 s / img. ETA=0:00:07
[07/29 19:07:51] d2.evaluation.evaluator INFO: Inference done 455/468. 0.0991 s / img. ETA=0:00:01
[07/29 19:07:52] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.617752 (0.113645 s / img per device, on 1 devices)
[07/29 19:07:52] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098863 s / img per device, on 1 devices)
[07/29 19:07:52] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:07:52] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:07:52] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:07:53] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.956 | 98.959 | 98.958 |  nan  | 92.179 | 95.887 |
[07/29 19:07:53] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:07:53] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:07:53] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:07:53] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:07:53] d2.evaluation.testing INFO: copypaste: 94.9563,98.9588,98.9581,nan,92.1794,95.8868
[07/29 19:07:55] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 19:08:00] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 19:08:05] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:51
[07/29 19:08:10] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:46
[07/29 19:08:16] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 19:08:21] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:36
[07/29 19:08:26] detectron2 INFO: Loss on Validation  done 236/468. 0.0001 s / img. ETA=0:00:31
[07/29 19:08:31] detectron2 INFO: Loss on Validation  done 274/468. 0.0001 s / img. ETA=0:00:26
[07/29 19:08:36] detectron2 INFO: Loss on Validation  done 323/468. 0.0001 s / img. ETA=0:00:18
[07/29 19:08:41] detectron2 INFO: Loss on Validation  done 370/468. 0.0001 s / img. ETA=0:00:12
[07/29 19:08:46] detectron2 INFO: Loss on Validation  done 419/468. 0.0001 s / img. ETA=0:00:06
[07/29 19:08:51] detectron2 INFO: Loss on Validation  done 468/468. 0.0001 s / img. ETA=0:00:00
[07/29 19:08:51] detectron2 INFO: mean_loss=0.14235861812740216, best_loss=0.1322426888658865
[07/29 19:08:51] detectron2 INFO: could not find a better loss with mean_loss=0.14235861812740216 best_loss=0.1322426888658865 and failed count=2
[07/29 19:08:51] detectron2 INFO: saving model to: model_0006599.pth, saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth, model_0006599.pth
[07/29 19:08:51] d2.utils.events INFO:  eta: 1:47:47  iter: 6599  total_loss: 0.122  loss_cls: 0.027  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8680  data_time: 0.0165  lr: 0.005000  max_mem: 6864M
[07/29 19:09:08] d2.utils.events INFO:  eta: 1:47:30  iter: 6619  total_loss: 0.127  loss_cls: 0.026  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8678  data_time: 0.0157  lr: 0.005000  max_mem: 6864M
[07/29 19:09:26] d2.utils.events INFO:  eta: 1:47:12  iter: 6639  total_loss: 0.134  loss_cls: 0.026  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 19:09:43] d2.utils.events INFO:  eta: 1:46:59  iter: 6659  total_loss: 0.138  loss_cls: 0.027  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0157  lr: 0.005000  max_mem: 6864M
[07/29 19:10:00] d2.utils.events INFO:  eta: 1:46:42  iter: 6679  total_loss: 0.118  loss_cls: 0.025  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8680  data_time: 0.0162  lr: 0.005000  max_mem: 6864M
[07/29 19:10:18] d2.utils.events INFO:  eta: 1:46:26  iter: 6699  total_loss: 0.111  loss_cls: 0.022  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0160  lr: 0.005000  max_mem: 6864M
[07/29 19:10:36] d2.utils.events INFO:  eta: 1:46:04  iter: 6719  total_loss: 0.112  loss_cls: 0.021  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8683  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 19:10:53] d2.utils.events INFO:  eta: 1:45:52  iter: 6739  total_loss: 0.106  loss_cls: 0.020  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 19:11:10] d2.utils.events INFO:  eta: 1:45:26  iter: 6759  total_loss: 0.128  loss_cls: 0.029  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0173  lr: 0.005000  max_mem: 6864M
[07/29 19:11:27] d2.utils.events INFO:  eta: 1:45:06  iter: 6779  total_loss: 0.116  loss_cls: 0.022  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 19:11:45] d2.utils.events INFO:  eta: 1:44:50  iter: 6799  total_loss: 0.124  loss_cls: 0.021  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8683  data_time: 0.0150  lr: 0.005000  max_mem: 6864M
[07/29 19:12:02] d2.utils.events INFO:  eta: 1:44:31  iter: 6819  total_loss: 0.116  loss_cls: 0.023  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0135  lr: 0.005000  max_mem: 6864M
[07/29 19:12:20] d2.utils.events INFO:  eta: 1:44:10  iter: 6839  total_loss: 0.117  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0170  lr: 0.005000  max_mem: 6864M
[07/29 19:12:37] d2.utils.events INFO:  eta: 1:43:55  iter: 6859  total_loss: 0.109  loss_cls: 0.020  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8684  data_time: 0.0132  lr: 0.005000  max_mem: 6864M
[07/29 19:12:55] d2.utils.events INFO:  eta: 1:43:39  iter: 6879  total_loss: 0.118  loss_cls: 0.020  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0147  lr: 0.005000  max_mem: 6864M
[07/29 19:13:14] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:13:14] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:13:14] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:13:14] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:13:17] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1086 s / img. ETA=0:00:50
[07/29 19:13:22] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1047 s / img. ETA=0:00:50
[07/29 19:13:27] d2.evaluation.evaluator INFO: Inference done 88/468. 0.1037 s / img. ETA=0:00:49
[07/29 19:13:32] d2.evaluation.evaluator INFO: Inference done 126/468. 0.1030 s / img. ETA=0:00:44
[07/29 19:13:37] d2.evaluation.evaluator INFO: Inference done 166/468. 0.1027 s / img. ETA=0:00:39
[07/29 19:13:42] d2.evaluation.evaluator INFO: Inference done 205/468. 0.1034 s / img. ETA=0:00:34
[07/29 19:13:47] d2.evaluation.evaluator INFO: Inference done 244/468. 0.1035 s / img. ETA=0:00:29
[07/29 19:13:52] d2.evaluation.evaluator INFO: Inference done 288/468. 0.1030 s / img. ETA=0:00:23
[07/29 19:13:57] d2.evaluation.evaluator INFO: Inference done 340/468. 0.1017 s / img. ETA=0:00:15
[07/29 19:14:02] d2.evaluation.evaluator INFO: Inference done 394/468. 0.1003 s / img. ETA=0:00:08
[07/29 19:14:08] d2.evaluation.evaluator INFO: Inference done 448/468. 0.0992 s / img. ETA=0:00:02
[07/29 19:14:10] d2.evaluation.evaluator INFO: Total inference time: 0:00:53.271303 (0.115057 s / img per device, on 1 devices)
[07/29 19:14:10] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098917 s / img per device, on 1 devices)
[07/29 19:14:10] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:14:10] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:14:10] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:14:10] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.667 | 98.934 | 98.934 |  nan  | 92.153 | 95.686 |
[07/29 19:14:10] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:14:10] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:14:10] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:14:10] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:14:10] d2.evaluation.testing INFO: copypaste: 94.6671,98.9341,98.9341,nan,92.1526,95.6859
[07/29 19:14:12] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 19:14:17] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 19:14:22] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 19:14:28] detectron2 INFO: Loss on Validation  done 124/468. 0.0001 s / img. ETA=0:00:45
[07/29 19:14:33] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 19:14:38] detectron2 INFO: Loss on Validation  done 199/468. 0.0001 s / img. ETA=0:00:35
[07/29 19:14:43] detectron2 INFO: Loss on Validation  done 237/468. 0.0001 s / img. ETA=0:00:30
[07/29 19:14:48] detectron2 INFO: Loss on Validation  done 275/468. 0.0001 s / img. ETA=0:00:25
[07/29 19:14:53] detectron2 INFO: Loss on Validation  done 324/468. 0.0001 s / img. ETA=0:00:18
[07/29 19:14:58] detectron2 INFO: Loss on Validation  done 371/468. 0.0001 s / img. ETA=0:00:12
[07/29 19:15:03] detectron2 INFO: Loss on Validation  done 420/468. 0.0001 s / img. ETA=0:00:05
[07/29 19:15:08] detectron2 INFO: mean_loss=0.12463941270892047, best_loss=0.1322426888658865
[07/29 19:15:08] detectron2 INFO: saving model to: model_0006899.pth, saved_model_names=model_0005399.pth, model_0005699.pth, model_0005999.pth, model_0006299.pth, model_0006599.pth, model_0006899.pth
[07/29 19:15:08] detectron2 INFO: exeeded model save threshold - removing model_0005399.pth
[07/29 19:15:08] detectron2 INFO: saved_model_names=model_0005699.pth, model_0005999.pth, model_0006299.pth, model_0006599.pth, model_0006899.pth
[07/29 19:15:08] d2.utils.events INFO:  eta: 1:43:22  iter: 6899  total_loss: 0.121  loss_cls: 0.024  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8688  data_time: 0.0153  lr: 0.005000  max_mem: 6864M
[07/29 19:15:25] d2.utils.events INFO:  eta: 1:43:05  iter: 6919  total_loss: 0.123  loss_cls: 0.022  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8687  data_time: 0.0157  lr: 0.005000  max_mem: 6864M
[07/29 19:15:43] d2.utils.events INFO:  eta: 1:42:56  iter: 6939  total_loss: 0.109  loss_cls: 0.017  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8688  data_time: 0.0138  lr: 0.005000  max_mem: 6864M
[07/29 19:16:00] d2.utils.events INFO:  eta: 1:42:29  iter: 6959  total_loss: 0.128  loss_cls: 0.018  loss_box_reg: 0.062  loss_rpn_cls: 0.004  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8685  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 19:16:18] d2.utils.events INFO:  eta: 1:42:11  iter: 6979  total_loss: 0.110  loss_cls: 0.019  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8687  data_time: 0.0170  lr: 0.005000  max_mem: 6864M
[07/29 19:16:35] d2.utils.events INFO:  eta: 1:41:54  iter: 6999  total_loss: 0.102  loss_cls: 0.016  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8689  data_time: 0.0169  lr: 0.005000  max_mem: 6864M
[07/29 19:16:53] d2.utils.events INFO:  eta: 1:41:37  iter: 7019  total_loss: 0.141  loss_cls: 0.021  loss_box_reg: 0.063  loss_rpn_cls: 0.003  loss_rpn_loc: 0.041  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8689  data_time: 0.0150  lr: 0.005000  max_mem: 6864M
[07/29 19:17:10] d2.utils.events INFO:  eta: 1:41:22  iter: 7039  total_loss: 0.126  loss_cls: 0.023  loss_box_reg: 0.067  loss_rpn_cls: 0.003  loss_rpn_loc: 0.034  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8688  data_time: 0.0180  lr: 0.005000  max_mem: 6864M
[07/29 19:17:27] d2.utils.events INFO:  eta: 1:41:11  iter: 7059  total_loss: 0.107  loss_cls: 0.018  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8689  data_time: 0.0139  lr: 0.005000  max_mem: 6864M
[07/29 19:17:45] d2.utils.events INFO:  eta: 1:40:54  iter: 7079  total_loss: 0.101  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8688  data_time: 0.0140  lr: 0.005000  max_mem: 6864M
[07/29 19:18:02] d2.utils.events INFO:  eta: 1:40:29  iter: 7099  total_loss: 0.121  loss_cls: 0.021  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8688  data_time: 0.0136  lr: 0.005000  max_mem: 6864M
[07/29 19:18:20] d2.utils.events INFO:  eta: 1:40:22  iter: 7119  total_loss: 0.087  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8689  data_time: 0.0233  lr: 0.005000  max_mem: 6864M
[07/29 19:18:37] d2.utils.events INFO:  eta: 1:40:01  iter: 7139  total_loss: 0.098  loss_cls: 0.022  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8689  data_time: 0.0137  lr: 0.005000  max_mem: 6864M
[07/29 19:18:54] d2.utils.events INFO:  eta: 1:39:42  iter: 7159  total_loss: 0.114  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8689  data_time: 0.0180  lr: 0.005000  max_mem: 6864M
[07/29 19:19:11] d2.utils.events INFO:  eta: 1:39:26  iter: 7179  total_loss: 0.119  loss_cls: 0.022  loss_box_reg: 0.069  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.132  loss_failed_to_get_better_count: 0.500  time: 0.8687  data_time: 0.0156  lr: 0.005000  max_mem: 6864M
[07/29 19:19:30] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:19:31] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:19:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:19:32] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:19:34] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1045 s / img. ETA=0:00:48
[07/29 19:19:39] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1046 s / img. ETA=0:00:50
[07/29 19:19:44] d2.evaluation.evaluator INFO: Inference done 88/468. 0.1064 s / img. ETA=0:00:49
[07/29 19:19:49] d2.evaluation.evaluator INFO: Inference done 127/468. 0.1052 s / img. ETA=0:00:44
[07/29 19:19:54] d2.evaluation.evaluator INFO: Inference done 168/468. 0.1054 s / img. ETA=0:00:38
[07/29 19:19:59] d2.evaluation.evaluator INFO: Inference done 207/468. 0.1047 s / img. ETA=0:00:33
[07/29 19:20:04] d2.evaluation.evaluator INFO: Inference done 247/468. 0.1046 s / img. ETA=0:00:28
[07/29 19:20:10] d2.evaluation.evaluator INFO: Inference done 292/468. 0.1036 s / img. ETA=0:00:22
[07/29 19:20:15] d2.evaluation.evaluator INFO: Inference done 346/468. 0.1017 s / img. ETA=0:00:14
[07/29 19:20:20] d2.evaluation.evaluator INFO: Inference done 400/468. 0.1003 s / img. ETA=0:00:07
[07/29 19:20:25] d2.evaluation.evaluator INFO: Inference done 454/468. 0.0994 s / img. ETA=0:00:01
[07/29 19:20:26] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.711156 (0.113847 s / img per device, on 1 devices)
[07/29 19:20:26] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.099164 s / img per device, on 1 devices)
[07/29 19:20:26] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:20:26] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:20:26] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:20:27] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.691 | 98.956 | 98.956 |  nan  | 92.871 | 96.812 |
[07/29 19:20:27] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:20:27] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:20:27] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:20:27] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:20:27] d2.evaluation.testing INFO: copypaste: 95.6914,98.9560,98.9560,nan,92.8707,96.8123
[07/29 19:20:29] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 19:20:34] detectron2 INFO: Loss on Validation  done 48/468. 0.0001 s / img. ETA=0:00:55
[07/29 19:20:39] detectron2 INFO: Loss on Validation  done 85/468. 0.0001 s / img. ETA=0:00:51
[07/29 19:20:44] detectron2 INFO: Loss on Validation  done 123/468. 0.0001 s / img. ETA=0:00:46
[07/29 19:20:49] detectron2 INFO: Loss on Validation  done 161/468. 0.0001 s / img. ETA=0:00:41
[07/29 19:20:54] detectron2 INFO: Loss on Validation  done 198/468. 0.0001 s / img. ETA=0:00:36
[07/29 19:20:59] detectron2 INFO: Loss on Validation  done 235/468. 0.0001 s / img. ETA=0:00:31
[07/29 19:21:04] detectron2 INFO: Loss on Validation  done 272/468. 0.0001 s / img. ETA=0:00:26
[07/29 19:21:09] detectron2 INFO: Loss on Validation  done 320/468. 0.0001 s / img. ETA=0:00:19
[07/29 19:21:14] detectron2 INFO: Loss on Validation  done 367/468. 0.0001 s / img. ETA=0:00:12
[07/29 19:21:20] detectron2 INFO: Loss on Validation  done 416/468. 0.0001 s / img. ETA=0:00:06
[07/29 19:21:25] detectron2 INFO: Loss on Validation  done 464/468. 0.0001 s / img. ETA=0:00:00
[07/29 19:21:25] detectron2 INFO: mean_loss=0.1243649768240706, best_loss=0.12463941270892047
[07/29 19:21:25] detectron2 INFO: could not find a better loss with mean_loss=0.1243649768240706 best_loss=0.12463941270892047 and failed count=1
[07/29 19:21:25] detectron2 INFO: saving model to: model_0007199.pth, saved_model_names=model_0005699.pth, model_0005999.pth, model_0006299.pth, model_0006599.pth, model_0006899.pth, model_0007199.pth
[07/29 19:21:25] detectron2 INFO: exeeded model save threshold - removing model_0005699.pth
[07/29 19:21:25] detectron2 INFO: saved_model_names=model_0005999.pth, model_0006299.pth, model_0006599.pth, model_0006899.pth, model_0007199.pth
[07/29 19:21:25] d2.utils.events INFO:  eta: 1:39:09  iter: 7199  total_loss: 0.117  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8686  data_time: 0.0162  lr: 0.005000  max_mem: 6864M
[07/29 19:21:42] d2.utils.events INFO:  eta: 1:38:49  iter: 7219  total_loss: 0.121  loss_cls: 0.022  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8683  data_time: 0.0159  lr: 0.005000  max_mem: 6864M
[07/29 19:21:59] d2.utils.events INFO:  eta: 1:38:27  iter: 7239  total_loss: 0.129  loss_cls: 0.020  loss_box_reg: 0.065  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0161  lr: 0.005000  max_mem: 6864M
[07/29 19:22:17] d2.utils.events INFO:  eta: 1:38:02  iter: 7259  total_loss: 0.127  loss_cls: 0.022  loss_box_reg: 0.072  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8680  data_time: 0.0141  lr: 0.005000  max_mem: 6864M
[07/29 19:22:34] d2.utils.events INFO:  eta: 1:37:45  iter: 7279  total_loss: 0.103  loss_cls: 0.021  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0166  lr: 0.005000  max_mem: 6864M
[07/29 19:22:52] d2.utils.events INFO:  eta: 1:37:28  iter: 7299  total_loss: 0.109  loss_cls: 0.021  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8683  data_time: 0.0140  lr: 0.005000  max_mem: 6864M
[07/29 19:23:09] d2.utils.events INFO:  eta: 1:37:06  iter: 7319  total_loss: 0.100  loss_cls: 0.020  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0170  lr: 0.005000  max_mem: 6864M
[07/29 19:23:26] d2.utils.events INFO:  eta: 1:36:51  iter: 7339  total_loss: 0.112  loss_cls: 0.020  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0128  lr: 0.005000  max_mem: 6864M
[07/29 19:23:44] d2.utils.events INFO:  eta: 1:36:37  iter: 7359  total_loss: 0.121  loss_cls: 0.023  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8683  data_time: 0.0166  lr: 0.005000  max_mem: 6864M
[07/29 19:24:01] d2.utils.events INFO:  eta: 1:36:16  iter: 7379  total_loss: 0.111  loss_cls: 0.023  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0145  lr: 0.005000  max_mem: 6864M
[07/29 19:24:18] d2.utils.events INFO:  eta: 1:36:00  iter: 7399  total_loss: 0.097  loss_cls: 0.018  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0133  lr: 0.005000  max_mem: 6864M
[07/29 19:24:36] d2.utils.events INFO:  eta: 1:35:54  iter: 7419  total_loss: 0.108  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0173  lr: 0.005000  max_mem: 6864M
[07/29 19:24:53] d2.utils.events INFO:  eta: 1:35:33  iter: 7439  total_loss: 0.104  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0158  lr: 0.005000  max_mem: 6864M
[07/29 19:25:11] d2.utils.events INFO:  eta: 1:35:13  iter: 7459  total_loss: 0.099  loss_cls: 0.019  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0160  lr: 0.005000  max_mem: 6864M
[07/29 19:25:28] d2.utils.events INFO:  eta: 1:35:04  iter: 7479  total_loss: 0.117  loss_cls: 0.022  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.132  loss_failed_to_get_better_count: 1.000  time: 0.8684  data_time: 0.0152  lr: 0.005000  max_mem: 6864M
[07/29 19:25:47] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:25:47] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:25:47] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:25:47] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:25:50] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0965 s / img. ETA=0:00:45
[07/29 19:25:55] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1034 s / img. ETA=0:00:50
[07/29 19:26:00] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1045 s / img. ETA=0:00:48
[07/29 19:26:05] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1036 s / img. ETA=0:00:43
[07/29 19:26:10] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1037 s / img. ETA=0:00:37
[07/29 19:26:15] d2.evaluation.evaluator INFO: Inference done 208/468. 0.1042 s / img. ETA=0:00:33
[07/29 19:26:20] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1047 s / img. ETA=0:00:27
[07/29 19:26:25] d2.evaluation.evaluator INFO: Inference done 297/468. 0.1036 s / img. ETA=0:00:21
[07/29 19:26:30] d2.evaluation.evaluator INFO: Inference done 351/468. 0.1017 s / img. ETA=0:00:13
[07/29 19:26:35] d2.evaluation.evaluator INFO: Inference done 405/468. 0.1003 s / img. ETA=0:00:07
[07/29 19:26:40] d2.evaluation.evaluator INFO: Inference done 459/468. 0.0994 s / img. ETA=0:00:01
[07/29 19:26:41] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.264928 (0.112883 s / img per device, on 1 devices)
[07/29 19:26:41] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.099242 s / img per device, on 1 devices)
[07/29 19:26:41] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:26:41] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:26:42] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:26:42] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 96.219 | 98.961 | 98.961 |  nan  | 93.373 | 97.271 |
[07/29 19:26:42] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:26:42] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:26:42] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:26:42] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:26:42] d2.evaluation.testing INFO: copypaste: 96.2193,98.9609,98.9609,nan,93.3726,97.2712
[07/29 19:26:44] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 19:26:49] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 19:26:54] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 19:26:59] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 19:27:04] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:39
[07/29 19:27:10] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 19:27:15] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 19:27:20] detectron2 INFO: Loss on Validation  done 280/468. 0.0001 s / img. ETA=0:00:24
[07/29 19:27:25] detectron2 INFO: Loss on Validation  done 329/468. 0.0001 s / img. ETA=0:00:17
[07/29 19:27:30] detectron2 INFO: Loss on Validation  done 376/468. 0.0001 s / img. ETA=0:00:11
[07/29 19:27:35] detectron2 INFO: Loss on Validation  done 425/468. 0.0001 s / img. ETA=0:00:05
[07/29 19:27:40] detectron2 INFO: mean_loss=0.11919471451081007, best_loss=0.12463941270892047
[07/29 19:27:40] detectron2 INFO: saving model to: model_0007499.pth, saved_model_names=model_0005999.pth, model_0006299.pth, model_0006599.pth, model_0006899.pth, model_0007199.pth, model_0007499.pth
[07/29 19:27:40] detectron2 INFO: exeeded model save threshold - removing model_0005999.pth
[07/29 19:27:40] detectron2 INFO: saved_model_names=model_0006299.pth, model_0006599.pth, model_0006899.pth, model_0007199.pth, model_0007499.pth
[07/29 19:27:40] d2.utils.events INFO:  eta: 1:34:45  iter: 7499  total_loss: 0.133  loss_cls: 0.023  loss_box_reg: 0.074  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0148  lr: 0.005000  max_mem: 6864M
[07/29 19:27:57] d2.utils.events INFO:  eta: 1:34:23  iter: 7519  total_loss: 0.096  loss_cls: 0.021  loss_box_reg: 0.050  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8681  data_time: 0.0140  lr: 0.005000  max_mem: 6864M
[07/29 19:28:14] d2.utils.events INFO:  eta: 1:34:09  iter: 7539  total_loss: 0.118  loss_cls: 0.018  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0144  lr: 0.005000  max_mem: 6864M
[07/29 19:28:32] d2.utils.events INFO:  eta: 1:33:52  iter: 7559  total_loss: 0.110  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8684  data_time: 0.0179  lr: 0.005000  max_mem: 6864M
[07/29 19:28:49] d2.utils.events INFO:  eta: 1:33:34  iter: 7579  total_loss: 0.107  loss_cls: 0.021  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0129  lr: 0.005000  max_mem: 6864M
[07/29 19:29:06] d2.utils.events INFO:  eta: 1:33:16  iter: 7599  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 19:29:24] d2.utils.events INFO:  eta: 1:32:58  iter: 7619  total_loss: 0.113  loss_cls: 0.022  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8681  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 19:29:41] d2.utils.events INFO:  eta: 1:32:41  iter: 7639  total_loss: 0.104  loss_cls: 0.022  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0147  lr: 0.005000  max_mem: 6864M
[07/29 19:29:58] d2.utils.events INFO:  eta: 1:32:18  iter: 7659  total_loss: 0.113  loss_cls: 0.023  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8681  data_time: 0.0145  lr: 0.005000  max_mem: 6864M
[07/29 19:30:16] d2.utils.events INFO:  eta: 1:32:01  iter: 7679  total_loss: 0.095  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8681  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 19:30:34] d2.utils.events INFO:  eta: 1:31:46  iter: 7699  total_loss: 0.103  loss_cls: 0.022  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8682  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 19:30:51] d2.utils.events INFO:  eta: 1:31:30  iter: 7719  total_loss: 0.114  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8683  data_time: 0.0143  lr: 0.005000  max_mem: 6864M
[07/29 19:31:09] d2.utils.events INFO:  eta: 1:31:13  iter: 7739  total_loss: 0.101  loss_cls: 0.019  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8685  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 19:31:26] d2.utils.events INFO:  eta: 1:30:57  iter: 7759  total_loss: 0.101  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8683  data_time: 0.0134  lr: 0.005000  max_mem: 6864M
[07/29 19:31:43] d2.utils.events INFO:  eta: 1:30:44  iter: 7779  total_loss: 0.105  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.128  loss_failed_to_get_better_count: 0.500  time: 0.8683  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 19:32:03] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:32:03] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:32:03] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:32:03] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:32:06] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1065 s / img. ETA=0:01:00
[07/29 19:32:11] d2.evaluation.evaluator INFO: Inference done 50/468. 0.1126 s / img. ETA=0:00:54
[07/29 19:32:16] d2.evaluation.evaluator INFO: Inference done 88/468. 0.1090 s / img. ETA=0:00:49
[07/29 19:32:21] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1082 s / img. ETA=0:00:43
[07/29 19:32:26] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1077 s / img. ETA=0:00:37
[07/29 19:32:31] d2.evaluation.evaluator INFO: Inference done 211/468. 0.1071 s / img. ETA=0:00:32
[07/29 19:32:36] d2.evaluation.evaluator INFO: Inference done 251/468. 0.1065 s / img. ETA=0:00:27
[07/29 19:32:41] d2.evaluation.evaluator INFO: Inference done 298/468. 0.1048 s / img. ETA=0:00:21
[07/29 19:32:46] d2.evaluation.evaluator INFO: Inference done 352/468. 0.1028 s / img. ETA=0:00:13
[07/29 19:32:52] d2.evaluation.evaluator INFO: Inference done 406/468. 0.1012 s / img. ETA=0:00:07
[07/29 19:32:57] d2.evaluation.evaluator INFO: Inference done 460/468. 0.1001 s / img. ETA=0:00:00
[07/29 19:32:57] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.315067 (0.112992 s / img per device, on 1 devices)
[07/29 19:32:57] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099963 s / img per device, on 1 devices)
[07/29 19:32:58] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:32:58] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:32:58] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:32:58] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.687 | 98.964 | 98.964 |  nan  | 92.893 | 96.726 |
[07/29 19:32:58] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:32:58] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:32:58] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:32:58] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:32:58] d2.evaluation.testing INFO: copypaste: 95.6866,98.9644,98.9644,nan,92.8929,96.7258
[07/29 19:33:00] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 19:33:05] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 19:33:11] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 19:33:16] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 19:33:21] detectron2 INFO: Loss on Validation  done 163/468. 0.0001 s / img. ETA=0:00:40
[07/29 19:33:26] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 19:33:31] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 19:33:36] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 19:33:41] detectron2 INFO: Loss on Validation  done 325/468. 0.0001 s / img. ETA=0:00:18
[07/29 19:33:46] detectron2 INFO: Loss on Validation  done 372/468. 0.0001 s / img. ETA=0:00:12
[07/29 19:33:51] detectron2 INFO: Loss on Validation  done 421/468. 0.0001 s / img. ETA=0:00:05
[07/29 19:33:56] detectron2 INFO: mean_loss=0.12011129697123998, best_loss=0.11919471451081007
[07/29 19:33:56] detectron2 INFO: could not find a better loss with mean_loss=0.12011129697123998 best_loss=0.11919471451081007 and failed count=1
[07/29 19:33:56] detectron2 INFO: saving model to: model_0007799.pth, saved_model_names=model_0006299.pth, model_0006599.pth, model_0006899.pth, model_0007199.pth, model_0007499.pth, model_0007799.pth
[07/29 19:33:56] detectron2 INFO: exeeded model save threshold - removing model_0006299.pth
[07/29 19:33:56] detectron2 INFO: saved_model_names=model_0006599.pth, model_0006899.pth, model_0007199.pth, model_0007499.pth, model_0007799.pth
[07/29 19:33:56] d2.utils.events INFO:  eta: 1:30:21  iter: 7799  total_loss: 0.103  loss_cls: 0.019  loss_box_reg: 0.051  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0157  lr: 0.005000  max_mem: 6864M
[07/29 19:34:13] d2.utils.events INFO:  eta: 1:30:03  iter: 7819  total_loss: 0.103  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0139  lr: 0.005000  max_mem: 6864M
[07/29 19:34:30] d2.utils.events INFO:  eta: 1:29:43  iter: 7839  total_loss: 0.116  loss_cls: 0.023  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8679  data_time: 0.0175  lr: 0.005000  max_mem: 6864M
[07/29 19:34:47] d2.utils.events INFO:  eta: 1:29:23  iter: 7859  total_loss: 0.100  loss_cls: 0.020  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8678  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 19:35:05] d2.utils.events INFO:  eta: 1:29:11  iter: 7879  total_loss: 0.114  loss_cls: 0.022  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8681  data_time: 0.0152  lr: 0.005000  max_mem: 6864M
[07/29 19:35:23] d2.utils.events INFO:  eta: 1:28:54  iter: 7899  total_loss: 0.119  loss_cls: 0.017  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0141  lr: 0.005000  max_mem: 6864M
[07/29 19:35:40] d2.utils.events INFO:  eta: 1:28:36  iter: 7919  total_loss: 0.109  loss_cls: 0.020  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0153  lr: 0.005000  max_mem: 6864M
[07/29 19:35:58] d2.utils.events INFO:  eta: 1:28:18  iter: 7939  total_loss: 0.120  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 19:36:16] d2.utils.events INFO:  eta: 1:28:04  iter: 7959  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0158  lr: 0.005000  max_mem: 6864M
[07/29 19:36:33] d2.utils.events INFO:  eta: 1:27:44  iter: 7979  total_loss: 0.105  loss_cls: 0.017  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8683  data_time: 0.0144  lr: 0.005000  max_mem: 6864M
[07/29 19:36:50] d2.utils.events INFO:  eta: 1:27:21  iter: 7999  total_loss: 0.115  loss_cls: 0.020  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0153  lr: 0.005000  max_mem: 6864M
[07/29 19:37:07] d2.utils.events INFO:  eta: 1:27:02  iter: 8019  total_loss: 0.091  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0168  lr: 0.005000  max_mem: 6864M
[07/29 19:37:25] d2.utils.events INFO:  eta: 1:26:46  iter: 8039  total_loss: 0.097  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8682  data_time: 0.0136  lr: 0.005000  max_mem: 6864M
[07/29 19:37:42] d2.utils.events INFO:  eta: 1:26:31  iter: 8059  total_loss: 0.102  loss_cls: 0.017  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8684  data_time: 0.0154  lr: 0.005000  max_mem: 6864M
[07/29 19:38:00] d2.utils.events INFO:  eta: 1:26:16  iter: 8079  total_loss: 0.088  loss_cls: 0.016  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0150  lr: 0.005000  max_mem: 6864M
[07/29 19:38:19] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:38:19] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:38:19] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:38:19] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:38:22] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1072 s / img. ETA=0:01:07
[07/29 19:38:27] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1063 s / img. ETA=0:00:54
[07/29 19:38:32] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1073 s / img. ETA=0:00:50
[07/29 19:38:37] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1050 s / img. ETA=0:00:43
[07/29 19:38:42] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1045 s / img. ETA=0:00:37
[07/29 19:38:48] d2.evaluation.evaluator INFO: Inference done 213/468. 0.1051 s / img. ETA=0:00:32
[07/29 19:38:53] d2.evaluation.evaluator INFO: Inference done 254/468. 0.1051 s / img. ETA=0:00:27
[07/29 19:38:58] d2.evaluation.evaluator INFO: Inference done 302/468. 0.1040 s / img. ETA=0:00:20
[07/29 19:39:03] d2.evaluation.evaluator INFO: Inference done 356/468. 0.1021 s / img. ETA=0:00:13
[07/29 19:39:08] d2.evaluation.evaluator INFO: Inference done 410/468. 0.1007 s / img. ETA=0:00:06
[07/29 19:39:13] d2.evaluation.evaluator INFO: Inference done 464/468. 0.0997 s / img. ETA=0:00:00
[07/29 19:39:13] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.348977 (0.113065 s / img per device, on 1 devices)
[07/29 19:39:13] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099603 s / img per device, on 1 devices)
[07/29 19:39:13] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:39:13] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:39:14] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:39:14] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.361 | 98.956 | 98.956 |  nan  | 92.587 | 93.675 |
[07/29 19:39:14] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:39:14] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:39:14] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:39:14] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:39:14] d2.evaluation.testing INFO: copypaste: 93.3613,98.9559,98.9559,nan,92.5871,93.6753
[07/29 19:39:16] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:53
[07/29 19:39:21] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 19:39:26] detectron2 INFO: Loss on Validation  done 86/468. 0.0001 s / img. ETA=0:00:50
[07/29 19:39:31] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 19:39:36] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 19:39:42] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 19:39:47] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 19:39:52] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 19:39:57] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 19:40:02] detectron2 INFO: Loss on Validation  done 373/468. 0.0001 s / img. ETA=0:00:11
[07/29 19:40:07] detectron2 INFO: Loss on Validation  done 422/468. 0.0001 s / img. ETA=0:00:05
[07/29 19:40:12] detectron2 INFO: mean_loss=0.12541096546489525, best_loss=0.11919471451081007
[07/29 19:40:12] detectron2 INFO: could not find a better loss with mean_loss=0.12541096546489525 best_loss=0.11919471451081007 and failed count=2
[07/29 19:40:12] detectron2 INFO: saving model to: model_0008099.pth, saved_model_names=model_0006599.pth, model_0006899.pth, model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth
[07/29 19:40:12] detectron2 INFO: exeeded model save threshold - removing model_0006599.pth
[07/29 19:40:12] detectron2 INFO: saved_model_names=model_0006899.pth, model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth
[07/29 19:40:12] d2.utils.events INFO:  eta: 1:25:59  iter: 8099  total_loss: 0.097  loss_cls: 0.018  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 19:40:29] d2.utils.events INFO:  eta: 1:25:42  iter: 8119  total_loss: 0.108  loss_cls: 0.021  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0147  lr: 0.005000  max_mem: 6864M
[07/29 19:40:47] d2.utils.events INFO:  eta: 1:25:24  iter: 8139  total_loss: 0.103  loss_cls: 0.021  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0170  lr: 0.005000  max_mem: 6864M
[07/29 19:41:04] d2.utils.events INFO:  eta: 1:25:06  iter: 8159  total_loss: 0.111  loss_cls: 0.019  loss_box_reg: 0.057  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8684  data_time: 0.0158  lr: 0.005000  max_mem: 6864M
[07/29 19:41:22] d2.utils.events INFO:  eta: 1:24:49  iter: 8179  total_loss: 0.103  loss_cls: 0.019  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8685  data_time: 0.0149  lr: 0.005000  max_mem: 6864M
[07/29 19:41:39] d2.utils.events INFO:  eta: 1:24:31  iter: 8199  total_loss: 0.103  loss_cls: 0.021  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8686  data_time: 0.0174  lr: 0.005000  max_mem: 6864M
[07/29 19:41:56] d2.utils.events INFO:  eta: 1:24:15  iter: 8219  total_loss: 0.092  loss_cls: 0.016  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8686  data_time: 0.0177  lr: 0.005000  max_mem: 6864M
[07/29 19:42:14] d2.utils.events INFO:  eta: 1:24:00  iter: 8239  total_loss: 0.095  loss_cls: 0.018  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8686  data_time: 0.0136  lr: 0.005000  max_mem: 6864M
[07/29 19:42:32] d2.utils.events INFO:  eta: 1:23:45  iter: 8259  total_loss: 0.103  loss_cls: 0.019  loss_box_reg: 0.051  loss_rpn_cls: 0.001  loss_rpn_loc: 0.030  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 19:42:49] d2.utils.events INFO:  eta: 1:23:27  iter: 8279  total_loss: 0.113  loss_cls: 0.021  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0155  lr: 0.005000  max_mem: 6864M
[07/29 19:43:07] d2.utils.events INFO:  eta: 1:23:13  iter: 8299  total_loss: 0.111  loss_cls: 0.018  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.034  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8689  data_time: 0.0134  lr: 0.005000  max_mem: 6864M
[07/29 19:43:24] d2.utils.events INFO:  eta: 1:22:56  iter: 8319  total_loss: 0.133  loss_cls: 0.022  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.040  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8689  data_time: 0.0158  lr: 0.005000  max_mem: 6864M
[07/29 19:43:41] d2.utils.events INFO:  eta: 1:22:38  iter: 8339  total_loss: 0.124  loss_cls: 0.024  loss_box_reg: 0.067  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0132  lr: 0.005000  max_mem: 6864M
[07/29 19:43:58] d2.utils.events INFO:  eta: 1:22:19  iter: 8359  total_loss: 0.117  loss_cls: 0.020  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8686  data_time: 0.0152  lr: 0.005000  max_mem: 6864M
[07/29 19:44:16] d2.utils.events INFO:  eta: 1:22:03  iter: 8379  total_loss: 0.109  loss_cls: 0.020  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8688  data_time: 0.0136  lr: 0.005000  max_mem: 6864M
[07/29 19:44:35] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:44:35] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 19:44:35] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 19:44:35] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 19:44:37] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1034 s / img. ETA=0:01:01
[07/29 19:44:43] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1051 s / img. ETA=0:00:51
[07/29 19:44:48] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1060 s / img. ETA=0:00:48
[07/29 19:44:53] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1055 s / img. ETA=0:00:42
[07/29 19:44:58] d2.evaluation.evaluator INFO: Inference done 171/468. 0.1059 s / img. ETA=0:00:37
[07/29 19:45:03] d2.evaluation.evaluator INFO: Inference done 211/468. 0.1054 s / img. ETA=0:00:32
[07/29 19:45:08] d2.evaluation.evaluator INFO: Inference done 251/468. 0.1052 s / img. ETA=0:00:27
[07/29 19:45:13] d2.evaluation.evaluator INFO: Inference done 297/468. 0.1043 s / img. ETA=0:00:21
[07/29 19:45:18] d2.evaluation.evaluator INFO: Inference done 351/468. 0.1024 s / img. ETA=0:00:13
[07/29 19:45:23] d2.evaluation.evaluator INFO: Inference done 405/468. 0.1009 s / img. ETA=0:00:07
[07/29 19:45:28] d2.evaluation.evaluator INFO: Inference done 459/468. 0.0998 s / img. ETA=0:00:01
[07/29 19:45:29] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.181521 (0.112703 s / img per device, on 1 devices)
[07/29 19:45:29] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:46 (0.099682 s / img per device, on 1 devices)
[07/29 19:45:29] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 19:45:29] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 19:45:29] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 19:45:29] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 96.381 | 98.960 | 98.960 |  nan  | 93.451 | 97.502 |
[07/29 19:45:29] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 19:45:29] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 19:45:29] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 19:45:29] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 19:45:29] d2.evaluation.testing INFO: copypaste: 96.3810,98.9603,98.9603,nan,93.4506,97.5020
[07/29 19:45:32] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 19:45:37] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 19:45:42] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 19:45:47] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 19:45:52] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 19:45:57] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 19:46:02] detectron2 INFO: Loss on Validation  done 241/468. 0.0001 s / img. ETA=0:00:29
[07/29 19:46:07] detectron2 INFO: Loss on Validation  done 280/468. 0.0001 s / img. ETA=0:00:24
[07/29 19:46:12] detectron2 INFO: Loss on Validation  done 329/468. 0.0001 s / img. ETA=0:00:17
[07/29 19:46:17] detectron2 INFO: Loss on Validation  done 376/468. 0.0001 s / img. ETA=0:00:11
[07/29 19:46:22] detectron2 INFO: Loss on Validation  done 425/468. 0.0001 s / img. ETA=0:00:05
[07/29 19:46:27] detectron2 INFO: mean_loss=0.12359663528626659, best_loss=0.11919471451081007
[07/29 19:46:27] detectron2 INFO: could not find a better loss with mean_loss=0.12359663528626659 best_loss=0.11919471451081007 and failed count=3
[07/29 19:46:27] detectron2 INFO: saving model to: model_0008399.pth, saved_model_names=model_0006899.pth, model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth
[07/29 19:46:27] detectron2 INFO: exeeded model save threshold - removing model_0006899.pth
[07/29 19:46:27] detectron2 INFO: saved_model_names=model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth
[07/29 19:46:27] d2.utils.events INFO:  eta: 1:21:45  iter: 8399  total_loss: 0.113  loss_cls: 0.018  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8686  data_time: 0.0147  lr: 0.005000  max_mem: 6864M
[07/29 19:46:45] d2.utils.events INFO:  eta: 1:21:26  iter: 8419  total_loss: 0.100  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0142  lr: 0.005000  max_mem: 6864M
[07/29 19:47:02] d2.utils.events INFO:  eta: 1:21:09  iter: 8439  total_loss: 0.110  loss_cls: 0.021  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0161  lr: 0.005000  max_mem: 6864M
[07/29 19:47:20] d2.utils.events INFO:  eta: 1:20:51  iter: 8459  total_loss: 0.107  loss_cls: 0.019  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8688  data_time: 0.0182  lr: 0.005000  max_mem: 6864M
[07/29 19:47:37] d2.utils.events INFO:  eta: 1:20:31  iter: 8479  total_loss: 0.100  loss_cls: 0.020  loss_box_reg: 0.057  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0127  lr: 0.005000  max_mem: 6864M
[07/29 19:47:54] d2.utils.events INFO:  eta: 1:20:16  iter: 8499  total_loss: 0.103  loss_cls: 0.018  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 1.000  time: 0.8687  data_time: 0.0133  lr: 0.005000  max_mem: 6864M
[07/29 19:48:02] d2.engine.hooks INFO: Overall training speed: 2807 iterations in 0:40:38 (0.8688 s / it)
[07/29 19:48:02] d2.engine.hooks INFO: Total training time: 0:57:59 (0:17:21 on hooks)
[07/29 19:48:33] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 19:48:33] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 19:48:33] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 19:48:33] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 19:48:33] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:48:33] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 19:48:33] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:48:33] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:48:33] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 19:49:24] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 19:49:24] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 19:49:25] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 19:49:25] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 19:49:25] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:49:25] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 19:49:25] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:49:25] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:49:25] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 19:49:54] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 19:49:54] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 19:49:54] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 19:49:54] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 19:49:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:49:54] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 19:49:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:49:54] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:49:54] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 19:49:54] detectron2 INFO: {"data_time": 0.02939015450010629, "eta_seconds": 11686.352576468416, "fast_rcnn/cls_accuracy": 0.786865234375, "fast_rcnn/false_negative": 0.9394059153493115, "fast_rcnn/fg_cls_accuracy": 0.060594084650688426, "iteration": 19, "loss_box_reg": 0.12881449237465858, "loss_cls": 0.6249855756759644, "loss_rpn_cls": 0.7874684631824493, "loss_rpn_loc": 0.2691366523504257, "lr": 8.408750000000002e-05, "roi_head/num_bg_samples": 474.5, "roi_head/num_fg_samples": 37.5, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8358738699998867, "total_loss": 1.9008187465369701}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.030504754000048706, "eta_seconds": 12071.132336078655, "fast_rcnn/cls_accuracy": 0.82177734375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 39, "loss_box_reg": 0.5570397675037384, "loss_cls": 0.4548873007297516, "loss_rpn_cls": 0.18511445075273514, "loss_rpn_loc": 0.21736495941877365, "lr": 0.00016733750000000002, "roi_head/num_bg_samples": 420.75, "roi_head/num_fg_samples": 91.25, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.873537560999921, "total_loss": 1.6033400520682335}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.018182287000172437, "eta_seconds": 12211.82605749436, "fast_rcnn/cls_accuracy": 0.8115234375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 59, "loss_box_reg": 0.6337968111038208, "loss_cls": 0.4483332186937332, "loss_rpn_cls": 0.11832546815276146, "loss_rpn_loc": 0.1953253597021103, "lr": 0.0002505875, "roi_head/num_bg_samples": 415.5, "roi_head/num_fg_samples": 96.5, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8913536900001873, "total_loss": 1.436222393065691}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01889697700016768, "eta_seconds": 12284.491105073626, "fast_rcnn/cls_accuracy": 0.78271484375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 79, "loss_box_reg": 0.7354804873466492, "loss_cls": 0.45420069992542267, "loss_rpn_cls": 0.07250338047742844, "loss_rpn_loc": 0.16615113615989685, "lr": 0.0003338375, "roi_head/num_bg_samples": 400.75, "roi_head/num_fg_samples": 111.25, "rpn/num_neg_anchors": 153.625, "rpn/num_pos_anchors": 102.375, "time": 0.8865976399999909, "total_loss": 1.4724470991641283}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.018002271499881317, "eta_seconds": 12308.280497507018, "fast_rcnn/cls_accuracy": 0.775634765625, "fast_rcnn/false_negative": 0.9627708420293705, "fast_rcnn/fg_cls_accuracy": 0.037229157970629534, "iteration": 99, "loss_box_reg": 0.8062326312065125, "loss_cls": 0.42708392441272736, "loss_rpn_cls": 0.05313627049326897, "loss_rpn_loc": 0.12421421706676483, "lr": 0.0004170875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.89259754349996, "total_loss": 1.4219505097717047}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013190883500101336, "eta_seconds": 12300.492148384357, "fast_rcnn/cls_accuracy": 0.836669921875, "fast_rcnn/false_negative": 0.6792227649825398, "fast_rcnn/fg_cls_accuracy": 0.32077723501746025, "iteration": 119, "loss_box_reg": 0.6585336923599243, "loss_cls": 0.34507088363170624, "loss_rpn_cls": 0.03669000416994095, "loss_rpn_loc": 0.11788284033536911, "lr": 0.0005003375000000001, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8962868920000346, "total_loss": 1.1734376233071089}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01545518400007495, "eta_seconds": 12287.084732144256, "fast_rcnn/cls_accuracy": 0.884765625, "fast_rcnn/false_negative": 0.30859375, "fast_rcnn/fg_cls_accuracy": 0.69140625, "iteration": 139, "loss_box_reg": 0.5096877813339233, "loss_cls": 0.26354336738586426, "loss_rpn_cls": 0.018867461010813713, "loss_rpn_loc": 0.08101745694875717, "lr": 0.0005835875000000001, "roi_head/num_bg_samples": 388.125, "roi_head/num_fg_samples": 123.875, "rpn/num_neg_anchors": 172.0, "rpn/num_pos_anchors": 84.0, "time": 0.887171862500054, "total_loss": 0.8601078088395298}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01646772100002636, "eta_seconds": 12307.382867401684, "fast_rcnn/cls_accuracy": 0.919921875, "fast_rcnn/false_negative": 0.17972995923913043, "fast_rcnn/fg_cls_accuracy": 0.8202700407608696, "iteration": 159, "loss_box_reg": 0.3034415692090988, "loss_cls": 0.20181019604206085, "loss_rpn_cls": 0.014326298609375954, "loss_rpn_loc": 0.07085645943880081, "lr": 0.0006668375, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.9058895885000311, "total_loss": 0.5821873405948281}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015896259000328428, "eta_seconds": 12263.543236107209, "fast_rcnn/cls_accuracy": 0.915283203125, "fast_rcnn/false_negative": 0.19735852925095682, "fast_rcnn/fg_cls_accuracy": 0.8026414707490432, "iteration": 179, "loss_box_reg": 0.2435252144932747, "loss_cls": 0.19679177552461624, "loss_rpn_cls": 0.015311155002564192, "loss_rpn_loc": 0.06794760376214981, "lr": 0.0007500875, "roi_head/num_bg_samples": 395.75, "roi_head/num_fg_samples": 116.25, "rpn/num_neg_anchors": 174.0, "rpn/num_pos_anchors": 82.0, "time": 0.8723723070002052, "total_loss": 0.5317779292818159}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012299204000100872, "eta_seconds": 12224.272998899309, "fast_rcnn/cls_accuracy": 0.932861328125, "fast_rcnn/false_negative": 0.19618584485587062, "fast_rcnn/fg_cls_accuracy": 0.8038141551441293, "iteration": 199, "loss_box_reg": 0.22756582498550415, "loss_cls": 0.16675635427236557, "loss_rpn_cls": 0.009464774280786514, "loss_rpn_loc": 0.0724685788154602, "lr": 0.0008333375, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8750523474998317, "total_loss": 0.4794214074499905}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014126985500070077, "eta_seconds": 12202.029604787009, "fast_rcnn/cls_accuracy": 0.950927734375, "fast_rcnn/false_negative": 0.12814344152360516, "fast_rcnn/fg_cls_accuracy": 0.8718565584763949, "iteration": 219, "loss_box_reg": 0.21683961898088455, "loss_cls": 0.1309489831328392, "loss_rpn_cls": 0.00984030868858099, "loss_rpn_loc": 0.06770532205700874, "lr": 0.0009165875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8745993960001215, "total_loss": 0.4421173296868801}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014485199499858936, "eta_seconds": 12151.444937739672, "fast_rcnn/cls_accuracy": 0.95654296875, "fast_rcnn/false_negative": 0.1064453125, "fast_rcnn/fg_cls_accuracy": 0.8935546875, "iteration": 239, "loss_box_reg": 0.17889448255300522, "loss_cls": 0.11397441476583481, "loss_rpn_cls": 0.010145330801606178, "loss_rpn_loc": 0.05544925481081009, "lr": 0.0009998375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8600121944998591, "total_loss": 0.3471206361427903}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.019302317499978017, "eta_seconds": 12080.389871734214, "fast_rcnn/cls_accuracy": 0.9541015625, "fast_rcnn/false_negative": 0.12636323851203501, "fast_rcnn/fg_cls_accuracy": 0.873636761487965, "iteration": 259, "loss_box_reg": 0.18179909139871597, "loss_cls": 0.1189894787967205, "loss_rpn_cls": 0.007479577325284481, "loss_rpn_loc": 0.061658645048737526, "lr": 0.0010830875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.855434207999906, "total_loss": 0.36115485936170444}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013283666000006633, "eta_seconds": 12055.122413197958, "fast_rcnn/cls_accuracy": 0.926025390625, "fast_rcnn/false_negative": 0.162109375, "fast_rcnn/fg_cls_accuracy": 0.837890625, "iteration": 279, "loss_box_reg": 0.21112839132547379, "loss_cls": 0.18035943061113358, "loss_rpn_cls": 0.014031817205250263, "loss_rpn_loc": 0.07702159136533737, "lr": 0.0011663375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8750548134999008, "total_loss": 0.5035657323896885}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 83.41258386889328, "bbox/AP50": 98.38983659105097, "bbox/AP75": 97.104577022374, "bbox/APl": 84.48451837716055, "bbox/APm": 82.36344665876535, "bbox/APs": NaN, "data_time": 0.016146144499771253, "eta_seconds": 12043.127799364234, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 299, "loss_box_reg": 0.16537624597549438, "loss_cls": 0.11342864856123924, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.007433959748595953, "loss_rpn_loc": 0.0554153174161911, "lr": 0.0012495875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8814841179998893, "total_loss": 0.33745233179070055, "validation_loss": 0.32906902715045755}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016304798999954073, "eta_seconds": 12019.978845197964, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.076171875, "fast_rcnn/fg_cls_accuracy": 0.923828125, "iteration": 319, "loss_box_reg": 0.15682829916477203, "loss_cls": 0.0946701243519783, "loss_rpn_cls": 0.0038296080892905593, "loss_rpn_loc": 0.06303796917200089, "lr": 0.0013328374999999999, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 155.125, "rpn/num_pos_anchors": 100.875, "time": 0.8458358415000475, "total_loss": 0.31777258962392807}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01102276699975846, "eta_seconds": 12006.686827094072, "fast_rcnn/cls_accuracy": 0.963134765625, "fast_rcnn/false_negative": 0.10078125, "fast_rcnn/fg_cls_accuracy": 0.89921875, "iteration": 339, "loss_box_reg": 0.15902839601039886, "loss_cls": 0.09758839383721352, "loss_rpn_cls": 0.005238221259787679, "loss_rpn_loc": 0.062006376683712006, "lr": 0.0014160874999999999, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.883200966000004, "total_loss": 0.3246980574913323}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.010798721999890404, "eta_seconds": 11976.53362377627, "fast_rcnn/cls_accuracy": 0.95947265625, "fast_rcnn/false_negative": 0.11650020879732739, "fast_rcnn/fg_cls_accuracy": 0.8834997912026725, "iteration": 359, "loss_box_reg": 0.1674002781510353, "loss_cls": 0.11093494668602943, "loss_rpn_cls": 0.009214169345796108, "loss_rpn_loc": 0.05432415381073952, "lr": 0.0014993375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.8555542895001054, "total_loss": 0.34753162460401654}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015279147000001103, "eta_seconds": 11946.566867246482, "fast_rcnn/cls_accuracy": 0.967041015625, "fast_rcnn/false_negative": 0.0796565594059406, "fast_rcnn/fg_cls_accuracy": 0.9203434405940594, "iteration": 379, "loss_box_reg": 0.14857570081949234, "loss_cls": 0.08996423333883286, "loss_rpn_cls": 0.006297955987975001, "loss_rpn_loc": 0.05611295625567436, "lr": 0.0015825875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8612688080002044, "total_loss": 0.3035198914585635}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012088851499356679, "eta_seconds": 11909.025623667902, "fast_rcnn/cls_accuracy": 0.966064453125, "fast_rcnn/false_negative": 0.0810546875, "fast_rcnn/fg_cls_accuracy": 0.9189453125, "iteration": 399, "loss_box_reg": 0.14267047494649887, "loss_cls": 0.08620045706629753, "loss_rpn_cls": 0.003031725063920021, "loss_rpn_loc": 0.05911160446703434, "lr": 0.0016658375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.8536961670001801, "total_loss": 0.30017199623398483}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012189826500161871, "eta_seconds": 11883.833854455119, "fast_rcnn/cls_accuracy": 0.971923828125, "fast_rcnn/false_negative": 0.0693359375, "fast_rcnn/fg_cls_accuracy": 0.9306640625, "iteration": 419, "loss_box_reg": 0.13817040622234344, "loss_cls": 0.07225135341286659, "loss_rpn_cls": 0.004466069862246513, "loss_rpn_loc": 0.0624714121222496, "lr": 0.0017490875, "roi_head/num_bg_samples": 395.625, "roi_head/num_fg_samples": 116.375, "rpn/num_neg_anchors": 170.25, "rpn/num_pos_anchors": 85.75, "time": 0.853337961500074, "total_loss": 0.2805070823524147}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011904372000117291, "eta_seconds": 11840.29540779574, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.07421875, "fast_rcnn/fg_cls_accuracy": 0.92578125, "iteration": 439, "loss_box_reg": 0.1460084617137909, "loss_cls": 0.08459053561091423, "loss_rpn_cls": 0.004542296519502997, "loss_rpn_loc": 0.06430486589670181, "lr": 0.0018323375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.75, "rpn/num_pos_anchors": 88.25, "time": 0.8255171649998374, "total_loss": 0.28996874997392297}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01606286150035885, "eta_seconds": 11815.596436706812, "fast_rcnn/cls_accuracy": 0.972412109375, "fast_rcnn/false_negative": 0.06473777326233184, "fast_rcnn/fg_cls_accuracy": 0.9352622267376682, "iteration": 459, "loss_box_reg": 0.1321180760860443, "loss_cls": 0.06950072944164276, "loss_rpn_cls": 0.004573044599965215, "loss_rpn_loc": 0.06276549398899078, "lr": 0.0019155875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8637742569994771, "total_loss": 0.29605477419681847}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012803132500266656, "eta_seconds": 11785.865274366573, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.07613281250000001, "fast_rcnn/fg_cls_accuracy": 0.9238671875, "iteration": 479, "loss_box_reg": 0.1410418078303337, "loss_cls": 0.0620583388954401, "loss_rpn_cls": 0.01461251126602292, "loss_rpn_loc": 0.059028103947639465, "lr": 0.0019988375, "roi_head/num_bg_samples": 399.625, "roi_head/num_fg_samples": 112.375, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.868328073000157, "total_loss": 0.3025325112976134}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015173395499914477, "eta_seconds": 11766.056904469786, "fast_rcnn/cls_accuracy": 0.967529296875, "fast_rcnn/false_negative": 0.0791015625, "fast_rcnn/fg_cls_accuracy": 0.9208984375, "iteration": 499, "loss_box_reg": 0.14217590540647507, "loss_cls": 0.08436384052038193, "loss_rpn_cls": 0.005042934790253639, "loss_rpn_loc": 0.054758913815021515, "lr": 0.0020820875, "roi_head/num_bg_samples": 388.75, "roi_head/num_fg_samples": 123.25, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.869340422500045, "total_loss": 0.2905305549502373}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011143657999582501, "eta_seconds": 11748.62700015978, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.09221540178571429, "fast_rcnn/fg_cls_accuracy": 0.9077845982142857, "iteration": 519, "loss_box_reg": 0.14154227823019028, "loss_cls": 0.08936139941215515, "loss_rpn_cls": 0.0032708962680771947, "loss_rpn_loc": 0.06133125722408295, "lr": 0.0021653375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8633433045001766, "total_loss": 0.2882083682343364}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014494807000119181, "eta_seconds": 11733.565006896564, "fast_rcnn/cls_accuracy": 0.9521484375, "fast_rcnn/false_negative": 0.095703125, "fast_rcnn/fg_cls_accuracy": 0.904296875, "iteration": 539, "loss_box_reg": 0.16541259735822678, "loss_cls": 0.12462004274129868, "loss_rpn_cls": 0.005535591393709183, "loss_rpn_loc": 0.06912935525178909, "lr": 0.0022485875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8846403235002072, "total_loss": 0.36126803897786885}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012273919000563183, "eta_seconds": 11735.521759175765, "fast_rcnn/cls_accuracy": 0.95849609375, "fast_rcnn/false_negative": 0.0980273705244081, "fast_rcnn/fg_cls_accuracy": 0.9019726294755919, "iteration": 559, "loss_box_reg": 0.14862347394227982, "loss_cls": 0.10806813836097717, "loss_rpn_cls": 0.006631288910284638, "loss_rpn_loc": 0.0664207711815834, "lr": 0.0023318375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8845762955002101, "total_loss": 0.3488547676242888}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0118424329998561, "eta_seconds": 11702.231173056018, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.056640625, "fast_rcnn/fg_cls_accuracy": 0.943359375, "iteration": 579, "loss_box_reg": 0.1253226026892662, "loss_cls": 0.07414546608924866, "loss_rpn_cls": 0.008195447502657771, "loss_rpn_loc": 0.05210341885685921, "lr": 0.0024150875, "roi_head/num_bg_samples": 394.75, "roi_head/num_fg_samples": 117.25, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8636824619998151, "total_loss": 0.2699383229482919}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 80.35829873197507, "bbox/AP50": 98.58295968097553, "bbox/AP75": 97.43300081767086, "bbox/APl": 78.67308581650998, "bbox/APm": 84.08251405024096, "bbox/APs": NaN, "data_time": 0.013514647000192781, "eta_seconds": 11678.932228370002, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 599, "loss_box_reg": 0.13238591700792313, "loss_cls": 0.06162050738930702, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004966367734596133, "loss_rpn_loc": 0.05982688069343567, "lr": 0.0024983375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8484068394996029, "total_loss": 0.2661393281305209, "validation_loss": 0.3150369518328001}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0135088239999277, "eta_seconds": 11657.219651099671, "fast_rcnn/cls_accuracy": 0.96826171875, "fast_rcnn/false_negative": 0.07183139162719242, "fast_rcnn/fg_cls_accuracy": 0.9281686083728076, "iteration": 619, "loss_box_reg": 0.13828347623348236, "loss_cls": 0.08472422882914543, "loss_rpn_cls": 0.006264761555939913, "loss_rpn_loc": 0.06929788365960121, "lr": 0.0025815875, "roi_head/num_bg_samples": 397.25, "roi_head/num_fg_samples": 114.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8460839750000559, "total_loss": 0.30213607591576874}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014871884000058344, "eta_seconds": 11637.040077188369, "fast_rcnn/cls_accuracy": 0.9736328125, "fast_rcnn/false_negative": 0.06561053240740741, "fast_rcnn/fg_cls_accuracy": 0.9343894675925926, "iteration": 639, "loss_box_reg": 0.11789693310856819, "loss_cls": 0.07285590097308159, "loss_rpn_cls": 0.0053652566857635975, "loss_rpn_loc": 0.05852055549621582, "lr": 0.0026648374999999995, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8505885125000532, "total_loss": 0.26677903556264937}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014161194500047714, "eta_seconds": 11606.65481794033, "fast_rcnn/cls_accuracy": 0.973388671875, "fast_rcnn/false_negative": 0.06114628335798224, "fast_rcnn/fg_cls_accuracy": 0.9388537166420178, "iteration": 659, "loss_box_reg": 0.11722910404205322, "loss_cls": 0.06616359204053879, "loss_rpn_cls": 0.0080324187874794, "loss_rpn_loc": 0.07135805487632751, "lr": 0.0027480875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8602919130003102, "total_loss": 0.2675582447554916}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014358993000314513, "eta_seconds": 11589.254840700332, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05121358797635958, "fast_rcnn/fg_cls_accuracy": 0.9487864120236404, "iteration": 679, "loss_box_reg": 0.10997515171766281, "loss_cls": 0.05781390517950058, "loss_rpn_cls": 0.004788712132722139, "loss_rpn_loc": 0.055166978389024734, "lr": 0.0028313374999999995, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.869146297000043, "total_loss": 0.23458211263641715}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012000708500181645, "eta_seconds": 11582.719539248686, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.0615234375, "fast_rcnn/fg_cls_accuracy": 0.9384765625, "iteration": 699, "loss_box_reg": 0.129492849111557, "loss_cls": 0.07111507281661034, "loss_rpn_cls": 0.004493537941016257, "loss_rpn_loc": 0.05584186688065529, "lr": 0.0029145875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8904892555001425, "total_loss": 0.27537386934272945}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0145140229997196, "eta_seconds": 11571.990401450112, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 719, "loss_box_reg": 0.11887574195861816, "loss_cls": 0.06795364245772362, "loss_rpn_cls": 0.0033925181487575173, "loss_rpn_loc": 0.055030809715390205, "lr": 0.0029978374999999995, "roi_head/num_bg_samples": 390.0, "roi_head/num_fg_samples": 122.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8808223520004503, "total_loss": 0.24797416175715625}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01307606799991845, "eta_seconds": 11554.56401729011, "fast_rcnn/cls_accuracy": 0.97412109375, "fast_rcnn/false_negative": 0.05908962111398963, "fast_rcnn/fg_cls_accuracy": 0.9409103788860104, "iteration": 739, "loss_box_reg": 0.1245066188275814, "loss_cls": 0.06823312118649483, "loss_rpn_cls": 0.004734032321721315, "loss_rpn_loc": 0.05789220705628395, "lr": 0.0030810875, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8724708105005448, "total_loss": 0.25583526177797467}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012447178500224254, "eta_seconds": 11532.523588208307, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.06630535710901822, "fast_rcnn/fg_cls_accuracy": 0.9336946428909818, "iteration": 759, "loss_box_reg": 0.11907549947500229, "loss_cls": 0.06540242955088615, "loss_rpn_cls": 0.0041093959007412195, "loss_rpn_loc": 0.06332714855670929, "lr": 0.0031643374999999994, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8468276620001234, "total_loss": 0.24481784249655902}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01187162200039893, "eta_seconds": 11519.711248970103, "fast_rcnn/cls_accuracy": 0.9765625, "fast_rcnn/false_negative": 0.0557175727739726, "fast_rcnn/fg_cls_accuracy": 0.9442824272260274, "iteration": 779, "loss_box_reg": 0.12456638365983963, "loss_cls": 0.061244869604706764, "loss_rpn_cls": 0.0037338774418458343, "loss_rpn_loc": 0.0596346165984869, "lr": 0.0032475875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8824129194995294, "total_loss": 0.25049503380432725}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012807592999706685, "eta_seconds": 11502.314342643522, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.05575284090909091, "fast_rcnn/fg_cls_accuracy": 0.9442471590909092, "iteration": 799, "loss_box_reg": 0.11877157166600227, "loss_cls": 0.06167830340564251, "loss_rpn_cls": 0.004014276899397373, "loss_rpn_loc": 0.055346591398119926, "lr": 0.0033308375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 174.125, "rpn/num_pos_anchors": 81.875, "time": 0.877514559500014, "total_loss": 0.25743075169157237}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015489027000057831, "eta_seconds": 11491.371008443351, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.054571472772277224, "fast_rcnn/fg_cls_accuracy": 0.9454285272277227, "iteration": 819, "loss_box_reg": 0.11021328344941139, "loss_cls": 0.05502988211810589, "loss_rpn_cls": 0.00427356525324285, "loss_rpn_loc": 0.07074590399861336, "lr": 0.0034140875, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 155.25, "rpn/num_pos_anchors": 100.75, "time": 0.8855874439996114, "total_loss": 0.2403978342190385}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01506244800020795, "eta_seconds": 11468.434556696986, "fast_rcnn/cls_accuracy": 0.975341796875, "fast_rcnn/false_negative": 0.05666498370181406, "fast_rcnn/fg_cls_accuracy": 0.943335016298186, "iteration": 839, "loss_box_reg": 0.11180135607719421, "loss_cls": 0.061304209753870964, "loss_rpn_cls": 0.004914319375529885, "loss_rpn_loc": 0.05708741024136543, "lr": 0.0034973375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8517343014996186, "total_loss": 0.23385070823132992}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013418384000033257, "eta_seconds": 11449.058482766935, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05544679449648712, "fast_rcnn/fg_cls_accuracy": 0.9445532055035128, "iteration": 859, "loss_box_reg": 0.11569477990269661, "loss_cls": 0.06229258514940739, "loss_rpn_cls": 0.0068636140786111355, "loss_rpn_loc": 0.0628298930823803, "lr": 0.0035805875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8614465094997286, "total_loss": 0.25518918549641967}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014103679000072589, "eta_seconds": 11433.578741616986, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 879, "loss_box_reg": 0.12260067090392113, "loss_cls": 0.06857239827513695, "loss_rpn_cls": 0.006648323964327574, "loss_rpn_loc": 0.07462092489004135, "lr": 0.0036638375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8772594430001845, "total_loss": 0.27113425778225064}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 88.2900801425749, "bbox/AP50": 98.81273878550125, "bbox/AP75": 98.7412826713019, "bbox/APl": 88.86570946975849, "bbox/APm": 87.34035917496533, "bbox/APs": NaN, "data_time": 0.02003246050026064, "eta_seconds": 11431.046205987095, "fast_rcnn/cls_accuracy": 0.9716796875, "fast_rcnn/false_negative": 0.0859375, "fast_rcnn/fg_cls_accuracy": 0.9140625, "iteration": 899, "loss_box_reg": 0.12612708657979965, "loss_cls": 0.07696450874209404, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.00522907474078238, "loss_rpn_loc": 0.05966793745756149, "lr": 0.0037470875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8938876710003569, "total_loss": 0.27521815593354404, "validation_loss": 0.27454329396213306}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01586997549975422, "eta_seconds": 11409.577102119452, "fast_rcnn/cls_accuracy": 0.975830078125, "fast_rcnn/false_negative": 0.05459741876310273, "fast_rcnn/fg_cls_accuracy": 0.9454025812368974, "iteration": 919, "loss_box_reg": 0.11372284591197968, "loss_cls": 0.0605704840272665, "loss_rpn_cls": 0.004562443122267723, "loss_rpn_loc": 0.05959376133978367, "lr": 0.0038303375000000002, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.875, "rpn/num_pos_anchors": 95.125, "time": 0.8720150914996339, "total_loss": 0.24228383065201342}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.010550028499892505, "eta_seconds": 11386.753413343344, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.04433528791056139, "fast_rcnn/fg_cls_accuracy": 0.9556647120894386, "iteration": 939, "loss_box_reg": 0.10631585493683815, "loss_cls": 0.05721595883369446, "loss_rpn_cls": 0.0026982673443853855, "loss_rpn_loc": 0.0547914057970047, "lr": 0.0039135875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.8540105269999003, "total_loss": 0.21563802321907133}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01612528400028168, "eta_seconds": 11371.228795083965, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.0498046875, "fast_rcnn/fg_cls_accuracy": 0.9501953125, "iteration": 959, "loss_box_reg": 0.1004297025501728, "loss_cls": 0.05342039093375206, "loss_rpn_cls": 0.00477422121912241, "loss_rpn_loc": 0.048561520874500275, "lr": 0.0039968375, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8844300150003619, "total_loss": 0.2256989327725023}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012863743500020064, "eta_seconds": 11351.880881643341, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04565972222222223, "fast_rcnn/fg_cls_accuracy": 0.9543402777777779, "iteration": 979, "loss_box_reg": 0.11157135292887688, "loss_cls": 0.04482796974480152, "loss_rpn_cls": 0.0065105147659778595, "loss_rpn_loc": 0.06633155420422554, "lr": 0.0040800875, "roi_head/num_bg_samples": 390.375, "roi_head/num_fg_samples": 121.625, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.8682084174997726, "total_loss": 0.23189347283914685}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01232722449958601, "eta_seconds": 11337.924521956742, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.060546875, "fast_rcnn/fg_cls_accuracy": 0.939453125, "iteration": 999, "loss_box_reg": 0.11941342800855637, "loss_cls": 0.0730251595377922, "loss_rpn_cls": 0.0052137651946395636, "loss_rpn_loc": 0.06160200759768486, "lr": 0.0041633375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8827806014996895, "total_loss": 0.25915474398061633}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013164806000077078, "eta_seconds": 11329.957124608949, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.05002973894032922, "fast_rcnn/fg_cls_accuracy": 0.9499702610596708, "iteration": 1019, "loss_box_reg": 0.1171100102365017, "loss_cls": 0.05176871083676815, "loss_rpn_cls": 0.003309119725599885, "loss_rpn_loc": 0.051280347630381584, "lr": 0.0042465875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8771893994999118, "total_loss": 0.2285827926825732}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013883824499771436, "eta_seconds": 11304.91008489949, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.05069182981927711, "fast_rcnn/fg_cls_accuracy": 0.9493081701807229, "iteration": 1039, "loss_box_reg": 0.11066009849309921, "loss_cls": 0.05315266735851765, "loss_rpn_cls": 0.006170068867504597, "loss_rpn_loc": 0.05377185717225075, "lr": 0.0043298375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.0, "rpn/num_pos_anchors": 94.0, "time": 0.8545718394998403, "total_loss": 0.23264297121204436}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015017880499726743, "eta_seconds": 11280.984392763408, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04588942560731704, "fast_rcnn/fg_cls_accuracy": 0.954110574392683, "iteration": 1059, "loss_box_reg": 0.10310346260666847, "loss_cls": 0.044577477499842644, "loss_rpn_cls": 0.004134953022003174, "loss_rpn_loc": 0.051423339173197746, "lr": 0.0044130875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8577394704998369, "total_loss": 0.2035250838380307}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016613606499959133, "eta_seconds": 11252.08472195471, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.045861783679624665, "fast_rcnn/fg_cls_accuracy": 0.9541382163203753, "iteration": 1079, "loss_box_reg": 0.11094773188233376, "loss_cls": 0.05111839435994625, "loss_rpn_cls": 0.003501012222841382, "loss_rpn_loc": 0.052145302295684814, "lr": 0.0044963375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.862094334500398, "total_loss": 0.22528961999341846}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016227953500219883, "eta_seconds": 11234.6679821947, "fast_rcnn/cls_accuracy": 0.981201171875, "fast_rcnn/false_negative": 0.04735054347826087, "fast_rcnn/fg_cls_accuracy": 0.9526494565217392, "iteration": 1099, "loss_box_reg": 0.1110970675945282, "loss_cls": 0.0483903419226408, "loss_rpn_cls": 0.0037894557463005185, "loss_rpn_loc": 0.05519515089690685, "lr": 0.0045795875, "roi_head/num_bg_samples": 395.0, "roi_head/num_fg_samples": 117.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8814690505000726, "total_loss": 0.23251396394334733}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0157821050001985, "eta_seconds": 11194.459053585524, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04696308210784314, "fast_rcnn/fg_cls_accuracy": 0.9530369178921569, "iteration": 1119, "loss_box_reg": 0.11347878724336624, "loss_cls": 0.05304034985601902, "loss_rpn_cls": 0.0026472604367882013, "loss_rpn_loc": 0.05065883509814739, "lr": 0.0046628375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8446180029995958, "total_loss": 0.22228291805367917}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012794290499641647, "eta_seconds": 11174.544137118066, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04151621586134454, "fast_rcnn/fg_cls_accuracy": 0.9584837841386555, "iteration": 1139, "loss_box_reg": 0.11042098328471184, "loss_cls": 0.04875275492668152, "loss_rpn_cls": 0.0053986890707165, "loss_rpn_loc": 0.06635331735014915, "lr": 0.0047460875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8467612080003164, "total_loss": 0.24455570348072797}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014960789500037208, "eta_seconds": 11151.432648201459, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.0493672888326479, "fast_rcnn/fg_cls_accuracy": 0.950632711167352, "iteration": 1159, "loss_box_reg": 0.10223600640892982, "loss_cls": 0.05007513798773289, "loss_rpn_cls": 0.004917986923828721, "loss_rpn_loc": 0.07119227945804596, "lr": 0.0048293375, "roi_head/num_bg_samples": 393.875, "roi_head/num_fg_samples": 118.125, "rpn/num_neg_anchors": 169.75, "rpn/num_pos_anchors": 86.25, "time": 0.8591569790005451, "total_loss": 0.23316936113405973}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011912658499568352, "eta_seconds": 11133.44586255851, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.05077235193621868, "fast_rcnn/fg_cls_accuracy": 0.9492276480637813, "iteration": 1179, "loss_box_reg": 0.11368173360824585, "loss_cls": 0.05308356508612633, "loss_rpn_cls": 0.005349044920876622, "loss_rpn_loc": 0.06201360747218132, "lr": 0.0049125875, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8698166265003238, "total_loss": 0.23130762414075434}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 89.9372115855734, "bbox/AP50": 98.94397005781644, "bbox/AP75": 98.90289638087187, "bbox/APl": 90.72880288503814, "bbox/APm": 88.3051693765623, "bbox/APs": NaN, "data_time": 0.014878246000080253, "eta_seconds": 11116.078346978511, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.0703125, "fast_rcnn/fg_cls_accuracy": 0.9296875, "iteration": 1199, "loss_box_reg": 0.11325424909591675, "loss_cls": 0.04710954613983631, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0042733787558972836, "loss_rpn_loc": 0.06012917682528496, "lr": 0.0049958375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8741366975000346, "total_loss": 0.23101549898274243, "validation_loss": 0.22204631070859254}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013528545000099257, "eta_seconds": 11099.301888740878, "fast_rcnn/cls_accuracy": 0.980224609375, "fast_rcnn/false_negative": 0.046103560216894976, "fast_rcnn/fg_cls_accuracy": 0.953896439783105, "iteration": 1219, "loss_box_reg": 0.12120898813009262, "loss_cls": 0.05126929096877575, "loss_rpn_cls": 0.0038727218052372336, "loss_rpn_loc": 0.05043528042733669, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8828641514996889, "total_loss": 0.23491605871822685}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011044496000067738, "eta_seconds": 11073.083311939141, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1239, "loss_box_reg": 0.11235003918409348, "loss_cls": 0.046691738069057465, "loss_rpn_cls": 0.006056502927094698, "loss_rpn_loc": 0.053873563185334206, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8184038200001851, "total_loss": 0.23004397260956466}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015318163000301865, "eta_seconds": 11057.887156648141, "fast_rcnn/cls_accuracy": 0.98095703125, "fast_rcnn/false_negative": 0.04580158118560379, "fast_rcnn/fg_cls_accuracy": 0.9541984188143962, "iteration": 1259, "loss_box_reg": 0.10087935626506805, "loss_cls": 0.047167083248496056, "loss_rpn_cls": 0.004879459505900741, "loss_rpn_loc": 0.04768846556544304, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8561628545003259, "total_loss": 0.202470017131418}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014270402500187629, "eta_seconds": 11023.213576958839, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.052734375, "fast_rcnn/fg_cls_accuracy": 0.947265625, "iteration": 1279, "loss_box_reg": 0.1078275665640831, "loss_cls": 0.055708736181259155, "loss_rpn_cls": 0.004326054826378822, "loss_rpn_loc": 0.051015861332416534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8413463045003482, "total_loss": 0.23464090866036713}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013100360500175157, "eta_seconds": 11008.474875399741, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.047925034286833854, "fast_rcnn/fg_cls_accuracy": 0.9520749657131662, "iteration": 1299, "loss_box_reg": 0.09658817201852798, "loss_cls": 0.04709094204008579, "loss_rpn_cls": 0.0040003720205277205, "loss_rpn_loc": 0.061722202226519585, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8807059354999183, "total_loss": 0.22329395404085517}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015239898999880097, "eta_seconds": 11003.665032419109, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.03966547818791946, "fast_rcnn/fg_cls_accuracy": 0.9603345218120805, "iteration": 1319, "loss_box_reg": 0.10543150082230568, "loss_cls": 0.047363804653286934, "loss_rpn_cls": 0.006104244850575924, "loss_rpn_loc": 0.05552547238767147, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8904177599997638, "total_loss": 0.22847025434020907}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011903596499450941, "eta_seconds": 10975.392692321862, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.036201565026496865, "fast_rcnn/fg_cls_accuracy": 0.9637984349735031, "iteration": 1339, "loss_box_reg": 0.10207298025488853, "loss_cls": 0.03664606809616089, "loss_rpn_cls": 0.006632389267906547, "loss_rpn_loc": 0.047756388783454895, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.845586510999965, "total_loss": 0.1987403016537428}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012518932499915536, "eta_seconds": 10967.293575872216, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.036218475877192985, "fast_rcnn/fg_cls_accuracy": 0.963781524122807, "iteration": 1359, "loss_box_reg": 0.09389247000217438, "loss_cls": 0.03725110925734043, "loss_rpn_cls": 0.0026225635083392262, "loss_rpn_loc": 0.04946193844079971, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8703024129999903, "total_loss": 0.1872705266578123}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014252139999825886, "eta_seconds": 10949.941636032216, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.0381825206043956, "fast_rcnn/fg_cls_accuracy": 0.9618174793956045, "iteration": 1379, "loss_box_reg": 0.09005808085203171, "loss_cls": 0.04361296631395817, "loss_rpn_cls": 0.0031876161228865385, "loss_rpn_loc": 0.04760141670703888, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8653196120003486, "total_loss": 0.18320670002140105}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015607826999712415, "eta_seconds": 10936.381450508063, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04292900291705905, "fast_rcnn/fg_cls_accuracy": 0.957070997082941, "iteration": 1399, "loss_box_reg": 0.1026579923927784, "loss_cls": 0.040452633053064346, "loss_rpn_cls": 0.004050533752888441, "loss_rpn_loc": 0.050027329474687576, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 167.25, "rpn/num_pos_anchors": 88.75, "time": 0.8649475590000293, "total_loss": 0.21095226804027334}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012343008500465658, "eta_seconds": 10926.268840053872, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04167183366402116, "fast_rcnn/fg_cls_accuracy": 0.9583281663359788, "iteration": 1419, "loss_box_reg": 0.09014065191149712, "loss_cls": 0.042981088161468506, "loss_rpn_cls": 0.00645520631223917, "loss_rpn_loc": 0.06759355217218399, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8950779309998325, "total_loss": 0.22137367050163448}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012359693500002322, "eta_seconds": 10914.622519983426, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.03675857099514563, "fast_rcnn/fg_cls_accuracy": 0.9632414290048543, "iteration": 1439, "loss_box_reg": 0.08957243710756302, "loss_cls": 0.04217042587697506, "loss_rpn_cls": 0.007140532601624727, "loss_rpn_loc": 0.08009770512580872, "lr": 0.005, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8714704600001824, "total_loss": 0.22934484714642167}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012483622500440106, "eta_seconds": 10896.652974460563, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 1459, "loss_box_reg": 0.0861663743853569, "loss_cls": 0.03933589160442352, "loss_rpn_cls": 0.00711781601421535, "loss_rpn_loc": 0.07167446613311768, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8673060529995382, "total_loss": 0.20666937343776226}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014326036999591452, "eta_seconds": 10887.697147058661, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.07186511075949367, "fast_rcnn/fg_cls_accuracy": 0.9281348892405064, "iteration": 1479, "loss_box_reg": 0.11860571056604385, "loss_cls": 0.07213868945837021, "loss_rpn_cls": 0.008405119646340609, "loss_rpn_loc": 0.059620652347803116, "lr": 0.005, "roi_head/num_bg_samples": 401.25, "roi_head/num_fg_samples": 110.75, "rpn/num_neg_anchors": 175.0, "rpn/num_pos_anchors": 81.0, "time": 0.897518780000155, "total_loss": 0.28046197770163417}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 90.47100649648208, "bbox/AP50": 98.89818218763597, "bbox/AP75": 98.83786673282349, "bbox/APl": 90.98252513947219, "bbox/APm": 89.65274891712926, "bbox/APs": NaN, "data_time": 0.014468831499925727, "eta_seconds": 10880.330544314034, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.05078125, "fast_rcnn/fg_cls_accuracy": 0.94921875, "iteration": 1499, "loss_box_reg": 0.11426327377557755, "loss_cls": 0.051829954609274864, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.00704673957079649, "loss_rpn_loc": 0.08483739569783211, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.898153683000146, "total_loss": 0.25268610194325447, "validation_loss": 0.24073816174583876}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013221118500041484, "eta_seconds": 10867.58767004412, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04463252314814815, "fast_rcnn/fg_cls_accuracy": 0.9553674768518519, "iteration": 1519, "loss_box_reg": 0.1030765026807785, "loss_cls": 0.05443604104220867, "loss_rpn_cls": 0.007032011868432164, "loss_rpn_loc": 0.07387308403849602, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8726468634999947, "total_loss": 0.244771410478279}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015136590000565775, "eta_seconds": 10837.571910697727, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.04780190677966102, "fast_rcnn/fg_cls_accuracy": 0.952198093220339, "iteration": 1539, "loss_box_reg": 0.1154186986386776, "loss_cls": 0.05130871944129467, "loss_rpn_cls": 0.005730348872020841, "loss_rpn_loc": 0.06487315893173218, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8529182040001615, "total_loss": 0.23767815972678363}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014879302499593905, "eta_seconds": 10806.879806792327, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.049944196428571425, "fast_rcnn/fg_cls_accuracy": 0.9500558035714286, "iteration": 1559, "loss_box_reg": 0.10610762983560562, "loss_cls": 0.048841025680303574, "loss_rpn_cls": 0.00505010224878788, "loss_rpn_loc": 0.047558898106217384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.8628834279998046, "total_loss": 0.21762098465114832}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01316807399962272, "eta_seconds": 10794.525714710453, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.039278372332063605, "fast_rcnn/fg_cls_accuracy": 0.9607216276679363, "iteration": 1579, "loss_box_reg": 0.09529298916459084, "loss_cls": 0.047681115567684174, "loss_rpn_cls": 0.005185154965147376, "loss_rpn_loc": 0.04409233666956425, "lr": 0.005, "roi_head/num_bg_samples": 398.75, "roi_head/num_fg_samples": 113.25, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8907098810000207, "total_loss": 0.19659643550403416}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013807994499984488, "eta_seconds": 10777.144625080455, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.04536732456140351, "fast_rcnn/fg_cls_accuracy": 0.9546326754385965, "iteration": 1599, "loss_box_reg": 0.10481703281402588, "loss_cls": 0.04726100340485573, "loss_rpn_cls": 0.005707225529477, "loss_rpn_loc": 0.0522367749363184, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8495490139998765, "total_loss": 0.21333862002938986}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012579137000102492, "eta_seconds": 10762.580968191138, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1619, "loss_box_reg": 0.09973128139972687, "loss_cls": 0.040857817977666855, "loss_rpn_cls": 0.0033710956340655684, "loss_rpn_loc": 0.04723631218075752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8383417874997576, "total_loss": 0.20998939604032785}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012796253500255261, "eta_seconds": 10745.19532734114, "fast_rcnn/cls_accuracy": 0.983154296875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1639, "loss_box_reg": 0.09802206978201866, "loss_cls": 0.043301988393068314, "loss_rpn_cls": 0.004532157443463802, "loss_rpn_loc": 0.05338606610894203, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8678041269995447, "total_loss": 0.20312127005308867}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013821255500261032, "eta_seconds": 10735.521867402167, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04389311316815145, "fast_rcnn/fg_cls_accuracy": 0.9561068868318485, "iteration": 1659, "loss_box_reg": 0.09773008897900581, "loss_cls": 0.04519974626600742, "loss_rpn_cls": 0.004526508506387472, "loss_rpn_loc": 0.05140480026602745, "lr": 0.005, "roi_head/num_bg_samples": 396.75, "roi_head/num_fg_samples": 115.25, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.882670835999761, "total_loss": 0.20179360220208764}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01438021400008438, "eta_seconds": 10728.270786204119, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04066910282258064, "fast_rcnn/fg_cls_accuracy": 0.9593308971774194, "iteration": 1679, "loss_box_reg": 0.10078854858875275, "loss_cls": 0.050304073840379715, "loss_rpn_cls": 0.003972385311499238, "loss_rpn_loc": 0.05783495306968689, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.375, "rpn/num_pos_anchors": 92.625, "time": 0.8868689450000602, "total_loss": 0.21955888194497675}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015314830000079382, "eta_seconds": 10708.488811374478, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.03443205758426966, "fast_rcnn/fg_cls_accuracy": 0.9655679424157304, "iteration": 1699, "loss_box_reg": 0.08642548322677612, "loss_cls": 0.0424218624830246, "loss_rpn_cls": 0.004494124790653586, "loss_rpn_loc": 0.050324076786637306, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8947804085000826, "total_loss": 0.1852857698686421}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014327528499961772, "eta_seconds": 10683.327449442186, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1719, "loss_box_reg": 0.09392394125461578, "loss_cls": 0.040925584733486176, "loss_rpn_cls": 0.004295801743865013, "loss_rpn_loc": 0.051177412271499634, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8841799534998245, "total_loss": 0.19225792540237308}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014464311000210728, "eta_seconds": 10665.929310122192, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1739, "loss_box_reg": 0.10429317876696587, "loss_cls": 0.03850865736603737, "loss_rpn_cls": 0.004676738753914833, "loss_rpn_loc": 0.06099403649568558, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8719341980004174, "total_loss": 0.2191669741878286}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016681402000358503, "eta_seconds": 10658.612344284118, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.04427876650098872, "fast_rcnn/fg_cls_accuracy": 0.9557212334990113, "iteration": 1759, "loss_box_reg": 0.10086190328001976, "loss_cls": 0.041055068373680115, "loss_rpn_cls": 0.0038329382659867406, "loss_rpn_loc": 0.051342034712433815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8841451134999261, "total_loss": 0.19593067455571145}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014048279500457284, "eta_seconds": 10631.133031482204, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.03769699739194401, "fast_rcnn/fg_cls_accuracy": 0.962303002608056, "iteration": 1779, "loss_box_reg": 0.09833024814724922, "loss_cls": 0.04401624575257301, "loss_rpn_cls": 0.004325072979554534, "loss_rpn_loc": 0.06082310900092125, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.862232074000076, "total_loss": 0.21781846298836172}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 92.21388393069454, "bbox/AP50": 98.9582735663117, "bbox/AP75": 98.91922274208812, "bbox/APl": 92.76017734503245, "bbox/APm": 91.06707513844079, "bbox/APs": NaN, "data_time": 0.013798876500004553, "eta_seconds": 10612.28939699241, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 1799, "loss_box_reg": 0.08888481557369232, "loss_cls": 0.04587249644100666, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004532726481556892, "loss_rpn_loc": 0.04718616604804993, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8685472174997813, "total_loss": 0.18515282846055925, "validation_loss": 0.19486001614312065}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01440209100019274, "eta_seconds": 10588.782066193326, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.041015625, "fast_rcnn/fg_cls_accuracy": 0.958984375, "iteration": 1819, "loss_box_reg": 0.09320377558469772, "loss_cls": 0.04454539343714714, "loss_rpn_cls": 0.0031231624307110906, "loss_rpn_loc": 0.04289261996746063, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.878915322499779, "total_loss": 0.1927729855524376}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015858857000239368, "eta_seconds": 10577.49785729241, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0414482792721519, "fast_rcnn/fg_cls_accuracy": 0.9585517207278481, "iteration": 1839, "loss_box_reg": 0.09988433122634888, "loss_cls": 0.045475441962480545, "loss_rpn_cls": 0.0023602014407515526, "loss_rpn_loc": 0.04580887593328953, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8694505869998466, "total_loss": 0.19530457153450698}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011982069999703526, "eta_seconds": 10559.85364616426, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03892780172413793, "fast_rcnn/fg_cls_accuracy": 0.9610721982758621, "iteration": 1859, "loss_box_reg": 0.09175437316298485, "loss_cls": 0.037718771025538445, "loss_rpn_cls": 0.003915468696504831, "loss_rpn_loc": 0.045753927901387215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8600529149998692, "total_loss": 0.1927445613546297}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013541940000322938, "eta_seconds": 10536.624860383326, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0322265625, "fast_rcnn/fg_cls_accuracy": 0.9677734375, "iteration": 1879, "loss_box_reg": 0.09368035569787025, "loss_cls": 0.03680916503071785, "loss_rpn_cls": 0.004152178764343262, "loss_rpn_loc": 0.051723018288612366, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8636904879999747, "total_loss": 0.1892381781945005}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015167849000135902, "eta_seconds": 10505.653435268032, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380859375, "fast_rcnn/fg_cls_accuracy": 0.9619140625, "iteration": 1899, "loss_box_reg": 0.07685903087258339, "loss_cls": 0.03890354372560978, "loss_rpn_cls": 0.004574333317577839, "loss_rpn_loc": 0.046656785532832146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8658116014998996, "total_loss": 0.17074766720179468}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013550288500027818, "eta_seconds": 10490.1415308359, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03149801587301587, "fast_rcnn/fg_cls_accuracy": 0.9685019841269842, "iteration": 1919, "loss_box_reg": 0.084226094186306, "loss_cls": 0.03763917088508606, "loss_rpn_cls": 0.0033376823412254453, "loss_rpn_loc": 0.039989013224840164, "lr": 0.005, "roi_head/num_bg_samples": 387.875, "roi_head/num_fg_samples": 124.125, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8777504735003276, "total_loss": 0.1695472338469699}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013637017000291962, "eta_seconds": 10481.158423730092, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.033308006414081145, "fast_rcnn/fg_cls_accuracy": 0.9666919935859188, "iteration": 1939, "loss_box_reg": 0.09387752041220665, "loss_cls": 0.03691721335053444, "loss_rpn_cls": 0.00305631710216403, "loss_rpn_loc": 0.039622073993086815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.625, "rpn/num_pos_anchors": 84.375, "time": 0.8821017150003172, "total_loss": 0.16561688063666224}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01566228149977178, "eta_seconds": 10459.628094786585, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029418103448275862, "fast_rcnn/fg_cls_accuracy": 0.9705818965517241, "iteration": 1959, "loss_box_reg": 0.0838717557489872, "loss_cls": 0.03551844134926796, "loss_rpn_cls": 0.0031498116441071033, "loss_rpn_loc": 0.04677033796906471, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8585874375003186, "total_loss": 0.17996928666252643}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012967388999641116, "eta_seconds": 10442.254740256585, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03389473684210526, "fast_rcnn/fg_cls_accuracy": 0.9661052631578948, "iteration": 1979, "loss_box_reg": 0.08219883218407631, "loss_cls": 0.03881074674427509, "loss_rpn_cls": 0.004102814942598343, "loss_rpn_loc": 0.053613780066370964, "lr": 0.005, "roi_head/num_bg_samples": 397.125, "roi_head/num_fg_samples": 114.875, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8684652934998667, "total_loss": 0.1922797355800867}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013859366499673342, "eta_seconds": 10416.72865039066, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 1999, "loss_box_reg": 0.09208154305815697, "loss_cls": 0.03729891777038574, "loss_rpn_cls": 0.004324637353420258, "loss_rpn_loc": 0.049532048404216766, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8454489969999486, "total_loss": 0.18912802496924996}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013589772499926767, "eta_seconds": 10401.473746628071, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380501003440367, "fast_rcnn/fg_cls_accuracy": 0.9619498996559632, "iteration": 2019, "loss_box_reg": 0.08173145353794098, "loss_cls": 0.0348515585064888, "loss_rpn_cls": 0.0032774244900792837, "loss_rpn_loc": 0.04606715030968189, "lr": 0.005, "roi_head/num_bg_samples": 396.5, "roi_head/num_fg_samples": 115.5, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8827293745002862, "total_loss": 0.17900166858453304}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016258499000286974, "eta_seconds": 10383.14835822894, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03491323851583962, "fast_rcnn/fg_cls_accuracy": 0.9650867614841604, "iteration": 2039, "loss_box_reg": 0.09229341149330139, "loss_cls": 0.037404755130410194, "loss_rpn_cls": 0.0030006606830284, "loss_rpn_loc": 0.04984702169895172, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.863546210000095, "total_loss": 0.18486582313198596}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01584853300028044, "eta_seconds": 10369.857802306824, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037252784178187406, "fast_rcnn/fg_cls_accuracy": 0.9627472158218127, "iteration": 2059, "loss_box_reg": 0.09000474214553833, "loss_cls": 0.03899835981428623, "loss_rpn_cls": 0.0031731631606817245, "loss_rpn_loc": 0.047395261004567146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8975476909999998, "total_loss": 0.1849419007776305}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01302835349997622, "eta_seconds": 10358.225833181914, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0361328125, "fast_rcnn/fg_cls_accuracy": 0.9638671875, "iteration": 2079, "loss_box_reg": 0.08724486455321312, "loss_cls": 0.045973993837833405, "loss_rpn_cls": 0.0030110322404652834, "loss_rpn_loc": 0.03779111988842487, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.8679554685004405, "total_loss": 0.19020180380903184}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 89.90068357647002, "bbox/AP50": 98.90752019335251, "bbox/AP75": 98.90147705938551, "bbox/APl": 90.23938380754622, "bbox/APm": 88.88386901962771, "bbox/APs": NaN, "data_time": 0.013675101999979233, "eta_seconds": 10341.815137924052, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2099, "loss_box_reg": 0.0884990505874157, "loss_cls": 0.04107754863798618, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.003416641498915851, "loss_rpn_loc": 0.06242932006716728, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8932269239999187, "total_loss": 0.19365975121036172, "validation_loss": 0.19123022244832846}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0136575635006011, "eta_seconds": 10324.176337227254, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.038356667698019806, "fast_rcnn/fg_cls_accuracy": 0.9616433323019802, "iteration": 2119, "loss_box_reg": 0.08040068298578262, "loss_cls": 0.038239989429712296, "loss_rpn_cls": 0.003759029903449118, "loss_rpn_loc": 0.045844390988349915, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8485069829998793, "total_loss": 0.17594775510951877}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01224396199995681, "eta_seconds": 10307.610909986604, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03441750101279009, "fast_rcnn/fg_cls_accuracy": 0.9655824989872099, "iteration": 2139, "loss_box_reg": 0.09104080125689507, "loss_cls": 0.03530845418572426, "loss_rpn_cls": 0.0037917372537776828, "loss_rpn_loc": 0.037452591583132744, "lr": 0.005, "roi_head/num_bg_samples": 392.625, "roi_head/num_fg_samples": 119.375, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8768745459997263, "total_loss": 0.17403553624171764}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013991559500027506, "eta_seconds": 10297.328521033947, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.034357063506758004, "fast_rcnn/fg_cls_accuracy": 0.965642936493242, "iteration": 2159, "loss_box_reg": 0.08362606540322304, "loss_cls": 0.03820972703397274, "loss_rpn_cls": 0.0028603734681382775, "loss_rpn_loc": 0.038150036707520485, "lr": 0.005, "roi_head/num_bg_samples": 391.25, "roi_head/num_fg_samples": 120.75, "rpn/num_neg_anchors": 170.125, "rpn/num_pos_anchors": 85.875, "time": 0.8841141164998589, "total_loss": 0.16322252247482538}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013330730500001664, "eta_seconds": 10272.849554586599, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.03048554157239819, "fast_rcnn/fg_cls_accuracy": 0.9695144584276019, "iteration": 2179, "loss_box_reg": 0.09114638343453407, "loss_cls": 0.03680109232664108, "loss_rpn_cls": 0.002896717400290072, "loss_rpn_loc": 0.04303932003676891, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8548102505001225, "total_loss": 0.1797549540642649}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011985454500518244, "eta_seconds": 10255.468876886596, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.03245170659221902, "fast_rcnn/fg_cls_accuracy": 0.967548293407781, "iteration": 2199, "loss_box_reg": 0.09328019246459007, "loss_cls": 0.039469512179493904, "loss_rpn_cls": 0.0030301783699542284, "loss_rpn_loc": 0.042535314336419106, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.875668800999847, "total_loss": 0.18828994838986546}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013756813499639975, "eta_seconds": 10236.74518285594, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2219, "loss_box_reg": 0.08324635773897171, "loss_cls": 0.03644854947924614, "loss_rpn_cls": 0.003077507601119578, "loss_rpn_loc": 0.04696730896830559, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 151.5, "rpn/num_pos_anchors": 104.5, "time": 0.8660500474998116, "total_loss": 0.17756581807043403}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012775122499988356, "eta_seconds": 10229.34179495411, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.036272321428571425, "fast_rcnn/fg_cls_accuracy": 0.9637276785714286, "iteration": 2239, "loss_box_reg": 0.08963338658213615, "loss_cls": 0.041584597900509834, "loss_rpn_cls": 0.003160484484396875, "loss_rpn_loc": 0.04723039269447327, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8688699244999043, "total_loss": 0.1874701443593949}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015097248999609292, "eta_seconds": 10217.529332700633, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2259, "loss_box_reg": 0.07312063500285149, "loss_cls": 0.03746681474149227, "loss_rpn_cls": 0.0033478353871032596, "loss_rpn_loc": 0.04146379791200161, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.875, "rpn/num_pos_anchors": 86.125, "time": 0.877857135999875, "total_loss": 0.16872154723387212}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.018694472999868594, "eta_seconds": 10209.779635761235, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 2279, "loss_box_reg": 0.08895870670676231, "loss_cls": 0.029577581211924553, "loss_rpn_cls": 0.00313483620993793, "loss_rpn_loc": 0.04437120631337166, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.875047160500344, "total_loss": 0.1661791643127799}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014058729499993206, "eta_seconds": 10192.35829008124, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2299, "loss_box_reg": 0.0840831771492958, "loss_cls": 0.03785872086882591, "loss_rpn_cls": 0.003355022519826889, "loss_rpn_loc": 0.048520974814891815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8901794160001373, "total_loss": 0.18029032868798822}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014900668499649328, "eta_seconds": 10169.059123611969, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2319, "loss_box_reg": 0.08981714025139809, "loss_cls": 0.034265389665961266, "loss_rpn_cls": 0.0031644627451896667, "loss_rpn_loc": 0.03894554451107979, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.0, "rpn/num_pos_anchors": 101.0, "time": 0.8586659924999367, "total_loss": 0.17702865693718195}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0162080194995724, "eta_seconds": 10151.647841831964, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2339, "loss_box_reg": 0.08361848816275597, "loss_cls": 0.0330031830817461, "loss_rpn_cls": 0.002660089638084173, "loss_rpn_loc": 0.036235157400369644, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8543626634996144, "total_loss": 0.15929806616622955}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01537236500007566, "eta_seconds": 10130.504979300576, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029702746350488786, "fast_rcnn/fg_cls_accuracy": 0.9702972536495111, "iteration": 2359, "loss_box_reg": 0.07438933849334717, "loss_cls": 0.03239784575998783, "loss_rpn_cls": 0.0028395807603374124, "loss_rpn_loc": 0.03916883282363415, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8654807150005581, "total_loss": 0.15443656395655125}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013455614000122296, "eta_seconds": 10113.100108620565, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 2379, "loss_box_reg": 0.07959544658660889, "loss_cls": 0.03229916840791702, "loss_rpn_cls": 0.0025239757960662246, "loss_rpn_loc": 0.038064660504460335, "lr": 0.005, "roi_head/num_bg_samples": 388.375, "roi_head/num_fg_samples": 123.625, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8699438974995246, "total_loss": 0.15723116433946416}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 90.38046983259721, "bbox/AP50": 98.95554647930321, "bbox/AP75": 98.93429029294731, "bbox/APl": 90.51305711164808, "bbox/APm": 90.37498846524267, "bbox/APs": NaN, "data_time": 0.014254079500460648, "eta_seconds": 10102.240359718868, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 2399, "loss_box_reg": 0.07846162468194962, "loss_cls": 0.03271058388054371, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002632420277222991, "loss_rpn_loc": 0.04105196334421635, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8823002785002245, "total_loss": 0.15162402321584523, "validation_loss": 0.18059760322568635}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013223844500316773, "eta_seconds": 10082.002714711944, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02970393912825651, "fast_rcnn/fg_cls_accuracy": 0.9702960608717435, "iteration": 2419, "loss_box_reg": 0.07463748008012772, "loss_cls": 0.03062492609024048, "loss_rpn_cls": 0.003003168385475874, "loss_rpn_loc": 0.04139695316553116, "lr": 0.005, "roi_head/num_bg_samples": 395.875, "roi_head/num_fg_samples": 116.125, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8846325539998361, "total_loss": 0.15889020101167262}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01342617850013994, "eta_seconds": 10058.791759012625, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03232062055591467, "fast_rcnn/fg_cls_accuracy": 0.9676793794440853, "iteration": 2439, "loss_box_reg": 0.08237595111131668, "loss_cls": 0.03586164303123951, "loss_rpn_cls": 0.0030923092272132635, "loss_rpn_loc": 0.04343203827738762, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8559531569999308, "total_loss": 0.1755513409152627}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014425377000407025, "eta_seconds": 10049.991896518874, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02795220690133038, "fast_rcnn/fg_cls_accuracy": 0.9720477930986696, "iteration": 2459, "loss_box_reg": 0.07967670261859894, "loss_cls": 0.03273317776620388, "loss_rpn_cls": 0.003336146706715226, "loss_rpn_loc": 0.052099425345659256, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8797186050005621, "total_loss": 0.17592523363418877}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013915394999912678, "eta_seconds": 10023.989261792618, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03218129139072848, "fast_rcnn/fg_cls_accuracy": 0.9678187086092715, "iteration": 2479, "loss_box_reg": 0.08192437514662743, "loss_cls": 0.033937135711312294, "loss_rpn_cls": 0.003456542850472033, "loss_rpn_loc": 0.04651975259184837, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8666510749999361, "total_loss": 0.1762359922286123}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.010985515999891504, "eta_seconds": 9994.220309323966, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2499, "loss_box_reg": 0.08062322810292244, "loss_cls": 0.0348933469504118, "loss_rpn_cls": 0.0027861351845785975, "loss_rpn_loc": 0.038825834169983864, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8623936889998731, "total_loss": 0.16029999474994838}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012925224999435159, "eta_seconds": 9975.52187745336, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03711904393564357, "fast_rcnn/fg_cls_accuracy": 0.9628809560643564, "iteration": 2519, "loss_box_reg": 0.08054154366254807, "loss_cls": 0.03537464700639248, "loss_rpn_cls": 0.0020838259952142835, "loss_rpn_loc": 0.03704572282731533, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.0, "rpn/num_pos_anchors": 92.0, "time": 0.8709305714996844, "total_loss": 0.1565095882397145}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014001295999605645, "eta_seconds": 9970.222825800769, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024819186681222707, "fast_rcnn/fg_cls_accuracy": 0.9751808133187774, "iteration": 2539, "loss_box_reg": 0.0694175660610199, "loss_cls": 0.028812485747039318, "loss_rpn_cls": 0.002306518144905567, "loss_rpn_loc": 0.034660546109080315, "lr": 0.005, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.9114369695003006, "total_loss": 0.14976061368361115}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015146330999868951, "eta_seconds": 9964.491298234194, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2559, "loss_box_reg": 0.07692543789744377, "loss_cls": 0.031828004866838455, "loss_rpn_cls": 0.003076101769693196, "loss_rpn_loc": 0.039611104875802994, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.882002274000115, "total_loss": 0.15674148977268487}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014400603499780118, "eta_seconds": 9936.9830187426, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029522579376430207, "fast_rcnn/fg_cls_accuracy": 0.9704774206235698, "iteration": 2579, "loss_box_reg": 0.07119812443852425, "loss_cls": 0.03264463320374489, "loss_rpn_cls": 0.0027976155979558825, "loss_rpn_loc": 0.0388930719345808, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8642328930000076, "total_loss": 0.15167312882840633}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011450261000391038, "eta_seconds": 9935.233353661648, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.032523878905617615, "fast_rcnn/fg_cls_accuracy": 0.9674761210943823, "iteration": 2599, "loss_box_reg": 0.06924661248922348, "loss_cls": 0.028150435537099838, "loss_rpn_cls": 0.0023369272239506245, "loss_rpn_loc": 0.03825339488685131, "lr": 0.005, "roi_head/num_bg_samples": 396.125, "roi_head/num_fg_samples": 115.875, "rpn/num_neg_anchors": 174.625, "rpn/num_pos_anchors": 81.375, "time": 0.8899173999998311, "total_loss": 0.14393403416033834}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015590758999678656, "eta_seconds": 9929.062597158703, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02809597523219814, "fast_rcnn/fg_cls_accuracy": 0.9719040247678019, "iteration": 2619, "loss_box_reg": 0.07244919240474701, "loss_cls": 0.030225475318729877, "loss_rpn_cls": 0.0027918906416743994, "loss_rpn_loc": 0.03854382783174515, "lr": 0.005, "roi_head/num_bg_samples": 384.25, "roi_head/num_fg_samples": 127.75, "rpn/num_neg_anchors": 164.375, "rpn/num_pos_anchors": 91.625, "time": 0.9016381179999371, "total_loss": 0.1531053998041898}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014583123999727832, "eta_seconds": 9908.669780157361, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.029799952651515152, "fast_rcnn/fg_cls_accuracy": 0.9702000473484849, "iteration": 2639, "loss_box_reg": 0.08254137635231018, "loss_cls": 0.03172833938151598, "loss_rpn_cls": 0.0028717368841171265, "loss_rpn_loc": 0.04374443367123604, "lr": 0.005, "roi_head/num_bg_samples": 397.0, "roi_head/num_fg_samples": 115.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8593994910002039, "total_loss": 0.16603078274056315}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011498301999836258, "eta_seconds": 9894.165619398722, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.026568700396825396, "fast_rcnn/fg_cls_accuracy": 0.9734312996031746, "iteration": 2659, "loss_box_reg": 0.07682507485151291, "loss_cls": 0.029614977538585663, "loss_rpn_cls": 0.002964502782560885, "loss_rpn_loc": 0.03749946877360344, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8888799219998873, "total_loss": 0.1592754531884566}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013297670999691036, "eta_seconds": 9873.78316883738, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2679, "loss_box_reg": 0.07238440215587616, "loss_cls": 0.0355693232268095, "loss_rpn_cls": 0.0026111083570867777, "loss_rpn_loc": 0.0347738191485405, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.877020037499733, "total_loss": 0.16674690548097715}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 92.9240043828716, "bbox/AP50": 98.92929606072012, "bbox/AP75": 98.92799052796131, "bbox/APl": 93.68590994988891, "bbox/APm": 91.26409846273341, "bbox/APs": NaN, "data_time": 0.012849886500134744, "eta_seconds": 9856.122737068548, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 2699, "loss_box_reg": 0.0671813078224659, "loss_cls": 0.031869376078248024, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0031945809023454785, "loss_rpn_loc": 0.036566296592354774, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8767406539996045, "total_loss": 0.14776976208668202, "validation_loss": 0.15299182322134222}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011506692000239127, "eta_seconds": 9834.512868088885, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02899722337196468, "fast_rcnn/fg_cls_accuracy": 0.9710027766280354, "iteration": 2719, "loss_box_reg": 0.07861164957284927, "loss_cls": 0.030141491442918777, "loss_rpn_cls": 0.0024106288328766823, "loss_rpn_loc": 0.03943100944161415, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8650525944999572, "total_loss": 0.1521670074434951}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01285303099984958, "eta_seconds": 9817.077334238891, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02957381063432836, "fast_rcnn/fg_cls_accuracy": 0.9704261893656716, "iteration": 2739, "loss_box_reg": 0.06671890988945961, "loss_cls": 0.03127466607838869, "loss_rpn_cls": 0.0026815730379894376, "loss_rpn_loc": 0.032418686896562576, "lr": 0.005, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.872626844000024, "total_loss": 0.14512363611720502}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012917492500037042, "eta_seconds": 9801.74766123081, "fast_rcnn/cls_accuracy": 0.954833984375, "fast_rcnn/false_negative": 0.09676804011336385, "fast_rcnn/fg_cls_accuracy": 0.9032319598866361, "iteration": 2759, "loss_box_reg": 0.11749137938022614, "loss_cls": 0.10883904993534088, "loss_rpn_cls": 0.01077337609604001, "loss_rpn_loc": 0.058977166190743446, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8778482835000432, "total_loss": 0.3397485390305519}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015244338000229618, "eta_seconds": 9784.308380630808, "fast_rcnn/cls_accuracy": 0.96533203125, "fast_rcnn/false_negative": 0.0766254912525355, "fast_rcnn/fg_cls_accuracy": 0.9233745087474645, "iteration": 2779, "loss_box_reg": 0.129035085439682, "loss_cls": 0.09200597926974297, "loss_rpn_cls": 0.013461795169860125, "loss_rpn_loc": 0.06961438059806824, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8592402270001003, "total_loss": 0.30797872692346573}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014976671999647806, "eta_seconds": 9762.52735721154, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.05617177138594165, "fast_rcnn/fg_cls_accuracy": 0.9438282286140584, "iteration": 2799, "loss_box_reg": 0.12645410001277924, "loss_cls": 0.07380463182926178, "loss_rpn_cls": 0.007109847851097584, "loss_rpn_loc": 0.06993347778916359, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8461526080000112, "total_loss": 0.290553962578997}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013639475000218226, "eta_seconds": 9745.095829031536, "fast_rcnn/cls_accuracy": 0.98291015625, "fast_rcnn/false_negative": 0.03667033370003667, "fast_rcnn/fg_cls_accuracy": 0.9633296662999633, "iteration": 2819, "loss_box_reg": 0.09371316060423851, "loss_cls": 0.045089706778526306, "loss_rpn_cls": 0.005565444240346551, "loss_rpn_loc": 0.04761535860598087, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8727382074998786, "total_loss": 0.19521310785785317}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01387930500004586, "eta_seconds": 9728.338034612361, "fast_rcnn/cls_accuracy": 0.981689453125, "fast_rcnn/false_negative": 0.04177911931818182, "fast_rcnn/fg_cls_accuracy": 0.9582208806818182, "iteration": 2839, "loss_box_reg": 0.09622959420084953, "loss_cls": 0.04797627404332161, "loss_rpn_cls": 0.005159869324415922, "loss_rpn_loc": 0.04820975102484226, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8819557160004479, "total_loss": 0.20418882521335036}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01400469649979641, "eta_seconds": 9721.238075284942, "fast_rcnn/cls_accuracy": 0.9833984375, "fast_rcnn/false_negative": 0.035701430861929534, "fast_rcnn/fg_cls_accuracy": 0.9642985691380704, "iteration": 2859, "loss_box_reg": 0.08729725331068039, "loss_cls": 0.046435995027422905, "loss_rpn_cls": 0.00510191498324275, "loss_rpn_loc": 0.058035969734191895, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.908507136499793, "total_loss": 0.20082180527970195}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01294949600014661, "eta_seconds": 9702.349646118308, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2879, "loss_box_reg": 0.07738611847162247, "loss_cls": 0.037084782496094704, "loss_rpn_cls": 0.004217830719426274, "loss_rpn_loc": 0.04370034486055374, "lr": 0.005, "roi_head/num_bg_samples": 386.25, "roi_head/num_fg_samples": 125.75, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8611070060001111, "total_loss": 0.16869779070839286}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013615458000003855, "eta_seconds": 9692.134685180317, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.030606273408239702, "fast_rcnn/fg_cls_accuracy": 0.9693937265917603, "iteration": 2899, "loss_box_reg": 0.08812431991100311, "loss_cls": 0.035314807668328285, "loss_rpn_cls": 0.0043608746491372585, "loss_rpn_loc": 0.04997708648443222, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 158.125, "rpn/num_pos_anchors": 97.875, "time": 0.8876654215000599, "total_loss": 0.1825667613884434}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012895140999717114, "eta_seconds": 9674.672952570318, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.0361241703539823, "fast_rcnn/fg_cls_accuracy": 0.9638758296460177, "iteration": 2919, "loss_box_reg": 0.08205550536513329, "loss_cls": 0.03564905747771263, "loss_rpn_cls": 0.003591310582123697, "loss_rpn_loc": 0.05027636140584946, "lr": 0.005, "roi_head/num_bg_samples": 399.875, "roi_head/num_fg_samples": 112.125, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.8845072490003076, "total_loss": 0.17568102467339486}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014998236500105122, "eta_seconds": 9651.432936964971, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02536879358071411, "fast_rcnn/fg_cls_accuracy": 0.9746312064192859, "iteration": 2939, "loss_box_reg": 0.08032884448766708, "loss_cls": 0.03405417315661907, "loss_rpn_cls": 0.003540605423040688, "loss_rpn_loc": 0.04676378145813942, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.871404378999614, "total_loss": 0.16514784714672714}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01499920749984085, "eta_seconds": 9640.941865665844, "fast_rcnn/cls_accuracy": 0.985595703125, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2959, "loss_box_reg": 0.07666385546326637, "loss_cls": 0.033461492508649826, "loss_rpn_cls": 0.0037930241087451577, "loss_rpn_loc": 0.03955382853746414, "lr": 0.005, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8775624479999351, "total_loss": 0.1578356878599152}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0172871985000711, "eta_seconds": 9625.483712489166, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2979, "loss_box_reg": 0.0873444713652134, "loss_cls": 0.03711334243416786, "loss_rpn_cls": 0.004567545838654041, "loss_rpn_loc": 0.04251238889992237, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.875, "rpn/num_pos_anchors": 87.125, "time": 0.8813596219997635, "total_loss": 0.17236966197378933}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 93.12233100450966, "bbox/AP50": 98.91209551467809, "bbox/AP75": 98.90815859983685, "bbox/APl": 94.12688557090384, "bbox/APm": 91.41003399932086, "bbox/APs": NaN, "data_time": 0.015606857999955537, "eta_seconds": 9623.082286138271, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 2999, "loss_box_reg": 0.06720640882849693, "loss_cls": 0.01835676282644272, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.009389291051775217, "loss_rpn_loc": 0.038574906066060066, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.9206664974999512, "total_loss": 0.14024185249581933, "validation_loss": 0.15954915430267325}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011808011999619339, "eta_seconds": 9600.16200263439, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 3019, "loss_box_reg": 0.08314639329910278, "loss_cls": 0.0376443974673748, "loss_rpn_cls": 0.0030142214382067323, "loss_rpn_loc": 0.03945096954703331, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8562799734995679, "total_loss": 0.1746992077678442}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013189115500154003, "eta_seconds": 9581.05644311135, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 3039, "loss_box_reg": 0.07409685850143433, "loss_cls": 0.03244470991194248, "loss_rpn_cls": 0.0028242692351341248, "loss_rpn_loc": 0.04587041959166527, "lr": 0.005, "roi_head/num_bg_samples": 387.5, "roi_head/num_fg_samples": 124.5, "rpn/num_neg_anchors": 154.375, "rpn/num_pos_anchors": 101.625, "time": 0.8644745054998566, "total_loss": 0.16931998787913471}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013534310999602894, "eta_seconds": 9555.039547035833, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0348046875, "fast_rcnn/fg_cls_accuracy": 0.9651953125, "iteration": 3059, "loss_box_reg": 0.08912316337227821, "loss_cls": 0.040720729157328606, "loss_rpn_cls": 0.0033090302022174, "loss_rpn_loc": 0.04025048390030861, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8530120370000986, "total_loss": 0.17787926085293293}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014201820000380394, "eta_seconds": 9543.668527310429, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03196486928104575, "fast_rcnn/fg_cls_accuracy": 0.9680351307189543, "iteration": 3079, "loss_box_reg": 0.0686977356672287, "loss_cls": 0.035015568137168884, "loss_rpn_cls": 0.00279963796492666, "loss_rpn_loc": 0.03855223208665848, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8948249290006061, "total_loss": 0.14674806164111942}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013865771499695256, "eta_seconds": 9517.51735908032, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02321697909933204, "fast_rcnn/fg_cls_accuracy": 0.9767830209006679, "iteration": 3099, "loss_box_reg": 0.07850319519639015, "loss_cls": 0.027558359317481518, "loss_rpn_cls": 0.0027522484306246042, "loss_rpn_loc": 0.03784923441708088, "lr": 0.005, "roi_head/num_bg_samples": 389.875, "roi_head/num_fg_samples": 122.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8595668009998008, "total_loss": 0.14408221002668142}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01446834599983049, "eta_seconds": 9508.71323557044, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 3119, "loss_box_reg": 0.07208020612597466, "loss_cls": 0.027958947233855724, "loss_rpn_cls": 0.0028214638587087393, "loss_rpn_loc": 0.04015910252928734, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8765667439997742, "total_loss": 0.14485203940421343}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015091185000073892, "eta_seconds": 9483.766832985846, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3139, "loss_box_reg": 0.07660289481282234, "loss_cls": 0.02883316855877638, "loss_rpn_cls": 0.003664590767584741, "loss_rpn_loc": 0.04118155874311924, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8495973095000409, "total_loss": 0.15969278826378286}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013378322499647766, "eta_seconds": 9456.344148523265, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027560763888888888, "fast_rcnn/fg_cls_accuracy": 0.9724392361111112, "iteration": 3159, "loss_box_reg": 0.07904543727636337, "loss_cls": 0.028979639522731304, "loss_rpn_cls": 0.002581986482255161, "loss_rpn_loc": 0.03558463603258133, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8616635454995958, "total_loss": 0.1512664365582168}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013394650000009278, "eta_seconds": 9445.126903894947, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.032126560069590346, "fast_rcnn/fg_cls_accuracy": 0.9678734399304096, "iteration": 3179, "loss_box_reg": 0.08476627245545387, "loss_cls": 0.0355964619666338, "loss_rpn_cls": 0.003005484351888299, "loss_rpn_loc": 0.039235398173332214, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8727699070004746, "total_loss": 0.17287040723022074}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015970269499575807, "eta_seconds": 9419.84299253093, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.027215893058690745, "fast_rcnn/fg_cls_accuracy": 0.9727841069413092, "iteration": 3199, "loss_box_reg": 0.08042847365140915, "loss_cls": 0.029140799306333065, "loss_rpn_cls": 0.0027483388548716903, "loss_rpn_loc": 0.03704603388905525, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8536831940004959, "total_loss": 0.15336330170975998}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01509946050009603, "eta_seconds": 9401.151297154625, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.0322592626984864, "fast_rcnn/fg_cls_accuracy": 0.9677407373015137, "iteration": 3219, "loss_box_reg": 0.07175835222005844, "loss_cls": 0.03212358430027962, "loss_rpn_cls": 0.0027838735841214657, "loss_rpn_loc": 0.036246467381715775, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8455828644996473, "total_loss": 0.14006751152919605}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013515179500245722, "eta_seconds": 9383.849602200717, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021980676328502417, "fast_rcnn/fg_cls_accuracy": 0.9780193236714976, "iteration": 3239, "loss_box_reg": 0.0661500059068203, "loss_cls": 0.025285215117037296, "loss_rpn_cls": 0.0022180761443451047, "loss_rpn_loc": 0.036850456148386, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8759488749997217, "total_loss": 0.13612847530748695}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013904339499731577, "eta_seconds": 9362.250589532423, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02769993111222445, "fast_rcnn/fg_cls_accuracy": 0.9723000688877755, "iteration": 3259, "loss_box_reg": 0.07065539062023163, "loss_cls": 0.028814840130507946, "loss_rpn_cls": 0.0029595009982585907, "loss_rpn_loc": 0.042885731905698776, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.88494127749982, "total_loss": 0.15331736870575696}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014031905499905406, "eta_seconds": 9348.968644660708, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.023207561461218836, "fast_rcnn/fg_cls_accuracy": 0.9767924385387812, "iteration": 3279, "loss_box_reg": 0.059069978073239326, "loss_cls": 0.025125066749751568, "loss_rpn_cls": 0.003141147317364812, "loss_rpn_loc": 0.038696713745594025, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.886954471000081, "total_loss": 0.1338297468610108}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 93.27905094948086, "bbox/AP50": 98.96061968335171, "bbox/AP75": 98.95254082058918, "bbox/APl": 94.22290992711233, "bbox/APm": 91.01193026527187, "bbox/APs": NaN, "data_time": 0.015314491499793803, "eta_seconds": 9331.528165890704, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3299, "loss_box_reg": 0.06118686683475971, "loss_cls": 0.025163940154016018, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.002601873711682856, "loss_rpn_loc": 0.046768760308623314, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8836847110001145, "total_loss": 0.14197535056155175, "validation_loss": 0.17572354030975335}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01657294799997544, "eta_seconds": 9327.826769569449, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027298709381551364, "fast_rcnn/fg_cls_accuracy": 0.9727012906184487, "iteration": 3319, "loss_box_reg": 0.07321085035800934, "loss_cls": 0.026175927370786667, "loss_rpn_cls": 0.0025562879163771868, "loss_rpn_loc": 0.04157147742807865, "lr": 0.005, "roi_head/num_bg_samples": 396.0, "roi_head/num_fg_samples": 116.0, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8852187219999905, "total_loss": 0.15138369193300605}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013637358500091068, "eta_seconds": 9320.907193381125, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3339, "loss_box_reg": 0.0705733373761177, "loss_cls": 0.029932837933301926, "loss_rpn_cls": 0.002767486381344497, "loss_rpn_loc": 0.04421466588973999, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8811242625001796, "total_loss": 0.1560333016095683}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015893325499746425, "eta_seconds": 9306.525065608244, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02383262761703129, "fast_rcnn/fg_cls_accuracy": 0.9761673723829687, "iteration": 3359, "loss_box_reg": 0.07866281643509865, "loss_cls": 0.03185747377574444, "loss_rpn_cls": 0.003939336049370468, "loss_rpn_loc": 0.04590761289000511, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8784054349998769, "total_loss": 0.15744307718705386}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01445641100008288, "eta_seconds": 9285.935212541124, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 3379, "loss_box_reg": 0.07135868817567825, "loss_cls": 0.03006169479340315, "loss_rpn_cls": 0.0031535130692645907, "loss_rpn_loc": 0.0403817743062973, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.75, "rpn/num_pos_anchors": 97.25, "time": 0.8491240339999422, "total_loss": 0.15564731787890196}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015795905500453955, "eta_seconds": 9261.439326773583, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02752351492961303, "fast_rcnn/fg_cls_accuracy": 0.972476485070387, "iteration": 3399, "loss_box_reg": 0.06518244743347168, "loss_cls": 0.02701749838888645, "loss_rpn_cls": 0.002880784450098872, "loss_rpn_loc": 0.0377532746642828, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8454985644998487, "total_loss": 0.1512888001743704}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01527901799954634, "eta_seconds": 9231.234745578438, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02244012304987915, "fast_rcnn/fg_cls_accuracy": 0.9775598769501208, "iteration": 3419, "loss_box_reg": 0.07252498716115952, "loss_cls": 0.03160363249480724, "loss_rpn_cls": 0.0024293236201629043, "loss_rpn_loc": 0.04073278419673443, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.852150950000123, "total_loss": 0.15422597713768482}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012618986000234145, "eta_seconds": 9217.465740862552, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3439, "loss_box_reg": 0.07212798297405243, "loss_cls": 0.02934582531452179, "loss_rpn_cls": 0.0028162638191133738, "loss_rpn_loc": 0.03634508140385151, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.859679992999645, "total_loss": 0.14720665954519063}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015629582999736158, "eta_seconds": 9209.021030423577, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.030127502792816015, "fast_rcnn/fg_cls_accuracy": 0.9698724972071839, "iteration": 3459, "loss_box_reg": 0.07034417241811752, "loss_cls": 0.026633177883923054, "loss_rpn_cls": 0.003176042577251792, "loss_rpn_loc": 0.0405108705163002, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.9005381335000493, "total_loss": 0.15105392935220152}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012076322499979142, "eta_seconds": 9194.057128930923, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.030489864864864866, "fast_rcnn/fg_cls_accuracy": 0.9695101351351352, "iteration": 3479, "loss_box_reg": 0.07114227861166, "loss_cls": 0.026824098080396652, "loss_rpn_cls": 0.002793507184833288, "loss_rpn_loc": 0.03859907202422619, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.8727268464995177, "total_loss": 0.14840750175062567}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014796175999890693, "eta_seconds": 9184.643737424389, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02636273846810934, "fast_rcnn/fg_cls_accuracy": 0.9736372615318907, "iteration": 3499, "loss_box_reg": 0.07014593109488487, "loss_cls": 0.025068681687116623, "loss_rpn_cls": 0.0022604097612202168, "loss_rpn_loc": 0.04264912009239197, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.893156176499815, "total_loss": 0.15068290615454316}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01170660899970244, "eta_seconds": 9176.90027535572, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.024857474662162163, "fast_rcnn/fg_cls_accuracy": 0.9751425253378379, "iteration": 3519, "loss_box_reg": 0.07261389493942261, "loss_cls": 0.031547232531011105, "loss_rpn_cls": 0.0035334062995389104, "loss_rpn_loc": 0.05682768300175667, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8848085234999417, "total_loss": 0.16874005855061114}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015069052500166435, "eta_seconds": 9149.657950404393, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02318663990825688, "fast_rcnn/fg_cls_accuracy": 0.9768133600917431, "iteration": 3539, "loss_box_reg": 0.06397773697972298, "loss_cls": 0.027955145575106144, "loss_rpn_cls": 0.0029910271987318993, "loss_rpn_loc": 0.035324785858392715, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8772716075000062, "total_loss": 0.14210126956459135}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014824828999735473, "eta_seconds": 9139.718760184218, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024399182888728672, "fast_rcnn/fg_cls_accuracy": 0.9756008171112713, "iteration": 3559, "loss_box_reg": 0.06688013300299644, "loss_cls": 0.02547728642821312, "loss_rpn_cls": 0.002551792422309518, "loss_rpn_loc": 0.041121695190668106, "lr": 0.005, "roi_head/num_bg_samples": 386.375, "roi_head/num_fg_samples": 125.625, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8910150914994119, "total_loss": 0.137859839014709}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012648733000332868, "eta_seconds": 9122.743446730547, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.03091551987767584, "fast_rcnn/fg_cls_accuracy": 0.9690844801223242, "iteration": 3579, "loss_box_reg": 0.06596524640917778, "loss_cls": 0.031009403057396412, "loss_rpn_cls": 0.002636650577187538, "loss_rpn_loc": 0.03402801230549812, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8622523320004802, "total_loss": 0.14295857812976465}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 94.51462784052855, "bbox/AP50": 98.93522228080109, "bbox/AP75": 98.93450218404813, "bbox/APl": 95.4269028089368, "bbox/APm": 92.13712530083895, "bbox/APs": NaN, "data_time": 0.016846376500325277, "eta_seconds": 9099.664099978247, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3599, "loss_box_reg": 0.060619814321398735, "loss_cls": 0.025204936042428017, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002324309549294412, "loss_rpn_loc": 0.029545368626713753, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8770653480000874, "total_loss": 0.12885292759165168, "validation_loss": 0.1466805888295102}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013414248000117368, "eta_seconds": 9073.193813482945, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02580995230643118, "fast_rcnn/fg_cls_accuracy": 0.9741900476935689, "iteration": 3619, "loss_box_reg": 0.07269391417503357, "loss_cls": 0.02648307103663683, "loss_rpn_cls": 0.002976909978315234, "loss_rpn_loc": 0.035148199647665024, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8643609504997585, "total_loss": 0.14119619433768094}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.017480556500231614, "eta_seconds": 9064.668756838248, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021484734934578288, "fast_rcnn/fg_cls_accuracy": 0.9785152650654217, "iteration": 3639, "loss_box_reg": 0.06451242417097092, "loss_cls": 0.025800890289247036, "loss_rpn_cls": 0.003012675791978836, "loss_rpn_loc": 0.03744327463209629, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8850444254994727, "total_loss": 0.13275502575561404}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015173202000369201, "eta_seconds": 9041.131346661121, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 3659, "loss_box_reg": 0.06518324464559555, "loss_cls": 0.028774174861609936, "loss_rpn_cls": 0.0030480388086289167, "loss_rpn_loc": 0.04536570981144905, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8544350470001518, "total_loss": 0.15816591365728527}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015335218500695191, "eta_seconds": 9025.614861067337, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3679, "loss_box_reg": 0.06726354733109474, "loss_cls": 0.024467935785651207, "loss_rpn_cls": 0.0026147140888497233, "loss_rpn_loc": 0.03361096978187561, "lr": 0.005, "roi_head/num_bg_samples": 385.125, "roi_head/num_fg_samples": 126.875, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8869942110004558, "total_loss": 0.13675730756949633}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016904356500162976, "eta_seconds": 9004.579372686254, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025110662387133182, "fast_rcnn/fg_cls_accuracy": 0.9748893376128669, "iteration": 3699, "loss_box_reg": 0.07380294799804688, "loss_cls": 0.02671107929199934, "loss_rpn_cls": 0.0026282721664756536, "loss_rpn_loc": 0.03765440732240677, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.8669072914990466, "total_loss": 0.15535226103384048}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01588809099939681, "eta_seconds": 8987.096449916258, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02690737158822265, "fast_rcnn/fg_cls_accuracy": 0.9730926284117773, "iteration": 3719, "loss_box_reg": 0.07514582574367523, "loss_cls": 0.03208179213106632, "loss_rpn_cls": 0.0023227966157719493, "loss_rpn_loc": 0.03262249752879143, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8608530749997954, "total_loss": 0.13813788018887863}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01272802500079706, "eta_seconds": 8962.058414416571, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.023082386363636364, "fast_rcnn/fg_cls_accuracy": 0.9769176136363636, "iteration": 3739, "loss_box_reg": 0.06598043441772461, "loss_cls": 0.02492926735430956, "loss_rpn_cls": 0.002211912884376943, "loss_rpn_loc": 0.035132599994540215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.375, "rpn/num_pos_anchors": 99.625, "time": 0.8425305889995798, "total_loss": 0.14112166687846184}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.017491417498604278, "eta_seconds": 8932.782554465553, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.024274259868421053, "fast_rcnn/fg_cls_accuracy": 0.9757257401315789, "iteration": 3759, "loss_box_reg": 0.0770643837749958, "loss_cls": 0.02429282944649458, "loss_rpn_cls": 0.0028139676433056593, "loss_rpn_loc": 0.03533002734184265, "lr": 0.005, "roi_head/num_bg_samples": 392.125, "roi_head/num_fg_samples": 119.875, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8662025825005912, "total_loss": 0.13814355875365436}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014352537500599283, "eta_seconds": 8915.337417165552, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.025071550123762377, "fast_rcnn/fg_cls_accuracy": 0.9749284498762376, "iteration": 3779, "loss_box_reg": 0.07174495980143547, "loss_cls": 0.024629310704767704, "loss_rpn_cls": 0.002537853899411857, "loss_rpn_loc": 0.032603537663817406, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 172.625, "rpn/num_pos_anchors": 83.375, "time": 0.863006641499851, "total_loss": 0.1404715662356466}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016315409999151598, "eta_seconds": 8902.066019020147, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 3799, "loss_box_reg": 0.07169150561094284, "loss_cls": 0.02851510141044855, "loss_rpn_cls": 0.002499441849067807, "loss_rpn_loc": 0.03480919077992439, "lr": 0.005, "roi_head/num_bg_samples": 387.125, "roi_head/num_fg_samples": 124.875, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8698634014999698, "total_loss": 0.1458265830297023}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014548789498803671, "eta_seconds": 8871.673029500389, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029305965489839936, "fast_rcnn/fg_cls_accuracy": 0.97069403451016, "iteration": 3819, "loss_box_reg": 0.06981262192130089, "loss_cls": 0.0321883549913764, "loss_rpn_cls": 0.0028753530932590365, "loss_rpn_loc": 0.036025675013661385, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8394459645005554, "total_loss": 0.15315054648090154}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013720603499677964, "eta_seconds": 8853.17420985548, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.030490451388888888, "fast_rcnn/fg_cls_accuracy": 0.9695095486111112, "iteration": 3839, "loss_box_reg": 0.07815155386924744, "loss_cls": 0.03196221496909857, "loss_rpn_cls": 0.002755100023932755, "loss_rpn_loc": 0.03541838005185127, "lr": 0.005, "roi_head/num_bg_samples": 391.875, "roi_head/num_fg_samples": 120.125, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8787194060005277, "total_loss": 0.1481912493472919}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012579242999890994, "eta_seconds": 8833.573435874765, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.031897189349112426, "fast_rcnn/fg_cls_accuracy": 0.9681028106508875, "iteration": 3859, "loss_box_reg": 0.07044711336493492, "loss_cls": 0.029714887030422688, "loss_rpn_cls": 0.0033130873925983906, "loss_rpn_loc": 0.041767822578549385, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8905400194989852, "total_loss": 0.14567952742800117}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.016821658499793557, "eta_seconds": 8823.220519568787, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02559853830645161, "fast_rcnn/fg_cls_accuracy": 0.9744014616935484, "iteration": 3879, "loss_box_reg": 0.07491979375481606, "loss_cls": 0.027746117673814297, "loss_rpn_cls": 0.0025814230320975184, "loss_rpn_loc": 0.04155806638300419, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 164.75, "rpn/num_pos_anchors": 91.25, "time": 0.8907964480004011, "total_loss": 0.15361196256708354}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 94.94155308690227, "bbox/AP50": 98.96777693067816, "bbox/AP75": 98.96599116280159, "bbox/APl": 95.81155173226301, "bbox/APm": 92.58270316582754, "bbox/APs": NaN, "data_time": 0.0166540754999005, "eta_seconds": 8797.017228219971, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 3899, "loss_box_reg": 0.06790591776371002, "loss_cls": 0.025828268378973007, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0026264950865879655, "loss_rpn_loc": 0.03195084631443024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8543838935001986, "total_loss": 0.13255327357910573, "validation_loss": 0.14792111576303246}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01380043500012107, "eta_seconds": 8781.817470994656, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024719360596192383, "fast_rcnn/fg_cls_accuracy": 0.9752806394038076, "iteration": 3919, "loss_box_reg": 0.06461720168590546, "loss_cls": 0.023319250904023647, "loss_rpn_cls": 0.0020520591642707586, "loss_rpn_loc": 0.03039520513266325, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.8972092889998748, "total_loss": 0.13415113149676472}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014971762999266502, "eta_seconds": 8759.346107136958, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3939, "loss_box_reg": 0.06706715747714043, "loss_cls": 0.027508745901286602, "loss_rpn_cls": 0.0024385941214859486, "loss_rpn_loc": 0.03421283699572086, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.375, "rpn/num_pos_anchors": 93.625, "time": 0.8548483864997252, "total_loss": 0.1354159387992695}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012218220000249858, "eta_seconds": 8741.933631026955, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3959, "loss_box_reg": 0.06786992028355598, "loss_cls": 0.02666586823761463, "loss_rpn_cls": 0.00215515261515975, "loss_rpn_loc": 0.0341497752815485, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8674180375001015, "total_loss": 0.13773037993814796}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013403915500020958, "eta_seconds": 8723.552189349628, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022183835097254002, "fast_rcnn/fg_cls_accuracy": 0.9778161649027459, "iteration": 3979, "loss_box_reg": 0.06269732862710953, "loss_cls": 0.02577450592070818, "loss_rpn_cls": 0.002212987863458693, "loss_rpn_loc": 0.033453453332185745, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8743991820001611, "total_loss": 0.12669191422173753}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014044588500837563, "eta_seconds": 8699.251158132407, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021779715093818985, "fast_rcnn/fg_cls_accuracy": 0.978220284906181, "iteration": 3999, "loss_box_reg": 0.05749828927218914, "loss_cls": 0.02292787656188011, "loss_rpn_cls": 0.0022763016168028116, "loss_rpn_loc": 0.030527872033417225, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8781595870004821, "total_loss": 0.12036801665090024}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.017877838000458723, "eta_seconds": 8681.47508755295, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.024946263227513227, "fast_rcnn/fg_cls_accuracy": 0.9750537367724867, "iteration": 4019, "loss_box_reg": 0.061806268990039825, "loss_cls": 0.021874409168958664, "loss_rpn_cls": 0.001797958801034838, "loss_rpn_loc": 0.032160378992557526, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.858296216000781, "total_loss": 0.12814085837453604}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.017760669000381313, "eta_seconds": 8664.079084972942, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025957911969496022, "fast_rcnn/fg_cls_accuracy": 0.974042088030504, "iteration": 4039, "loss_box_reg": 0.06829555332660675, "loss_cls": 0.02705319505184889, "loss_rpn_cls": 0.0019355633994564414, "loss_rpn_loc": 0.03182108514010906, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.868489757000134, "total_loss": 0.13258394983131438}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014202485499481554, "eta_seconds": 8653.910020389647, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4059, "loss_box_reg": 0.06874504685401917, "loss_cls": 0.02661903016269207, "loss_rpn_cls": 0.0024593337439000607, "loss_rpn_loc": 0.035074906423687935, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8713963939999303, "total_loss": 0.13849112973548472}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014231688500331074, "eta_seconds": 8633.553868764164, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025265144902234637, "fast_rcnn/fg_cls_accuracy": 0.9747348550977654, "iteration": 4079, "loss_box_reg": 0.06041577830910683, "loss_cls": 0.024997691623866558, "loss_rpn_cls": 0.0023892336757853627, "loss_rpn_loc": 0.033885177224874496, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 172.5, "rpn/num_pos_anchors": 83.5, "time": 0.8808629795003071, "total_loss": 0.1258070394396782}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013304524999512068, "eta_seconds": 8622.8361129201, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0185546875, "fast_rcnn/fg_cls_accuracy": 0.9814453125, "iteration": 4099, "loss_box_reg": 0.05665453523397446, "loss_cls": 0.02086931560188532, "loss_rpn_cls": 0.0020721667679026723, "loss_rpn_loc": 0.032867273315787315, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8957161810003527, "total_loss": 0.12901447108015418}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01389541300068231, "eta_seconds": 8609.213105755536, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021978142556179775, "fast_rcnn/fg_cls_accuracy": 0.9780218574438202, "iteration": 4119, "loss_box_reg": 0.06112395226955414, "loss_cls": 0.0211090799421072, "loss_rpn_cls": 0.002453662804327905, "loss_rpn_loc": 0.03786292113363743, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8970748760002607, "total_loss": 0.13180671783629805}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013343292500394455, "eta_seconds": 8593.27903537613, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 4139, "loss_box_reg": 0.07672134041786194, "loss_cls": 0.028643625788390636, "loss_rpn_cls": 0.0022411660756915808, "loss_rpn_loc": 0.03565843217074871, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8405602805005401, "total_loss": 0.14650720910867676}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.010753457500868535, "eta_seconds": 8575.850216726143, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.021805205331412104, "fast_rcnn/fg_cls_accuracy": 0.9781947946685878, "iteration": 4159, "loss_box_reg": 0.06780307739973068, "loss_cls": 0.027994119562208652, "loss_rpn_cls": 0.00258387578651309, "loss_rpn_loc": 0.033184777945280075, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.0, "rpn/num_pos_anchors": 87.0, "time": 0.8456791519993203, "total_loss": 0.13741438509896398}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01744608349963528, "eta_seconds": 8560.807449318956, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024896364795918367, "fast_rcnn/fg_cls_accuracy": 0.9751036352040816, "iteration": 4179, "loss_box_reg": 0.0685216449201107, "loss_cls": 0.02508564107120037, "loss_rpn_cls": 0.0029065579874441028, "loss_rpn_loc": 0.04283138923346996, "lr": 0.005, "roi_head/num_bg_samples": 393.625, "roi_head/num_fg_samples": 118.375, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.9070378970000093, "total_loss": 0.14319775789044797}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 93.40862195109425, "bbox/AP50": 98.96374346407794, "bbox/AP75": 98.96286729535807, "bbox/APl": 94.03985809640986, "bbox/APm": 91.7385771795752, "bbox/APs": NaN, "data_time": 0.014953972499824886, "eta_seconds": 8544.73683586187, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4199, "loss_box_reg": 0.06535263359546661, "loss_cls": 0.02621511183679104, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0030301553197205067, "loss_rpn_loc": 0.03586420789361, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.86083233249974, "total_loss": 0.14097663236316293, "validation_loss": 0.14196365930424992}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015456654999979946, "eta_seconds": 8526.088662350707, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022115090722165106, "fast_rcnn/fg_cls_accuracy": 0.9778849092778349, "iteration": 4219, "loss_box_reg": 0.054392239078879356, "loss_cls": 0.022306395694613457, "loss_rpn_cls": 0.002272343495860696, "loss_rpn_loc": 0.03396121598780155, "lr": 0.005, "roi_head/num_bg_samples": 385.625, "roi_head/num_fg_samples": 126.375, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8550791284997104, "total_loss": 0.11667074263095856}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014931448999959684, "eta_seconds": 8509.863917441864, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01743958153114187, "fast_rcnn/fg_cls_accuracy": 0.9825604184688581, "iteration": 4239, "loss_box_reg": 0.05129031836986542, "loss_cls": 0.01760159432888031, "loss_rpn_cls": 0.0029446481494233012, "loss_rpn_loc": 0.03069587703794241, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 175.375, "rpn/num_pos_anchors": 80.625, "time": 0.8826235694996285, "total_loss": 0.10483503562863916}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01954176850085787, "eta_seconds": 8496.111869716606, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.020697939712389382, "fast_rcnn/fg_cls_accuracy": 0.9793020602876106, "iteration": 4259, "loss_box_reg": 0.056341201066970825, "loss_cls": 0.02312588132917881, "loss_rpn_cls": 0.0025954004377126694, "loss_rpn_loc": 0.04303659126162529, "lr": 0.005, "roi_head/num_bg_samples": 400.125, "roi_head/num_fg_samples": 111.875, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8868610045010428, "total_loss": 0.1288284579059109}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012749520000397752, "eta_seconds": 8478.667845756609, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.02358640160891089, "fast_rcnn/fg_cls_accuracy": 0.9764135983910891, "iteration": 4279, "loss_box_reg": 0.07378086820244789, "loss_cls": 0.02591687999665737, "loss_rpn_cls": 0.0020061879768036306, "loss_rpn_loc": 0.035794125869870186, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8801597854990177, "total_loss": 0.14331023581326008}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013414688999546343, "eta_seconds": 8454.956621716445, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.025853207236842105, "fast_rcnn/fg_cls_accuracy": 0.974146792763158, "iteration": 4299, "loss_box_reg": 0.08156145364046097, "loss_cls": 0.027444886043667793, "loss_rpn_cls": 0.0019563272362574935, "loss_rpn_loc": 0.036992449313402176, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8439608360004058, "total_loss": 0.15209498221520334}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014210977000402636, "eta_seconds": 8435.753309788897, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024087717563291138, "fast_rcnn/fg_cls_accuracy": 0.9759122824367088, "iteration": 4319, "loss_box_reg": 0.06321131065487862, "loss_cls": 0.02684237528592348, "loss_rpn_cls": 0.0027903582667931914, "loss_rpn_loc": 0.039607759565114975, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8749667014999432, "total_loss": 0.13853128533810377}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014168770499964012, "eta_seconds": 8418.325867768881, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02317734089352923, "fast_rcnn/fg_cls_accuracy": 0.9768226591064708, "iteration": 4339, "loss_box_reg": 0.05184036307036877, "loss_cls": 0.0229664733633399, "loss_rpn_cls": 0.002469330560415983, "loss_rpn_loc": 0.03057936020195484, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8862034110006789, "total_loss": 0.11455292662139982}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011720945999513788, "eta_seconds": 8400.027674726469, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02158229590108401, "fast_rcnn/fg_cls_accuracy": 0.9784177040989159, "iteration": 4359, "loss_box_reg": 0.06309510581195354, "loss_cls": 0.02259633969515562, "loss_rpn_cls": 0.002194952219724655, "loss_rpn_loc": 0.03172831051051617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8717078200006654, "total_loss": 0.1274147952790372}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01361429050029983, "eta_seconds": 8383.61604435138, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4379, "loss_box_reg": 0.06567597761750221, "loss_cls": 0.02794388961046934, "loss_rpn_cls": 0.0024444819428026676, "loss_rpn_loc": 0.03958482854068279, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8592332269990948, "total_loss": 0.14897812146227807}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014307960500445915, "eta_seconds": 8366.704392926298, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02046009062391077, "fast_rcnn/fg_cls_accuracy": 0.9795399093760893, "iteration": 4399, "loss_box_reg": 0.06178067624568939, "loss_cls": 0.02468185406178236, "loss_rpn_cls": 0.0023401040816679597, "loss_rpn_loc": 0.037465330213308334, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8559774465002192, "total_loss": 0.13837072649039328}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012621712000509433, "eta_seconds": 8353.963404295257, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4419, "loss_box_reg": 0.06035963259637356, "loss_cls": 0.022992623038589954, "loss_rpn_cls": 0.002158885123208165, "loss_rpn_loc": 0.027208128944039345, "lr": 0.005, "roi_head/num_bg_samples": 384.875, "roi_head/num_fg_samples": 127.125, "rpn/num_neg_anchors": 170.0, "rpn/num_pos_anchors": 86.0, "time": 0.8953435434996209, "total_loss": 0.12231088278349489}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014090943000155676, "eta_seconds": 8335.499325341836, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4439, "loss_box_reg": 0.06730298697948456, "loss_cls": 0.023621671833097935, "loss_rpn_cls": 0.0021845350274816155, "loss_rpn_loc": 0.0352974496781826, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.25, "rpn/num_pos_anchors": 97.75, "time": 0.8675036810000165, "total_loss": 0.13669328414835036}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012706199500826187, "eta_seconds": 8316.448691135098, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01759963518722467, "fast_rcnn/fg_cls_accuracy": 0.9824003648127753, "iteration": 4459, "loss_box_reg": 0.06193057633936405, "loss_cls": 0.021720517426729202, "loss_rpn_cls": 0.0018856043461710215, "loss_rpn_loc": 0.03091004677116871, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8937260224993224, "total_loss": 0.1227074918569997}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013523801500014088, "eta_seconds": 8296.77059710459, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4479, "loss_box_reg": 0.0764407068490982, "loss_cls": 0.02567237988114357, "loss_rpn_cls": 0.001991047873161733, "loss_rpn_loc": 0.03321711905300617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8536981769993872, "total_loss": 0.14464460092131048}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 93.00705134353211, "bbox/AP50": 98.93110542393643, "bbox/AP75": 98.93110542393643, "bbox/APl": 93.71191938022734, "bbox/APm": 91.30748008841427, "bbox/APs": NaN, "data_time": 0.014672981499643356, "eta_seconds": 8276.31107170184, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 4499, "loss_box_reg": 0.06515203043818474, "loss_cls": 0.022937876172363758, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002306717331521213, "loss_rpn_loc": 0.03413390927016735, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.853352267500668, "total_loss": 0.12754546070937067, "validation_loss": 0.1391322108589738}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015802942000846087, "eta_seconds": 8253.11384120532, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4519, "loss_box_reg": 0.06294054538011551, "loss_cls": 0.023245316930115223, "loss_rpn_cls": 0.0022322835866361856, "loss_rpn_loc": 0.03262490779161453, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.852351106000242, "total_loss": 0.13475362805183977}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015078195000569394, "eta_seconds": 8230.85458721614, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4539, "loss_box_reg": 0.07160457968711853, "loss_cls": 0.024476973339915276, "loss_rpn_cls": 0.002147287130355835, "loss_rpn_loc": 0.03720744699239731, "lr": 0.005, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8453313475001778, "total_loss": 0.13857831864152104}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01636703949952789, "eta_seconds": 8213.274710050322, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.023623511904761904, "fast_rcnn/fg_cls_accuracy": 0.9763764880952381, "iteration": 4559, "loss_box_reg": 0.05875660479068756, "loss_cls": 0.023611723445355892, "loss_rpn_cls": 0.0022019054740667343, "loss_rpn_loc": 0.0357234925031662, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8867215840000426, "total_loss": 0.12488182925153524}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013644237999869802, "eta_seconds": 8196.326549555364, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.023111155063291138, "fast_rcnn/fg_cls_accuracy": 0.9768888449367088, "iteration": 4579, "loss_box_reg": 0.07077584601938725, "loss_cls": 0.03129696846008301, "loss_rpn_cls": 0.0026352115673944354, "loss_rpn_loc": 0.042789068073034286, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8891512034997504, "total_loss": 0.15943694883026183}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015678855999794905, "eta_seconds": 8178.476384830322, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 4599, "loss_box_reg": 0.06418749317526817, "loss_cls": 0.02551879547536373, "loss_rpn_cls": 0.0027105951448902488, "loss_rpn_loc": 0.03643552586436272, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8658532284998728, "total_loss": 0.13786764186806977}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013482987999850593, "eta_seconds": 8161.526309455352, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 4619, "loss_box_reg": 0.057235922664403915, "loss_cls": 0.027666328474879265, "loss_rpn_cls": 0.0028786591719835997, "loss_rpn_loc": 0.04224038124084473, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8686648815000808, "total_loss": 0.147602929151617}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014154113498989318, "eta_seconds": 8143.856864066196, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.018079134487803218, "fast_rcnn/fg_cls_accuracy": 0.9819208655121967, "iteration": 4639, "loss_box_reg": 0.06335645914077759, "loss_cls": 0.021422572433948517, "loss_rpn_cls": 0.002599337021820247, "loss_rpn_loc": 0.03555195406079292, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8944120790001762, "total_loss": 0.12154645670671016}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014369196500410908, "eta_seconds": 8126.457319436207, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.019082395186335404, "fast_rcnn/fg_cls_accuracy": 0.9809176048136645, "iteration": 4659, "loss_box_reg": 0.06376534700393677, "loss_cls": 0.02196851186454296, "loss_rpn_cls": 0.002237886539660394, "loss_rpn_loc": 0.033371662721037865, "lr": 0.005, "roi_head/num_bg_samples": 390.5, "roi_head/num_fg_samples": 121.5, "rpn/num_neg_anchors": 170.75, "rpn/num_pos_anchors": 85.25, "time": 0.8616984569998749, "total_loss": 0.1318136416375637}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015702468500421674, "eta_seconds": 8108.360181842967, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4679, "loss_box_reg": 0.07680578529834747, "loss_cls": 0.0263025164604187, "loss_rpn_cls": 0.002300129854120314, "loss_rpn_loc": 0.03531237877905369, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8752102919997924, "total_loss": 0.14133498328737915}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015292086000044947, "eta_seconds": 8090.584890122356, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019212366580787635, "fast_rcnn/fg_cls_accuracy": 0.9807876334192124, "iteration": 4699, "loss_box_reg": 0.0615016333758831, "loss_cls": 0.02258227299898863, "loss_rpn_cls": 0.0023130879271775484, "loss_rpn_loc": 0.03282614052295685, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8670793040009812, "total_loss": 0.1370764736784622}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014544139499776065, "eta_seconds": 8074.003555504269, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025486010174418604, "fast_rcnn/fg_cls_accuracy": 0.9745139898255815, "iteration": 4719, "loss_box_reg": 0.06041738949716091, "loss_cls": 0.02572917565703392, "loss_rpn_cls": 0.0029287008801475167, "loss_rpn_loc": 0.03309382498264313, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.25, "rpn/num_pos_anchors": 86.75, "time": 0.8711159704998863, "total_loss": 0.1269720789277926}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014847834499050805, "eta_seconds": 8059.29771503509, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025900135869565216, "fast_rcnn/fg_cls_accuracy": 0.9740998641304348, "iteration": 4739, "loss_box_reg": 0.0714801549911499, "loss_cls": 0.027188056148588657, "loss_rpn_cls": 0.0027070617070421576, "loss_rpn_loc": 0.03857620805501938, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8524405455000306, "total_loss": 0.14026663172990084}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01192657099909411, "eta_seconds": 8049.82534613164, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.02163327660891089, "fast_rcnn/fg_cls_accuracy": 0.9783667233910891, "iteration": 4759, "loss_box_reg": 0.06939147785305977, "loss_cls": 0.023606639355421066, "loss_rpn_cls": 0.0027515310794115067, "loss_rpn_loc": 0.03266059421002865, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8984915240007467, "total_loss": 0.1395235169911757}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014523527000164904, "eta_seconds": 8031.938204672058, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024965251150306747, "fast_rcnn/fg_cls_accuracy": 0.9750347488496933, "iteration": 4779, "loss_box_reg": 0.05777068808674812, "loss_cls": 0.023717678152024746, "loss_rpn_cls": 0.0021182504715397954, "loss_rpn_loc": 0.03053051419556141, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8574463155000558, "total_loss": 0.12371064920444041}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 92.83870913222127, "bbox/AP50": 98.89921854644973, "bbox/AP75": 98.89912728642817, "bbox/APl": 93.47087851814192, "bbox/APm": 91.12752205685403, "bbox/APs": NaN, "data_time": 0.012065286000506603, "eta_seconds": 8013.493554443942, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 4799, "loss_box_reg": 0.06852671504020691, "loss_cls": 0.024018924683332443, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0019923251820728183, "loss_rpn_loc": 0.031630223616957664, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8492078769995715, "total_loss": 0.12812982744071633, "validation_loss": 0.13883173140969918}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014361648500198498, "eta_seconds": 7997.974128998968, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022432739674118983, "fast_rcnn/fg_cls_accuracy": 0.9775672603258809, "iteration": 4819, "loss_box_reg": 0.06308107823133469, "loss_cls": 0.026020622812211514, "loss_rpn_cls": 0.0019791799131780863, "loss_rpn_loc": 0.028659190982580185, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8516874639999514, "total_loss": 0.12498592003248632}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01331285400010529, "eta_seconds": 7975.913023215084, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4839, "loss_box_reg": 0.0646427609026432, "loss_cls": 0.020347592420876026, "loss_rpn_cls": 0.001991485129110515, "loss_rpn_loc": 0.033798862248659134, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.125, "rpn/num_pos_anchors": 94.875, "time": 0.8548326489999454, "total_loss": 0.12101646140217781}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014856578499347961, "eta_seconds": 7952.287270900327, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022954705056179775, "fast_rcnn/fg_cls_accuracy": 0.9770452949438202, "iteration": 4859, "loss_box_reg": 0.06417588889598846, "loss_cls": 0.024928205646574497, "loss_rpn_cls": 0.0023953185882419348, "loss_rpn_loc": 0.0365652646869421, "lr": 0.005, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 153.75, "rpn/num_pos_anchors": 102.25, "time": 0.8659156755002186, "total_loss": 0.13248549425043166}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015284542999324913, "eta_seconds": 7934.0097605425235, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.026614481409001956, "fast_rcnn/fg_cls_accuracy": 0.9733855185909981, "iteration": 4879, "loss_box_reg": 0.05695581994950771, "loss_cls": 0.026949993334710598, "loss_rpn_cls": 0.0022568139247596264, "loss_rpn_loc": 0.031991198658943176, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8785490965001372, "total_loss": 0.13178676005918533}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012375500499729242, "eta_seconds": 7916.612523922542, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 4899, "loss_box_reg": 0.054332148283720016, "loss_cls": 0.025169258937239647, "loss_rpn_cls": 0.0021670913556590676, "loss_rpn_loc": 0.035927778109908104, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8605520105002142, "total_loss": 0.12185906816739589}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014561972000592505, "eta_seconds": 7899.583608123161, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.023943392839564794, "fast_rcnn/fg_cls_accuracy": 0.9760566071604352, "iteration": 4919, "loss_box_reg": 0.06230667047202587, "loss_cls": 0.024050562642514706, "loss_rpn_cls": 0.0027801310643553734, "loss_rpn_loc": 0.041868120431900024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.9079685364995385, "total_loss": 0.1367650660686195}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01624575099958747, "eta_seconds": 7882.62070578202, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019130335409405175, "fast_rcnn/fg_cls_accuracy": 0.9808696645905948, "iteration": 4939, "loss_box_reg": 0.054358769208192825, "loss_cls": 0.020983748137950897, "loss_rpn_cls": 0.002553392667323351, "loss_rpn_loc": 0.031057841144502163, "lr": 0.005, "roi_head/num_bg_samples": 394.625, "roi_head/num_fg_samples": 117.375, "rpn/num_neg_anchors": 172.125, "rpn/num_pos_anchors": 83.875, "time": 0.8572734889994535, "total_loss": 0.11413180537056178}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01480730749972281, "eta_seconds": 7863.060794523997, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4959, "loss_box_reg": 0.05059147626161575, "loss_cls": 0.023940959945321083, "loss_rpn_cls": 0.0020585795864462852, "loss_rpn_loc": 0.02574349381029606, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 173.625, "rpn/num_pos_anchors": 82.375, "time": 0.8511550149996765, "total_loss": 0.11159791017416865}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013298474000293936, "eta_seconds": 7845.386798191916, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.020877322635135136, "fast_rcnn/fg_cls_accuracy": 0.9791226773648649, "iteration": 4979, "loss_box_reg": 0.07002099975943565, "loss_cls": 0.023530988954007626, "loss_rpn_cls": 0.002559944987297058, "loss_rpn_loc": 0.03650126792490482, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.865666287500062, "total_loss": 0.12548251438420266}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013746322499173402, "eta_seconds": 7826.405837039674, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021134797199769052, "fast_rcnn/fg_cls_accuracy": 0.9788652028002309, "iteration": 4999, "loss_box_reg": 0.06474976241588593, "loss_cls": 0.021297583356499672, "loss_rpn_cls": 0.002553505590185523, "loss_rpn_loc": 0.03182519692927599, "lr": 0.005, "roi_head/num_bg_samples": 397.75, "roi_head/num_fg_samples": 114.25, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8724677414993494, "total_loss": 0.12312883127015084}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.017712214999846765, "eta_seconds": 7811.00530376116, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01583389037433155, "fast_rcnn/fg_cls_accuracy": 0.9841661096256684, "iteration": 5019, "loss_box_reg": 0.05722466856241226, "loss_cls": 0.02171662263572216, "loss_rpn_cls": 0.002134993555955589, "loss_rpn_loc": 0.029185540974140167, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8960107909997532, "total_loss": 0.12077607901301235}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011359848999745736, "eta_seconds": 7795.350431704812, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 5039, "loss_box_reg": 0.06120045855641365, "loss_cls": 0.022784790955483913, "loss_rpn_cls": 0.0019911217968910933, "loss_rpn_loc": 0.031012319959700108, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8855154500006392, "total_loss": 0.1210803515277803}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013461599499350996, "eta_seconds": 7777.597656692167, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02298001126126126, "fast_rcnn/fg_cls_accuracy": 0.9770199887387387, "iteration": 5059, "loss_box_reg": 0.05519508570432663, "loss_cls": 0.021881303749978542, "loss_rpn_cls": 0.0015915895928628743, "loss_rpn_loc": 0.028308226726949215, "lr": 0.005, "roi_head/num_bg_samples": 399.375, "roi_head/num_fg_samples": 112.625, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8794450919995143, "total_loss": 0.11374891316518188}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014579236500139814, "eta_seconds": 7759.600550817865, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01996970663265306, "fast_rcnn/fg_cls_accuracy": 0.9800302933673469, "iteration": 5079, "loss_box_reg": 0.06210821121931076, "loss_cls": 0.021420322358608246, "loss_rpn_cls": 0.002174493740312755, "loss_rpn_loc": 0.03592707775533199, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8945027979998486, "total_loss": 0.12663503305520862}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 93.27516183589476, "bbox/AP50": 98.92261668327345, "bbox/AP75": 98.92261668327345, "bbox/APl": 94.44478261656324, "bbox/APm": 91.0697213988469, "bbox/APs": NaN, "data_time": 0.012990881500627438, "eta_seconds": 7742.204293557877, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5099, "loss_box_reg": 0.06781146675348282, "loss_cls": 0.02289230190217495, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0022374700056388974, "loss_rpn_loc": 0.03365788422524929, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8827287754993449, "total_loss": 0.1412262988742441, "validation_loss": 0.1673684855862346}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015810367000085535, "eta_seconds": 7710.074186440191, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5119, "loss_box_reg": 0.06492654047906399, "loss_cls": 0.022693458944559097, "loss_rpn_cls": 0.0022741026477888227, "loss_rpn_loc": 0.031002508476376534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8662360599992098, "total_loss": 0.1364175053895451}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012367580000500311, "eta_seconds": 7694.085353412403, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5139, "loss_box_reg": 0.07034502178430557, "loss_cls": 0.024538532830774784, "loss_rpn_cls": 0.0024909517960622907, "loss_rpn_loc": 0.043401483446359634, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8675591125002029, "total_loss": 0.1635031864279881}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01278185899991513, "eta_seconds": 7676.719174982401, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021799902947443932, "fast_rcnn/fg_cls_accuracy": 0.9782000970525561, "iteration": 5159, "loss_box_reg": 0.06870999187231064, "loss_cls": 0.022335607558488846, "loss_rpn_cls": 0.0037398403510451317, "loss_rpn_loc": 0.03882879391312599, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 156.25, "rpn/num_pos_anchors": 99.75, "time": 0.8584405870005867, "total_loss": 0.14448954432737082}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014791360999879544, "eta_seconds": 7654.754357859041, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.021103493480725623, "fast_rcnn/fg_cls_accuracy": 0.9788965065192744, "iteration": 5179, "loss_box_reg": 0.062266405671834946, "loss_cls": 0.020777718164026737, "loss_rpn_cls": 0.0027317109052091837, "loss_rpn_loc": 0.03314981982111931, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.8586420629999338, "total_loss": 0.1260088358540088}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0178490789994612, "eta_seconds": 7639.841349945431, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.020830322300910538, "fast_rcnn/fg_cls_accuracy": 0.9791696776990895, "iteration": 5199, "loss_box_reg": 0.05128978006541729, "loss_cls": 0.020412922836840153, "loss_rpn_cls": 0.00241474446374923, "loss_rpn_loc": 0.032859938219189644, "lr": 0.005, "roi_head/num_bg_samples": 397.875, "roi_head/num_fg_samples": 114.125, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8652067134999015, "total_loss": 0.11148050939664245}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014005898499817704, "eta_seconds": 7625.286419499909, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5219, "loss_box_reg": 0.07316218316555023, "loss_cls": 0.02596404869109392, "loss_rpn_cls": 0.002091426053084433, "loss_rpn_loc": 0.02928838226944208, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8749200555002972, "total_loss": 0.13676173146814108}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014579200498701539, "eta_seconds": 7606.520547918383, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 5239, "loss_box_reg": 0.057390253990888596, "loss_cls": 0.025880426168441772, "loss_rpn_cls": 0.0021389470202848315, "loss_rpn_loc": 0.030492116697132587, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.25, "rpn/num_pos_anchors": 98.75, "time": 0.8600255340006697, "total_loss": 0.12460418161936104}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013745038500019291, "eta_seconds": 7588.538982743184, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5259, "loss_box_reg": 0.056663066148757935, "loss_cls": 0.023413637652993202, "loss_rpn_cls": 0.0019466887461021543, "loss_rpn_loc": 0.028949135914444923, "lr": 0.005, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8934628930010149, "total_loss": 0.11742609593784437}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013735102999817173, "eta_seconds": 7571.79154187835, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.021936217350746266, "fast_rcnn/fg_cls_accuracy": 0.9780637826492538, "iteration": 5279, "loss_box_reg": 0.053737033158540726, "loss_cls": 0.020394417457282543, "loss_rpn_cls": 0.0022291388595476747, "loss_rpn_loc": 0.03190678358078003, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.888264144000459, "total_loss": 0.10988271929090843}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014853118500468554, "eta_seconds": 7555.155925972386, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5299, "loss_box_reg": 0.06301657855510712, "loss_cls": 0.026609317399561405, "loss_rpn_cls": 0.0028848357032984495, "loss_rpn_loc": 0.03864687494933605, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8611808724999719, "total_loss": 0.1402190721128136}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.019291798500489676, "eta_seconds": 7538.447945299933, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5319, "loss_box_reg": 0.05684913694858551, "loss_cls": 0.023610541597008705, "loss_rpn_cls": 0.0021845183800905943, "loss_rpn_loc": 0.036675380542874336, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.883741806499529, "total_loss": 0.12332985328976065}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011460525499387586, "eta_seconds": 7517.054734584882, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5339, "loss_box_reg": 0.05149811878800392, "loss_cls": 0.021740407682955265, "loss_rpn_cls": 0.0019605476409196854, "loss_rpn_loc": 0.025657817721366882, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 175.875, "rpn/num_pos_anchors": 80.125, "time": 0.8436655450004764, "total_loss": 0.1036763918818906}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014291302999481559, "eta_seconds": 7497.301465048081, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01953339629120879, "fast_rcnn/fg_cls_accuracy": 0.9804666037087912, "iteration": 5359, "loss_box_reg": 0.08082463592290878, "loss_cls": 0.025784828700125217, "loss_rpn_cls": 0.0018990978132933378, "loss_rpn_loc": 0.028976663015782833, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8448055550006757, "total_loss": 0.13354162609903142}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012258945499524998, "eta_seconds": 7480.5243409162, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021518049568965518, "fast_rcnn/fg_cls_accuracy": 0.9784819504310345, "iteration": 5379, "loss_box_reg": 0.05838654190301895, "loss_cls": 0.022231215611100197, "loss_rpn_cls": 0.002136561321094632, "loss_rpn_loc": 0.02987600862979889, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8743206509998345, "total_loss": 0.12518500722944736}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 95.04890968998043, "bbox/AP50": 98.94553151126911, "bbox/AP75": 98.94553151126911, "bbox/APl": 96.15622781452859, "bbox/APm": 92.46222763709739, "bbox/APs": NaN, "data_time": 0.017025694999574625, "eta_seconds": 7462.112617529453, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5399, "loss_box_reg": 0.06437629461288452, "loss_cls": 0.021576158702373505, "loss_failed_to_get_better_count": 3.0, "loss_rpn_cls": 0.0018772268667817116, "loss_rpn_loc": 0.03226642683148384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.839295048999702, "total_loss": 0.12637696543242782, "validation_loss": 0.13707834863576526}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014937989500140247, "eta_seconds": 7443.814259008943, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02089447176395939, "fast_rcnn/fg_cls_accuracy": 0.9791055282360406, "iteration": 5419, "loss_box_reg": 0.0552052017301321, "loss_cls": 0.023376869969069958, "loss_rpn_cls": 0.002138674957677722, "loss_rpn_loc": 0.03407907858490944, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8698784409998552, "total_loss": 0.1193440561182797}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013423880000118515, "eta_seconds": 7427.8900407680385, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5439, "loss_box_reg": 0.05655006691813469, "loss_cls": 0.020559591241180897, "loss_rpn_cls": 0.002320499625056982, "loss_rpn_loc": 0.02890327014029026, "lr": 0.005, "roi_head/num_bg_samples": 391.0, "roi_head/num_fg_samples": 121.0, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.8760674590002964, "total_loss": 0.11336366704199463}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013994625999657728, "eta_seconds": 7409.115206408971, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02149487567204301, "fast_rcnn/fg_cls_accuracy": 0.978505124327957, "iteration": 5459, "loss_box_reg": 0.07386057823896408, "loss_cls": 0.026604370214045048, "loss_rpn_cls": 0.002588826813735068, "loss_rpn_loc": 0.03413362801074982, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8716043390004415, "total_loss": 0.13196638779481873}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015597055500620627, "eta_seconds": 7391.041927670588, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.020091788378455145, "fast_rcnn/fg_cls_accuracy": 0.9799082116215448, "iteration": 5479, "loss_box_reg": 0.07050042226910591, "loss_cls": 0.02474079467356205, "loss_rpn_cls": 0.0021399272372946143, "loss_rpn_loc": 0.03489230014383793, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.625, "rpn/num_pos_anchors": 98.375, "time": 0.8589253799991639, "total_loss": 0.13852309167850763}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013122772500537394, "eta_seconds": 7380.782008658164, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5499, "loss_box_reg": 0.05695950612425804, "loss_cls": 0.02017846144735813, "loss_rpn_cls": 0.0020662585739046335, "loss_rpn_loc": 0.032298844307661057, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8999541200000749, "total_loss": 0.12246235285419971}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.0167387419996885, "eta_seconds": 7363.790504257526, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.020821030161507912, "fast_rcnn/fg_cls_accuracy": 0.9791789698384921, "iteration": 5519, "loss_box_reg": 0.058595409616827965, "loss_cls": 0.02239445224404335, "loss_rpn_cls": 0.0017480264650657773, "loss_rpn_loc": 0.027675089426338673, "lr": 0.005, "roi_head/num_bg_samples": 392.75, "roi_head/num_fg_samples": 119.25, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8498236614996131, "total_loss": 0.1146762321004644}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013517774999854737, "eta_seconds": 7351.907261574616, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.025513980263157897, "fast_rcnn/fg_cls_accuracy": 0.9744860197368421, "iteration": 5539, "loss_box_reg": 0.05855027958750725, "loss_cls": 0.02038880344480276, "loss_rpn_cls": 0.0016652494668960571, "loss_rpn_loc": 0.032311808317899704, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 179.25, "rpn/num_pos_anchors": 76.75, "time": 0.8776390135008114, "total_loss": 0.1092486809939146}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.011882913499903225, "eta_seconds": 7331.50439608604, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.027322972074468085, "fast_rcnn/fg_cls_accuracy": 0.9726770279255319, "iteration": 5559, "loss_box_reg": 0.07120954245328903, "loss_cls": 0.02515412401407957, "loss_rpn_cls": 0.002385318512097001, "loss_rpn_loc": 0.05022135563194752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.5, "rpn/num_pos_anchors": 89.5, "time": 0.8847628325002006, "total_loss": 0.15015550452517346}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.014155146999655699, "eta_seconds": 7319.531056854045, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5579, "loss_box_reg": 0.05726276524364948, "loss_cls": 0.021695980802178383, "loss_rpn_cls": 0.003677344066090882, "loss_rpn_loc": 0.03555099293589592, "lr": 0.005, "roi_head/num_bg_samples": 389.375, "roi_head/num_fg_samples": 122.625, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.889490406000732, "total_loss": 0.1365722599439323}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015677778999815928, "eta_seconds": 7308.0039661134015, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01936768149882904, "fast_rcnn/fg_cls_accuracy": 0.9806323185011709, "iteration": 5599, "loss_box_reg": 0.05844062566757202, "loss_cls": 0.024206336587667465, "loss_rpn_cls": 0.0030458024702966213, "loss_rpn_loc": 0.029629665426909924, "lr": 0.005, "roi_head/num_bg_samples": 385.5, "roi_head/num_fg_samples": 126.5, "rpn/num_neg_anchors": 157.375, "rpn/num_pos_anchors": 98.625, "time": 0.8965334399999847, "total_loss": 0.12030651373788714}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.012024970000311441, "eta_seconds": 7291.668960754016, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0218780449610245, "fast_rcnn/fg_cls_accuracy": 0.9781219550389755, "iteration": 5619, "loss_box_reg": 0.05273590423166752, "loss_cls": 0.022803835570812225, "loss_rpn_cls": 0.002020141459070146, "loss_rpn_loc": 0.03192746266722679, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8826613595001618, "total_loss": 0.11135749111417681}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.01687377500002185, "eta_seconds": 7273.004645558488, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025233133963598945, "fast_rcnn/fg_cls_accuracy": 0.9747668660364011, "iteration": 5639, "loss_box_reg": 0.05719747394323349, "loss_cls": 0.021588620729744434, "loss_rpn_cls": 0.0022916418965905905, "loss_rpn_loc": 0.03184593468904495, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8682225524989917, "total_loss": 0.10914462374057621}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.015325386500990135, "eta_seconds": 7258.687283364799, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 5659, "loss_box_reg": 0.06096772849559784, "loss_cls": 0.023034741170704365, "loss_rpn_cls": 0.0021676926407963037, "loss_rpn_loc": 0.034716688096523285, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8767866954995043, "total_loss": 0.12500563205685467}

[07/29 19:49:54] detectron2 INFO: {"data_time": 0.013309132998983841, "eta_seconds": 7244.426740044826, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02398894699691992, "fast_rcnn/fg_cls_accuracy": 0.9760110530030801, "iteration": 5679, "loss_box_reg": 0.056637827306985855, "loss_cls": 0.023409683257341385, "loss_rpn_cls": 0.0018303157994523644, "loss_rpn_loc": 0.031725311651825905, "lr": 0.005, "roi_head/num_bg_samples": 389.75, "roi_head/num_fg_samples": 122.25, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.890535961999376, "total_loss": 0.11612003430491313}

[07/29 19:49:54] detectron2 INFO: {"bbox/AP": 94.76483093972008, "bbox/AP50": 98.95816960546958, "bbox/AP75": 98.95816613684278, "bbox/APl": 95.88726467497828, "bbox/APm": 91.9470155575016, "bbox/APs": NaN, "data_time": 0.015500677500313031, "eta_seconds": 7227.014345524829, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 5699, "loss_box_reg": 0.05493253283202648, "loss_cls": 0.023701573722064495, "loss_failed_to_get_better_count": 4.0, "loss_rpn_cls": 0.0020725850481539965, "loss_rpn_loc": 0.02556756976991892, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8545353485005762, "total_loss": 0.11283672647550702, "validation_loss": 0.13626214306693646}{"data_time": 0.013604358499833324, "eta_seconds": 7392.379508102773, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5719, "loss_box_reg": 0.05309678427875042, "loss_cls": 0.02268114034086466, "loss_rpn_cls": 0.0021833128994330764, "loss_rpn_loc": 0.02707052417099476, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 159.0, "rpn/num_pos_anchors": 97.0, "time": 0.8926916444997914, "total_loss": 0.11451471340842545}

[07/29 19:51:48] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 19:51:48] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 19:51:48] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 19:51:48] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 19:51:48] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:51:48] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 19:51:48] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:51:48] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:51:48] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 19:51:48] detectron2 INFO: {"data_time": 0.02939015450010629, "eta_seconds": 11686.352576468416, "fast_rcnn/cls_accuracy": 0.786865234375, "fast_rcnn/false_negative": 0.9394059153493115, "fast_rcnn/fg_cls_accuracy": 0.060594084650688426, "iteration": 19, "loss_box_reg": 0.12881449237465858, "loss_cls": 0.6249855756759644, "loss_rpn_cls": 0.7874684631824493, "loss_rpn_loc": 0.2691366523504257, "lr": 8.408750000000002e-05, "roi_head/num_bg_samples": 474.5, "roi_head/num_fg_samples": 37.5, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8358738699998867, "total_loss": 1.9008187465369701}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.030504754000048706, "eta_seconds": 12071.132336078655, "fast_rcnn/cls_accuracy": 0.82177734375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 39, "loss_box_reg": 0.5570397675037384, "loss_cls": 0.4548873007297516, "loss_rpn_cls": 0.18511445075273514, "loss_rpn_loc": 0.21736495941877365, "lr": 0.00016733750000000002, "roi_head/num_bg_samples": 420.75, "roi_head/num_fg_samples": 91.25, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.873537560999921, "total_loss": 1.6033400520682335}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.018182287000172437, "eta_seconds": 12211.82605749436, "fast_rcnn/cls_accuracy": 0.8115234375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 59, "loss_box_reg": 0.6337968111038208, "loss_cls": 0.4483332186937332, "loss_rpn_cls": 0.11832546815276146, "loss_rpn_loc": 0.1953253597021103, "lr": 0.0002505875, "roi_head/num_bg_samples": 415.5, "roi_head/num_fg_samples": 96.5, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8913536900001873, "total_loss": 1.436222393065691}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01889697700016768, "eta_seconds": 12284.491105073626, "fast_rcnn/cls_accuracy": 0.78271484375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 79, "loss_box_reg": 0.7354804873466492, "loss_cls": 0.45420069992542267, "loss_rpn_cls": 0.07250338047742844, "loss_rpn_loc": 0.16615113615989685, "lr": 0.0003338375, "roi_head/num_bg_samples": 400.75, "roi_head/num_fg_samples": 111.25, "rpn/num_neg_anchors": 153.625, "rpn/num_pos_anchors": 102.375, "time": 0.8865976399999909, "total_loss": 1.4724470991641283}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.018002271499881317, "eta_seconds": 12308.280497507018, "fast_rcnn/cls_accuracy": 0.775634765625, "fast_rcnn/false_negative": 0.9627708420293705, "fast_rcnn/fg_cls_accuracy": 0.037229157970629534, "iteration": 99, "loss_box_reg": 0.8062326312065125, "loss_cls": 0.42708392441272736, "loss_rpn_cls": 0.05313627049326897, "loss_rpn_loc": 0.12421421706676483, "lr": 0.0004170875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.89259754349996, "total_loss": 1.4219505097717047}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013190883500101336, "eta_seconds": 12300.492148384357, "fast_rcnn/cls_accuracy": 0.836669921875, "fast_rcnn/false_negative": 0.6792227649825398, "fast_rcnn/fg_cls_accuracy": 0.32077723501746025, "iteration": 119, "loss_box_reg": 0.6585336923599243, "loss_cls": 0.34507088363170624, "loss_rpn_cls": 0.03669000416994095, "loss_rpn_loc": 0.11788284033536911, "lr": 0.0005003375000000001, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8962868920000346, "total_loss": 1.1734376233071089}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01545518400007495, "eta_seconds": 12287.084732144256, "fast_rcnn/cls_accuracy": 0.884765625, "fast_rcnn/false_negative": 0.30859375, "fast_rcnn/fg_cls_accuracy": 0.69140625, "iteration": 139, "loss_box_reg": 0.5096877813339233, "loss_cls": 0.26354336738586426, "loss_rpn_cls": 0.018867461010813713, "loss_rpn_loc": 0.08101745694875717, "lr": 0.0005835875000000001, "roi_head/num_bg_samples": 388.125, "roi_head/num_fg_samples": 123.875, "rpn/num_neg_anchors": 172.0, "rpn/num_pos_anchors": 84.0, "time": 0.887171862500054, "total_loss": 0.8601078088395298}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01646772100002636, "eta_seconds": 12307.382867401684, "fast_rcnn/cls_accuracy": 0.919921875, "fast_rcnn/false_negative": 0.17972995923913043, "fast_rcnn/fg_cls_accuracy": 0.8202700407608696, "iteration": 159, "loss_box_reg": 0.3034415692090988, "loss_cls": 0.20181019604206085, "loss_rpn_cls": 0.014326298609375954, "loss_rpn_loc": 0.07085645943880081, "lr": 0.0006668375, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.9058895885000311, "total_loss": 0.5821873405948281}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015896259000328428, "eta_seconds": 12263.543236107209, "fast_rcnn/cls_accuracy": 0.915283203125, "fast_rcnn/false_negative": 0.19735852925095682, "fast_rcnn/fg_cls_accuracy": 0.8026414707490432, "iteration": 179, "loss_box_reg": 0.2435252144932747, "loss_cls": 0.19679177552461624, "loss_rpn_cls": 0.015311155002564192, "loss_rpn_loc": 0.06794760376214981, "lr": 0.0007500875, "roi_head/num_bg_samples": 395.75, "roi_head/num_fg_samples": 116.25, "rpn/num_neg_anchors": 174.0, "rpn/num_pos_anchors": 82.0, "time": 0.8723723070002052, "total_loss": 0.5317779292818159}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012299204000100872, "eta_seconds": 12224.272998899309, "fast_rcnn/cls_accuracy": 0.932861328125, "fast_rcnn/false_negative": 0.19618584485587062, "fast_rcnn/fg_cls_accuracy": 0.8038141551441293, "iteration": 199, "loss_box_reg": 0.22756582498550415, "loss_cls": 0.16675635427236557, "loss_rpn_cls": 0.009464774280786514, "loss_rpn_loc": 0.0724685788154602, "lr": 0.0008333375, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8750523474998317, "total_loss": 0.4794214074499905}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014126985500070077, "eta_seconds": 12202.029604787009, "fast_rcnn/cls_accuracy": 0.950927734375, "fast_rcnn/false_negative": 0.12814344152360516, "fast_rcnn/fg_cls_accuracy": 0.8718565584763949, "iteration": 219, "loss_box_reg": 0.21683961898088455, "loss_cls": 0.1309489831328392, "loss_rpn_cls": 0.00984030868858099, "loss_rpn_loc": 0.06770532205700874, "lr": 0.0009165875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8745993960001215, "total_loss": 0.4421173296868801}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014485199499858936, "eta_seconds": 12151.444937739672, "fast_rcnn/cls_accuracy": 0.95654296875, "fast_rcnn/false_negative": 0.1064453125, "fast_rcnn/fg_cls_accuracy": 0.8935546875, "iteration": 239, "loss_box_reg": 0.17889448255300522, "loss_cls": 0.11397441476583481, "loss_rpn_cls": 0.010145330801606178, "loss_rpn_loc": 0.05544925481081009, "lr": 0.0009998375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8600121944998591, "total_loss": 0.3471206361427903}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.019302317499978017, "eta_seconds": 12080.389871734214, "fast_rcnn/cls_accuracy": 0.9541015625, "fast_rcnn/false_negative": 0.12636323851203501, "fast_rcnn/fg_cls_accuracy": 0.873636761487965, "iteration": 259, "loss_box_reg": 0.18179909139871597, "loss_cls": 0.1189894787967205, "loss_rpn_cls": 0.007479577325284481, "loss_rpn_loc": 0.061658645048737526, "lr": 0.0010830875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.855434207999906, "total_loss": 0.36115485936170444}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013283666000006633, "eta_seconds": 12055.122413197958, "fast_rcnn/cls_accuracy": 0.926025390625, "fast_rcnn/false_negative": 0.162109375, "fast_rcnn/fg_cls_accuracy": 0.837890625, "iteration": 279, "loss_box_reg": 0.21112839132547379, "loss_cls": 0.18035943061113358, "loss_rpn_cls": 0.014031817205250263, "loss_rpn_loc": 0.07702159136533737, "lr": 0.0011663375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8750548134999008, "total_loss": 0.5035657323896885}

[07/29 19:51:48] detectron2 INFO: {"bbox/AP": 83.41258386889328, "bbox/AP50": 98.38983659105097, "bbox/AP75": 97.104577022374, "bbox/APl": 84.48451837716055, "bbox/APm": 82.36344665876535, "bbox/APs": NaN, "data_time": 0.016146144499771253, "eta_seconds": 12043.127799364234, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 299, "loss_box_reg": 0.16537624597549438, "loss_cls": 0.11342864856123924, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.007433959748595953, "loss_rpn_loc": 0.0554153174161911, "lr": 0.0012495875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8814841179998893, "total_loss": 0.33745233179070055, "validation_loss": 0.32906902715045755}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.016304798999954073, "eta_seconds": 12019.978845197964, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.076171875, "fast_rcnn/fg_cls_accuracy": 0.923828125, "iteration": 319, "loss_box_reg": 0.15682829916477203, "loss_cls": 0.0946701243519783, "loss_rpn_cls": 0.0038296080892905593, "loss_rpn_loc": 0.06303796917200089, "lr": 0.0013328374999999999, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 155.125, "rpn/num_pos_anchors": 100.875, "time": 0.8458358415000475, "total_loss": 0.31777258962392807}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01102276699975846, "eta_seconds": 12006.686827094072, "fast_rcnn/cls_accuracy": 0.963134765625, "fast_rcnn/false_negative": 0.10078125, "fast_rcnn/fg_cls_accuracy": 0.89921875, "iteration": 339, "loss_box_reg": 0.15902839601039886, "loss_cls": 0.09758839383721352, "loss_rpn_cls": 0.005238221259787679, "loss_rpn_loc": 0.062006376683712006, "lr": 0.0014160874999999999, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.883200966000004, "total_loss": 0.3246980574913323}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.010798721999890404, "eta_seconds": 11976.53362377627, "fast_rcnn/cls_accuracy": 0.95947265625, "fast_rcnn/false_negative": 0.11650020879732739, "fast_rcnn/fg_cls_accuracy": 0.8834997912026725, "iteration": 359, "loss_box_reg": 0.1674002781510353, "loss_cls": 0.11093494668602943, "loss_rpn_cls": 0.009214169345796108, "loss_rpn_loc": 0.05432415381073952, "lr": 0.0014993375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.8555542895001054, "total_loss": 0.34753162460401654}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015279147000001103, "eta_seconds": 11946.566867246482, "fast_rcnn/cls_accuracy": 0.967041015625, "fast_rcnn/false_negative": 0.0796565594059406, "fast_rcnn/fg_cls_accuracy": 0.9203434405940594, "iteration": 379, "loss_box_reg": 0.14857570081949234, "loss_cls": 0.08996423333883286, "loss_rpn_cls": 0.006297955987975001, "loss_rpn_loc": 0.05611295625567436, "lr": 0.0015825875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8612688080002044, "total_loss": 0.3035198914585635}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012088851499356679, "eta_seconds": 11909.025623667902, "fast_rcnn/cls_accuracy": 0.966064453125, "fast_rcnn/false_negative": 0.0810546875, "fast_rcnn/fg_cls_accuracy": 0.9189453125, "iteration": 399, "loss_box_reg": 0.14267047494649887, "loss_cls": 0.08620045706629753, "loss_rpn_cls": 0.003031725063920021, "loss_rpn_loc": 0.05911160446703434, "lr": 0.0016658375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.8536961670001801, "total_loss": 0.30017199623398483}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012189826500161871, "eta_seconds": 11883.833854455119, "fast_rcnn/cls_accuracy": 0.971923828125, "fast_rcnn/false_negative": 0.0693359375, "fast_rcnn/fg_cls_accuracy": 0.9306640625, "iteration": 419, "loss_box_reg": 0.13817040622234344, "loss_cls": 0.07225135341286659, "loss_rpn_cls": 0.004466069862246513, "loss_rpn_loc": 0.0624714121222496, "lr": 0.0017490875, "roi_head/num_bg_samples": 395.625, "roi_head/num_fg_samples": 116.375, "rpn/num_neg_anchors": 170.25, "rpn/num_pos_anchors": 85.75, "time": 0.853337961500074, "total_loss": 0.2805070823524147}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.011904372000117291, "eta_seconds": 11840.29540779574, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.07421875, "fast_rcnn/fg_cls_accuracy": 0.92578125, "iteration": 439, "loss_box_reg": 0.1460084617137909, "loss_cls": 0.08459053561091423, "loss_rpn_cls": 0.004542296519502997, "loss_rpn_loc": 0.06430486589670181, "lr": 0.0018323375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.75, "rpn/num_pos_anchors": 88.25, "time": 0.8255171649998374, "total_loss": 0.28996874997392297}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01606286150035885, "eta_seconds": 11815.596436706812, "fast_rcnn/cls_accuracy": 0.972412109375, "fast_rcnn/false_negative": 0.06473777326233184, "fast_rcnn/fg_cls_accuracy": 0.9352622267376682, "iteration": 459, "loss_box_reg": 0.1321180760860443, "loss_cls": 0.06950072944164276, "loss_rpn_cls": 0.004573044599965215, "loss_rpn_loc": 0.06276549398899078, "lr": 0.0019155875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8637742569994771, "total_loss": 0.29605477419681847}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012803132500266656, "eta_seconds": 11785.865274366573, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.07613281250000001, "fast_rcnn/fg_cls_accuracy": 0.9238671875, "iteration": 479, "loss_box_reg": 0.1410418078303337, "loss_cls": 0.0620583388954401, "loss_rpn_cls": 0.01461251126602292, "loss_rpn_loc": 0.059028103947639465, "lr": 0.0019988375, "roi_head/num_bg_samples": 399.625, "roi_head/num_fg_samples": 112.375, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.868328073000157, "total_loss": 0.3025325112976134}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015173395499914477, "eta_seconds": 11766.056904469786, "fast_rcnn/cls_accuracy": 0.967529296875, "fast_rcnn/false_negative": 0.0791015625, "fast_rcnn/fg_cls_accuracy": 0.9208984375, "iteration": 499, "loss_box_reg": 0.14217590540647507, "loss_cls": 0.08436384052038193, "loss_rpn_cls": 0.005042934790253639, "loss_rpn_loc": 0.054758913815021515, "lr": 0.0020820875, "roi_head/num_bg_samples": 388.75, "roi_head/num_fg_samples": 123.25, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.869340422500045, "total_loss": 0.2905305549502373}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.011143657999582501, "eta_seconds": 11748.62700015978, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.09221540178571429, "fast_rcnn/fg_cls_accuracy": 0.9077845982142857, "iteration": 519, "loss_box_reg": 0.14154227823019028, "loss_cls": 0.08936139941215515, "loss_rpn_cls": 0.0032708962680771947, "loss_rpn_loc": 0.06133125722408295, "lr": 0.0021653375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8633433045001766, "total_loss": 0.2882083682343364}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014494807000119181, "eta_seconds": 11733.565006896564, "fast_rcnn/cls_accuracy": 0.9521484375, "fast_rcnn/false_negative": 0.095703125, "fast_rcnn/fg_cls_accuracy": 0.904296875, "iteration": 539, "loss_box_reg": 0.16541259735822678, "loss_cls": 0.12462004274129868, "loss_rpn_cls": 0.005535591393709183, "loss_rpn_loc": 0.06912935525178909, "lr": 0.0022485875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8846403235002072, "total_loss": 0.36126803897786885}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012273919000563183, "eta_seconds": 11735.521759175765, "fast_rcnn/cls_accuracy": 0.95849609375, "fast_rcnn/false_negative": 0.0980273705244081, "fast_rcnn/fg_cls_accuracy": 0.9019726294755919, "iteration": 559, "loss_box_reg": 0.14862347394227982, "loss_cls": 0.10806813836097717, "loss_rpn_cls": 0.006631288910284638, "loss_rpn_loc": 0.0664207711815834, "lr": 0.0023318375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8845762955002101, "total_loss": 0.3488547676242888}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.0118424329998561, "eta_seconds": 11702.231173056018, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.056640625, "fast_rcnn/fg_cls_accuracy": 0.943359375, "iteration": 579, "loss_box_reg": 0.1253226026892662, "loss_cls": 0.07414546608924866, "loss_rpn_cls": 0.008195447502657771, "loss_rpn_loc": 0.05210341885685921, "lr": 0.0024150875, "roi_head/num_bg_samples": 394.75, "roi_head/num_fg_samples": 117.25, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8636824619998151, "total_loss": 0.2699383229482919}

[07/29 19:51:48] detectron2 INFO: {"bbox/AP": 80.35829873197507, "bbox/AP50": 98.58295968097553, "bbox/AP75": 97.43300081767086, "bbox/APl": 78.67308581650998, "bbox/APm": 84.08251405024096, "bbox/APs": NaN, "data_time": 0.013514647000192781, "eta_seconds": 11678.932228370002, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 599, "loss_box_reg": 0.13238591700792313, "loss_cls": 0.06162050738930702, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004966367734596133, "loss_rpn_loc": 0.05982688069343567, "lr": 0.0024983375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8484068394996029, "total_loss": 0.2661393281305209, "validation_loss": 0.3150369518328001}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.0135088239999277, "eta_seconds": 11657.219651099671, "fast_rcnn/cls_accuracy": 0.96826171875, "fast_rcnn/false_negative": 0.07183139162719242, "fast_rcnn/fg_cls_accuracy": 0.9281686083728076, "iteration": 619, "loss_box_reg": 0.13828347623348236, "loss_cls": 0.08472422882914543, "loss_rpn_cls": 0.006264761555939913, "loss_rpn_loc": 0.06929788365960121, "lr": 0.0025815875, "roi_head/num_bg_samples": 397.25, "roi_head/num_fg_samples": 114.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8460839750000559, "total_loss": 0.30213607591576874}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014871884000058344, "eta_seconds": 11637.040077188369, "fast_rcnn/cls_accuracy": 0.9736328125, "fast_rcnn/false_negative": 0.06561053240740741, "fast_rcnn/fg_cls_accuracy": 0.9343894675925926, "iteration": 639, "loss_box_reg": 0.11789693310856819, "loss_cls": 0.07285590097308159, "loss_rpn_cls": 0.0053652566857635975, "loss_rpn_loc": 0.05852055549621582, "lr": 0.0026648374999999995, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8505885125000532, "total_loss": 0.26677903556264937}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014161194500047714, "eta_seconds": 11606.65481794033, "fast_rcnn/cls_accuracy": 0.973388671875, "fast_rcnn/false_negative": 0.06114628335798224, "fast_rcnn/fg_cls_accuracy": 0.9388537166420178, "iteration": 659, "loss_box_reg": 0.11722910404205322, "loss_cls": 0.06616359204053879, "loss_rpn_cls": 0.0080324187874794, "loss_rpn_loc": 0.07135805487632751, "lr": 0.0027480875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8602919130003102, "total_loss": 0.2675582447554916}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014358993000314513, "eta_seconds": 11589.254840700332, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05121358797635958, "fast_rcnn/fg_cls_accuracy": 0.9487864120236404, "iteration": 679, "loss_box_reg": 0.10997515171766281, "loss_cls": 0.05781390517950058, "loss_rpn_cls": 0.004788712132722139, "loss_rpn_loc": 0.055166978389024734, "lr": 0.0028313374999999995, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.869146297000043, "total_loss": 0.23458211263641715}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012000708500181645, "eta_seconds": 11582.719539248686, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.0615234375, "fast_rcnn/fg_cls_accuracy": 0.9384765625, "iteration": 699, "loss_box_reg": 0.129492849111557, "loss_cls": 0.07111507281661034, "loss_rpn_cls": 0.004493537941016257, "loss_rpn_loc": 0.05584186688065529, "lr": 0.0029145875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8904892555001425, "total_loss": 0.27537386934272945}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.0145140229997196, "eta_seconds": 11571.990401450112, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 719, "loss_box_reg": 0.11887574195861816, "loss_cls": 0.06795364245772362, "loss_rpn_cls": 0.0033925181487575173, "loss_rpn_loc": 0.055030809715390205, "lr": 0.0029978374999999995, "roi_head/num_bg_samples": 390.0, "roi_head/num_fg_samples": 122.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8808223520004503, "total_loss": 0.24797416175715625}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01307606799991845, "eta_seconds": 11554.56401729011, "fast_rcnn/cls_accuracy": 0.97412109375, "fast_rcnn/false_negative": 0.05908962111398963, "fast_rcnn/fg_cls_accuracy": 0.9409103788860104, "iteration": 739, "loss_box_reg": 0.1245066188275814, "loss_cls": 0.06823312118649483, "loss_rpn_cls": 0.004734032321721315, "loss_rpn_loc": 0.05789220705628395, "lr": 0.0030810875, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8724708105005448, "total_loss": 0.25583526177797467}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012447178500224254, "eta_seconds": 11532.523588208307, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.06630535710901822, "fast_rcnn/fg_cls_accuracy": 0.9336946428909818, "iteration": 759, "loss_box_reg": 0.11907549947500229, "loss_cls": 0.06540242955088615, "loss_rpn_cls": 0.0041093959007412195, "loss_rpn_loc": 0.06332714855670929, "lr": 0.0031643374999999994, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8468276620001234, "total_loss": 0.24481784249655902}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01187162200039893, "eta_seconds": 11519.711248970103, "fast_rcnn/cls_accuracy": 0.9765625, "fast_rcnn/false_negative": 0.0557175727739726, "fast_rcnn/fg_cls_accuracy": 0.9442824272260274, "iteration": 779, "loss_box_reg": 0.12456638365983963, "loss_cls": 0.061244869604706764, "loss_rpn_cls": 0.0037338774418458343, "loss_rpn_loc": 0.0596346165984869, "lr": 0.0032475875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8824129194995294, "total_loss": 0.25049503380432725}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012807592999706685, "eta_seconds": 11502.314342643522, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.05575284090909091, "fast_rcnn/fg_cls_accuracy": 0.9442471590909092, "iteration": 799, "loss_box_reg": 0.11877157166600227, "loss_cls": 0.06167830340564251, "loss_rpn_cls": 0.004014276899397373, "loss_rpn_loc": 0.055346591398119926, "lr": 0.0033308375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 174.125, "rpn/num_pos_anchors": 81.875, "time": 0.877514559500014, "total_loss": 0.25743075169157237}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015489027000057831, "eta_seconds": 11491.371008443351, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.054571472772277224, "fast_rcnn/fg_cls_accuracy": 0.9454285272277227, "iteration": 819, "loss_box_reg": 0.11021328344941139, "loss_cls": 0.05502988211810589, "loss_rpn_cls": 0.00427356525324285, "loss_rpn_loc": 0.07074590399861336, "lr": 0.0034140875, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 155.25, "rpn/num_pos_anchors": 100.75, "time": 0.8855874439996114, "total_loss": 0.2403978342190385}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01506244800020795, "eta_seconds": 11468.434556696986, "fast_rcnn/cls_accuracy": 0.975341796875, "fast_rcnn/false_negative": 0.05666498370181406, "fast_rcnn/fg_cls_accuracy": 0.943335016298186, "iteration": 839, "loss_box_reg": 0.11180135607719421, "loss_cls": 0.061304209753870964, "loss_rpn_cls": 0.004914319375529885, "loss_rpn_loc": 0.05708741024136543, "lr": 0.0034973375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8517343014996186, "total_loss": 0.23385070823132992}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013418384000033257, "eta_seconds": 11449.058482766935, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05544679449648712, "fast_rcnn/fg_cls_accuracy": 0.9445532055035128, "iteration": 859, "loss_box_reg": 0.11569477990269661, "loss_cls": 0.06229258514940739, "loss_rpn_cls": 0.0068636140786111355, "loss_rpn_loc": 0.0628298930823803, "lr": 0.0035805875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8614465094997286, "total_loss": 0.25518918549641967}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014103679000072589, "eta_seconds": 11433.578741616986, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 879, "loss_box_reg": 0.12260067090392113, "loss_cls": 0.06857239827513695, "loss_rpn_cls": 0.006648323964327574, "loss_rpn_loc": 0.07462092489004135, "lr": 0.0036638375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8772594430001845, "total_loss": 0.27113425778225064}

[07/29 19:51:48] detectron2 INFO: {"bbox/AP": 88.2900801425749, "bbox/AP50": 98.81273878550125, "bbox/AP75": 98.7412826713019, "bbox/APl": 88.86570946975849, "bbox/APm": 87.34035917496533, "bbox/APs": NaN, "data_time": 0.02003246050026064, "eta_seconds": 11431.046205987095, "fast_rcnn/cls_accuracy": 0.9716796875, "fast_rcnn/false_negative": 0.0859375, "fast_rcnn/fg_cls_accuracy": 0.9140625, "iteration": 899, "loss_box_reg": 0.12612708657979965, "loss_cls": 0.07696450874209404, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.00522907474078238, "loss_rpn_loc": 0.05966793745756149, "lr": 0.0037470875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8938876710003569, "total_loss": 0.27521815593354404, "validation_loss": 0.27454329396213306}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01586997549975422, "eta_seconds": 11409.577102119452, "fast_rcnn/cls_accuracy": 0.975830078125, "fast_rcnn/false_negative": 0.05459741876310273, "fast_rcnn/fg_cls_accuracy": 0.9454025812368974, "iteration": 919, "loss_box_reg": 0.11372284591197968, "loss_cls": 0.0605704840272665, "loss_rpn_cls": 0.004562443122267723, "loss_rpn_loc": 0.05959376133978367, "lr": 0.0038303375000000002, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.875, "rpn/num_pos_anchors": 95.125, "time": 0.8720150914996339, "total_loss": 0.24228383065201342}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.010550028499892505, "eta_seconds": 11386.753413343344, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.04433528791056139, "fast_rcnn/fg_cls_accuracy": 0.9556647120894386, "iteration": 939, "loss_box_reg": 0.10631585493683815, "loss_cls": 0.05721595883369446, "loss_rpn_cls": 0.0026982673443853855, "loss_rpn_loc": 0.0547914057970047, "lr": 0.0039135875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.8540105269999003, "total_loss": 0.21563802321907133}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01612528400028168, "eta_seconds": 11371.228795083965, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.0498046875, "fast_rcnn/fg_cls_accuracy": 0.9501953125, "iteration": 959, "loss_box_reg": 0.1004297025501728, "loss_cls": 0.05342039093375206, "loss_rpn_cls": 0.00477422121912241, "loss_rpn_loc": 0.048561520874500275, "lr": 0.0039968375, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8844300150003619, "total_loss": 0.2256989327725023}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012863743500020064, "eta_seconds": 11351.880881643341, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04565972222222223, "fast_rcnn/fg_cls_accuracy": 0.9543402777777779, "iteration": 979, "loss_box_reg": 0.11157135292887688, "loss_cls": 0.04482796974480152, "loss_rpn_cls": 0.0065105147659778595, "loss_rpn_loc": 0.06633155420422554, "lr": 0.0040800875, "roi_head/num_bg_samples": 390.375, "roi_head/num_fg_samples": 121.625, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.8682084174997726, "total_loss": 0.23189347283914685}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01232722449958601, "eta_seconds": 11337.924521956742, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.060546875, "fast_rcnn/fg_cls_accuracy": 0.939453125, "iteration": 999, "loss_box_reg": 0.11941342800855637, "loss_cls": 0.0730251595377922, "loss_rpn_cls": 0.0052137651946395636, "loss_rpn_loc": 0.06160200759768486, "lr": 0.0041633375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8827806014996895, "total_loss": 0.25915474398061633}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013164806000077078, "eta_seconds": 11329.957124608949, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.05002973894032922, "fast_rcnn/fg_cls_accuracy": 0.9499702610596708, "iteration": 1019, "loss_box_reg": 0.1171100102365017, "loss_cls": 0.05176871083676815, "loss_rpn_cls": 0.003309119725599885, "loss_rpn_loc": 0.051280347630381584, "lr": 0.0042465875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8771893994999118, "total_loss": 0.2285827926825732}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013883824499771436, "eta_seconds": 11304.91008489949, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.05069182981927711, "fast_rcnn/fg_cls_accuracy": 0.9493081701807229, "iteration": 1039, "loss_box_reg": 0.11066009849309921, "loss_cls": 0.05315266735851765, "loss_rpn_cls": 0.006170068867504597, "loss_rpn_loc": 0.05377185717225075, "lr": 0.0043298375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.0, "rpn/num_pos_anchors": 94.0, "time": 0.8545718394998403, "total_loss": 0.23264297121204436}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015017880499726743, "eta_seconds": 11280.984392763408, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04588942560731704, "fast_rcnn/fg_cls_accuracy": 0.954110574392683, "iteration": 1059, "loss_box_reg": 0.10310346260666847, "loss_cls": 0.044577477499842644, "loss_rpn_cls": 0.004134953022003174, "loss_rpn_loc": 0.051423339173197746, "lr": 0.0044130875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8577394704998369, "total_loss": 0.2035250838380307}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.016613606499959133, "eta_seconds": 11252.08472195471, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.045861783679624665, "fast_rcnn/fg_cls_accuracy": 0.9541382163203753, "iteration": 1079, "loss_box_reg": 0.11094773188233376, "loss_cls": 0.05111839435994625, "loss_rpn_cls": 0.003501012222841382, "loss_rpn_loc": 0.052145302295684814, "lr": 0.0044963375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.862094334500398, "total_loss": 0.22528961999341846}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.016227953500219883, "eta_seconds": 11234.6679821947, "fast_rcnn/cls_accuracy": 0.981201171875, "fast_rcnn/false_negative": 0.04735054347826087, "fast_rcnn/fg_cls_accuracy": 0.9526494565217392, "iteration": 1099, "loss_box_reg": 0.1110970675945282, "loss_cls": 0.0483903419226408, "loss_rpn_cls": 0.0037894557463005185, "loss_rpn_loc": 0.05519515089690685, "lr": 0.0045795875, "roi_head/num_bg_samples": 395.0, "roi_head/num_fg_samples": 117.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8814690505000726, "total_loss": 0.23251396394334733}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.0157821050001985, "eta_seconds": 11194.459053585524, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04696308210784314, "fast_rcnn/fg_cls_accuracy": 0.9530369178921569, "iteration": 1119, "loss_box_reg": 0.11347878724336624, "loss_cls": 0.05304034985601902, "loss_rpn_cls": 0.0026472604367882013, "loss_rpn_loc": 0.05065883509814739, "lr": 0.0046628375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8446180029995958, "total_loss": 0.22228291805367917}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012794290499641647, "eta_seconds": 11174.544137118066, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04151621586134454, "fast_rcnn/fg_cls_accuracy": 0.9584837841386555, "iteration": 1139, "loss_box_reg": 0.11042098328471184, "loss_cls": 0.04875275492668152, "loss_rpn_cls": 0.0053986890707165, "loss_rpn_loc": 0.06635331735014915, "lr": 0.0047460875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8467612080003164, "total_loss": 0.24455570348072797}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014960789500037208, "eta_seconds": 11151.432648201459, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.0493672888326479, "fast_rcnn/fg_cls_accuracy": 0.950632711167352, "iteration": 1159, "loss_box_reg": 0.10223600640892982, "loss_cls": 0.05007513798773289, "loss_rpn_cls": 0.004917986923828721, "loss_rpn_loc": 0.07119227945804596, "lr": 0.0048293375, "roi_head/num_bg_samples": 393.875, "roi_head/num_fg_samples": 118.125, "rpn/num_neg_anchors": 169.75, "rpn/num_pos_anchors": 86.25, "time": 0.8591569790005451, "total_loss": 0.23316936113405973}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.011912658499568352, "eta_seconds": 11133.44586255851, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.05077235193621868, "fast_rcnn/fg_cls_accuracy": 0.9492276480637813, "iteration": 1179, "loss_box_reg": 0.11368173360824585, "loss_cls": 0.05308356508612633, "loss_rpn_cls": 0.005349044920876622, "loss_rpn_loc": 0.06201360747218132, "lr": 0.0049125875, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8698166265003238, "total_loss": 0.23130762414075434}

[07/29 19:51:48] detectron2 INFO: {"bbox/AP": 89.9372115855734, "bbox/AP50": 98.94397005781644, "bbox/AP75": 98.90289638087187, "bbox/APl": 90.72880288503814, "bbox/APm": 88.3051693765623, "bbox/APs": NaN, "data_time": 0.014878246000080253, "eta_seconds": 11116.078346978511, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.0703125, "fast_rcnn/fg_cls_accuracy": 0.9296875, "iteration": 1199, "loss_box_reg": 0.11325424909591675, "loss_cls": 0.04710954613983631, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0042733787558972836, "loss_rpn_loc": 0.06012917682528496, "lr": 0.0049958375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8741366975000346, "total_loss": 0.23101549898274243, "validation_loss": 0.22204631070859254}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013528545000099257, "eta_seconds": 11099.301888740878, "fast_rcnn/cls_accuracy": 0.980224609375, "fast_rcnn/false_negative": 0.046103560216894976, "fast_rcnn/fg_cls_accuracy": 0.953896439783105, "iteration": 1219, "loss_box_reg": 0.12120898813009262, "loss_cls": 0.05126929096877575, "loss_rpn_cls": 0.0038727218052372336, "loss_rpn_loc": 0.05043528042733669, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8828641514996889, "total_loss": 0.23491605871822685}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.011044496000067738, "eta_seconds": 11073.083311939141, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1239, "loss_box_reg": 0.11235003918409348, "loss_cls": 0.046691738069057465, "loss_rpn_cls": 0.006056502927094698, "loss_rpn_loc": 0.053873563185334206, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8184038200001851, "total_loss": 0.23004397260956466}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015318163000301865, "eta_seconds": 11057.887156648141, "fast_rcnn/cls_accuracy": 0.98095703125, "fast_rcnn/false_negative": 0.04580158118560379, "fast_rcnn/fg_cls_accuracy": 0.9541984188143962, "iteration": 1259, "loss_box_reg": 0.10087935626506805, "loss_cls": 0.047167083248496056, "loss_rpn_cls": 0.004879459505900741, "loss_rpn_loc": 0.04768846556544304, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8561628545003259, "total_loss": 0.202470017131418}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014270402500187629, "eta_seconds": 11023.213576958839, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.052734375, "fast_rcnn/fg_cls_accuracy": 0.947265625, "iteration": 1279, "loss_box_reg": 0.1078275665640831, "loss_cls": 0.055708736181259155, "loss_rpn_cls": 0.004326054826378822, "loss_rpn_loc": 0.051015861332416534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8413463045003482, "total_loss": 0.23464090866036713}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013100360500175157, "eta_seconds": 11008.474875399741, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.047925034286833854, "fast_rcnn/fg_cls_accuracy": 0.9520749657131662, "iteration": 1299, "loss_box_reg": 0.09658817201852798, "loss_cls": 0.04709094204008579, "loss_rpn_cls": 0.0040003720205277205, "loss_rpn_loc": 0.061722202226519585, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8807059354999183, "total_loss": 0.22329395404085517}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015239898999880097, "eta_seconds": 11003.665032419109, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.03966547818791946, "fast_rcnn/fg_cls_accuracy": 0.9603345218120805, "iteration": 1319, "loss_box_reg": 0.10543150082230568, "loss_cls": 0.047363804653286934, "loss_rpn_cls": 0.006104244850575924, "loss_rpn_loc": 0.05552547238767147, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8904177599997638, "total_loss": 0.22847025434020907}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.011903596499450941, "eta_seconds": 10975.392692321862, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.036201565026496865, "fast_rcnn/fg_cls_accuracy": 0.9637984349735031, "iteration": 1339, "loss_box_reg": 0.10207298025488853, "loss_cls": 0.03664606809616089, "loss_rpn_cls": 0.006632389267906547, "loss_rpn_loc": 0.047756388783454895, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.845586510999965, "total_loss": 0.1987403016537428}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012518932499915536, "eta_seconds": 10967.293575872216, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.036218475877192985, "fast_rcnn/fg_cls_accuracy": 0.963781524122807, "iteration": 1359, "loss_box_reg": 0.09389247000217438, "loss_cls": 0.03725110925734043, "loss_rpn_cls": 0.0026225635083392262, "loss_rpn_loc": 0.04946193844079971, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8703024129999903, "total_loss": 0.1872705266578123}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014252139999825886, "eta_seconds": 10949.941636032216, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.0381825206043956, "fast_rcnn/fg_cls_accuracy": 0.9618174793956045, "iteration": 1379, "loss_box_reg": 0.09005808085203171, "loss_cls": 0.04361296631395817, "loss_rpn_cls": 0.0031876161228865385, "loss_rpn_loc": 0.04760141670703888, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8653196120003486, "total_loss": 0.18320670002140105}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015607826999712415, "eta_seconds": 10936.381450508063, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04292900291705905, "fast_rcnn/fg_cls_accuracy": 0.957070997082941, "iteration": 1399, "loss_box_reg": 0.1026579923927784, "loss_cls": 0.040452633053064346, "loss_rpn_cls": 0.004050533752888441, "loss_rpn_loc": 0.050027329474687576, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 167.25, "rpn/num_pos_anchors": 88.75, "time": 0.8649475590000293, "total_loss": 0.21095226804027334}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012343008500465658, "eta_seconds": 10926.268840053872, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04167183366402116, "fast_rcnn/fg_cls_accuracy": 0.9583281663359788, "iteration": 1419, "loss_box_reg": 0.09014065191149712, "loss_cls": 0.042981088161468506, "loss_rpn_cls": 0.00645520631223917, "loss_rpn_loc": 0.06759355217218399, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8950779309998325, "total_loss": 0.22137367050163448}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012359693500002322, "eta_seconds": 10914.622519983426, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.03675857099514563, "fast_rcnn/fg_cls_accuracy": 0.9632414290048543, "iteration": 1439, "loss_box_reg": 0.08957243710756302, "loss_cls": 0.04217042587697506, "loss_rpn_cls": 0.007140532601624727, "loss_rpn_loc": 0.08009770512580872, "lr": 0.005, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8714704600001824, "total_loss": 0.22934484714642167}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012483622500440106, "eta_seconds": 10896.652974460563, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 1459, "loss_box_reg": 0.0861663743853569, "loss_cls": 0.03933589160442352, "loss_rpn_cls": 0.00711781601421535, "loss_rpn_loc": 0.07167446613311768, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8673060529995382, "total_loss": 0.20666937343776226}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014326036999591452, "eta_seconds": 10887.697147058661, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.07186511075949367, "fast_rcnn/fg_cls_accuracy": 0.9281348892405064, "iteration": 1479, "loss_box_reg": 0.11860571056604385, "loss_cls": 0.07213868945837021, "loss_rpn_cls": 0.008405119646340609, "loss_rpn_loc": 0.059620652347803116, "lr": 0.005, "roi_head/num_bg_samples": 401.25, "roi_head/num_fg_samples": 110.75, "rpn/num_neg_anchors": 175.0, "rpn/num_pos_anchors": 81.0, "time": 0.897518780000155, "total_loss": 0.28046197770163417}

[07/29 19:51:48] detectron2 INFO: {"bbox/AP": 90.47100649648208, "bbox/AP50": 98.89818218763597, "bbox/AP75": 98.83786673282349, "bbox/APl": 90.98252513947219, "bbox/APm": 89.65274891712926, "bbox/APs": NaN, "data_time": 0.014468831499925727, "eta_seconds": 10880.330544314034, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.05078125, "fast_rcnn/fg_cls_accuracy": 0.94921875, "iteration": 1499, "loss_box_reg": 0.11426327377557755, "loss_cls": 0.051829954609274864, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.00704673957079649, "loss_rpn_loc": 0.08483739569783211, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.898153683000146, "total_loss": 0.25268610194325447, "validation_loss": 0.24073816174583876}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013221118500041484, "eta_seconds": 10867.58767004412, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04463252314814815, "fast_rcnn/fg_cls_accuracy": 0.9553674768518519, "iteration": 1519, "loss_box_reg": 0.1030765026807785, "loss_cls": 0.05443604104220867, "loss_rpn_cls": 0.007032011868432164, "loss_rpn_loc": 0.07387308403849602, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8726468634999947, "total_loss": 0.244771410478279}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015136590000565775, "eta_seconds": 10837.571910697727, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.04780190677966102, "fast_rcnn/fg_cls_accuracy": 0.952198093220339, "iteration": 1539, "loss_box_reg": 0.1154186986386776, "loss_cls": 0.05130871944129467, "loss_rpn_cls": 0.005730348872020841, "loss_rpn_loc": 0.06487315893173218, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8529182040001615, "total_loss": 0.23767815972678363}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014879302499593905, "eta_seconds": 10806.879806792327, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.049944196428571425, "fast_rcnn/fg_cls_accuracy": 0.9500558035714286, "iteration": 1559, "loss_box_reg": 0.10610762983560562, "loss_cls": 0.048841025680303574, "loss_rpn_cls": 0.00505010224878788, "loss_rpn_loc": 0.047558898106217384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.8628834279998046, "total_loss": 0.21762098465114832}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01316807399962272, "eta_seconds": 10794.525714710453, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.039278372332063605, "fast_rcnn/fg_cls_accuracy": 0.9607216276679363, "iteration": 1579, "loss_box_reg": 0.09529298916459084, "loss_cls": 0.047681115567684174, "loss_rpn_cls": 0.005185154965147376, "loss_rpn_loc": 0.04409233666956425, "lr": 0.005, "roi_head/num_bg_samples": 398.75, "roi_head/num_fg_samples": 113.25, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8907098810000207, "total_loss": 0.19659643550403416}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013807994499984488, "eta_seconds": 10777.144625080455, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.04536732456140351, "fast_rcnn/fg_cls_accuracy": 0.9546326754385965, "iteration": 1599, "loss_box_reg": 0.10481703281402588, "loss_cls": 0.04726100340485573, "loss_rpn_cls": 0.005707225529477, "loss_rpn_loc": 0.0522367749363184, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8495490139998765, "total_loss": 0.21333862002938986}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012579137000102492, "eta_seconds": 10762.580968191138, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1619, "loss_box_reg": 0.09973128139972687, "loss_cls": 0.040857817977666855, "loss_rpn_cls": 0.0033710956340655684, "loss_rpn_loc": 0.04723631218075752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8383417874997576, "total_loss": 0.20998939604032785}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012796253500255261, "eta_seconds": 10745.19532734114, "fast_rcnn/cls_accuracy": 0.983154296875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1639, "loss_box_reg": 0.09802206978201866, "loss_cls": 0.043301988393068314, "loss_rpn_cls": 0.004532157443463802, "loss_rpn_loc": 0.05338606610894203, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8678041269995447, "total_loss": 0.20312127005308867}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013821255500261032, "eta_seconds": 10735.521867402167, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04389311316815145, "fast_rcnn/fg_cls_accuracy": 0.9561068868318485, "iteration": 1659, "loss_box_reg": 0.09773008897900581, "loss_cls": 0.04519974626600742, "loss_rpn_cls": 0.004526508506387472, "loss_rpn_loc": 0.05140480026602745, "lr": 0.005, "roi_head/num_bg_samples": 396.75, "roi_head/num_fg_samples": 115.25, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.882670835999761, "total_loss": 0.20179360220208764}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01438021400008438, "eta_seconds": 10728.270786204119, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04066910282258064, "fast_rcnn/fg_cls_accuracy": 0.9593308971774194, "iteration": 1679, "loss_box_reg": 0.10078854858875275, "loss_cls": 0.050304073840379715, "loss_rpn_cls": 0.003972385311499238, "loss_rpn_loc": 0.05783495306968689, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.375, "rpn/num_pos_anchors": 92.625, "time": 0.8868689450000602, "total_loss": 0.21955888194497675}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015314830000079382, "eta_seconds": 10708.488811374478, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.03443205758426966, "fast_rcnn/fg_cls_accuracy": 0.9655679424157304, "iteration": 1699, "loss_box_reg": 0.08642548322677612, "loss_cls": 0.0424218624830246, "loss_rpn_cls": 0.004494124790653586, "loss_rpn_loc": 0.050324076786637306, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8947804085000826, "total_loss": 0.1852857698686421}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014327528499961772, "eta_seconds": 10683.327449442186, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1719, "loss_box_reg": 0.09392394125461578, "loss_cls": 0.040925584733486176, "loss_rpn_cls": 0.004295801743865013, "loss_rpn_loc": 0.051177412271499634, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8841799534998245, "total_loss": 0.19225792540237308}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014464311000210728, "eta_seconds": 10665.929310122192, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1739, "loss_box_reg": 0.10429317876696587, "loss_cls": 0.03850865736603737, "loss_rpn_cls": 0.004676738753914833, "loss_rpn_loc": 0.06099403649568558, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8719341980004174, "total_loss": 0.2191669741878286}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.016681402000358503, "eta_seconds": 10658.612344284118, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.04427876650098872, "fast_rcnn/fg_cls_accuracy": 0.9557212334990113, "iteration": 1759, "loss_box_reg": 0.10086190328001976, "loss_cls": 0.041055068373680115, "loss_rpn_cls": 0.0038329382659867406, "loss_rpn_loc": 0.051342034712433815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8841451134999261, "total_loss": 0.19593067455571145}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.014048279500457284, "eta_seconds": 10631.133031482204, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.03769699739194401, "fast_rcnn/fg_cls_accuracy": 0.962303002608056, "iteration": 1779, "loss_box_reg": 0.09833024814724922, "loss_cls": 0.04401624575257301, "loss_rpn_cls": 0.004325072979554534, "loss_rpn_loc": 0.06082310900092125, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.862232074000076, "total_loss": 0.21781846298836172}

[07/29 19:51:48] detectron2 INFO: {"bbox/AP": 92.21388393069454, "bbox/AP50": 98.9582735663117, "bbox/AP75": 98.91922274208812, "bbox/APl": 92.76017734503245, "bbox/APm": 91.06707513844079, "bbox/APs": NaN, "data_time": 0.013798876500004553, "eta_seconds": 10612.28939699241, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 1799, "loss_box_reg": 0.08888481557369232, "loss_cls": 0.04587249644100666, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004532726481556892, "loss_rpn_loc": 0.04718616604804993, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8685472174997813, "total_loss": 0.18515282846055925, "validation_loss": 0.19486001614312065}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01440209100019274, "eta_seconds": 10588.782066193326, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.041015625, "fast_rcnn/fg_cls_accuracy": 0.958984375, "iteration": 1819, "loss_box_reg": 0.09320377558469772, "loss_cls": 0.04454539343714714, "loss_rpn_cls": 0.0031231624307110906, "loss_rpn_loc": 0.04289261996746063, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.878915322499779, "total_loss": 0.1927729855524376}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015858857000239368, "eta_seconds": 10577.49785729241, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0414482792721519, "fast_rcnn/fg_cls_accuracy": 0.9585517207278481, "iteration": 1839, "loss_box_reg": 0.09988433122634888, "loss_cls": 0.045475441962480545, "loss_rpn_cls": 0.0023602014407515526, "loss_rpn_loc": 0.04580887593328953, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8694505869998466, "total_loss": 0.19530457153450698}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.011982069999703526, "eta_seconds": 10559.85364616426, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03892780172413793, "fast_rcnn/fg_cls_accuracy": 0.9610721982758621, "iteration": 1859, "loss_box_reg": 0.09175437316298485, "loss_cls": 0.037718771025538445, "loss_rpn_cls": 0.003915468696504831, "loss_rpn_loc": 0.045753927901387215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8600529149998692, "total_loss": 0.1927445613546297}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013541940000322938, "eta_seconds": 10536.624860383326, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0322265625, "fast_rcnn/fg_cls_accuracy": 0.9677734375, "iteration": 1879, "loss_box_reg": 0.09368035569787025, "loss_cls": 0.03680916503071785, "loss_rpn_cls": 0.004152178764343262, "loss_rpn_loc": 0.051723018288612366, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8636904879999747, "total_loss": 0.1892381781945005}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.015167849000135902, "eta_seconds": 10505.653435268032, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380859375, "fast_rcnn/fg_cls_accuracy": 0.9619140625, "iteration": 1899, "loss_box_reg": 0.07685903087258339, "loss_cls": 0.03890354372560978, "loss_rpn_cls": 0.004574333317577839, "loss_rpn_loc": 0.046656785532832146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8658116014998996, "total_loss": 0.17074766720179468}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013550288500027818, "eta_seconds": 10490.1415308359, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03149801587301587, "fast_rcnn/fg_cls_accuracy": 0.9685019841269842, "iteration": 1919, "loss_box_reg": 0.084226094186306, "loss_cls": 0.03763917088508606, "loss_rpn_cls": 0.0033376823412254453, "loss_rpn_loc": 0.039989013224840164, "lr": 0.005, "roi_head/num_bg_samples": 387.875, "roi_head/num_fg_samples": 124.125, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8777504735003276, "total_loss": 0.1695472338469699}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.013637017000291962, "eta_seconds": 10481.158423730092, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.033308006414081145, "fast_rcnn/fg_cls_accuracy": 0.9666919935859188, "iteration": 1939, "loss_box_reg": 0.09387752041220665, "loss_cls": 0.03691721335053444, "loss_rpn_cls": 0.00305631710216403, "loss_rpn_loc": 0.039622073993086815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.625, "rpn/num_pos_anchors": 84.375, "time": 0.8821017150003172, "total_loss": 0.16561688063666224}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.01566228149977178, "eta_seconds": 10459.628094786585, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029418103448275862, "fast_rcnn/fg_cls_accuracy": 0.9705818965517241, "iteration": 1959, "loss_box_reg": 0.0838717557489872, "loss_cls": 0.03551844134926796, "loss_rpn_cls": 0.0031498116441071033, "loss_rpn_loc": 0.04677033796906471, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8585874375003186, "total_loss": 0.17996928666252643}

[07/29 19:51:48] detectron2 INFO: {"data_time": 0.012967388999641116, "eta_seconds": 10442.254740256585, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03389473684210526, "fast_rcnn/fg_cls_accuracy": 0.9661052631578948, "iteration": 1979, "loss_box_reg": 0.08219883218407631, "loss_cls": 0.03881074674427509, "loss_rpn_cls": 0.004102814942598343, "loss_rpn_loc": 0.053613780066370964, "lr": 0.005, "roi_head/num_bg_samples": 397.125, "roi_head/num_fg_samples": 114.875, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8684652934998667, "total_loss": 0.1922797355800867}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013859366499673342, "eta_seconds": 10416.72865039066, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 1999, "loss_box_reg": 0.09208154305815697, "loss_cls": 0.03729891777038574, "loss_rpn_cls": 0.004324637353420258, "loss_rpn_loc": 0.049532048404216766, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8454489969999486, "total_loss": 0.18912802496924996}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013589772499926767, "eta_seconds": 10401.473746628071, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380501003440367, "fast_rcnn/fg_cls_accuracy": 0.9619498996559632, "iteration": 2019, "loss_box_reg": 0.08173145353794098, "loss_cls": 0.0348515585064888, "loss_rpn_cls": 0.0032774244900792837, "loss_rpn_loc": 0.04606715030968189, "lr": 0.005, "roi_head/num_bg_samples": 396.5, "roi_head/num_fg_samples": 115.5, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8827293745002862, "total_loss": 0.17900166858453304}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.016258499000286974, "eta_seconds": 10383.14835822894, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03491323851583962, "fast_rcnn/fg_cls_accuracy": 0.9650867614841604, "iteration": 2039, "loss_box_reg": 0.09229341149330139, "loss_cls": 0.037404755130410194, "loss_rpn_cls": 0.0030006606830284, "loss_rpn_loc": 0.04984702169895172, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.863546210000095, "total_loss": 0.18486582313198596}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01584853300028044, "eta_seconds": 10369.857802306824, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037252784178187406, "fast_rcnn/fg_cls_accuracy": 0.9627472158218127, "iteration": 2059, "loss_box_reg": 0.09000474214553833, "loss_cls": 0.03899835981428623, "loss_rpn_cls": 0.0031731631606817245, "loss_rpn_loc": 0.047395261004567146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8975476909999998, "total_loss": 0.1849419007776305}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01302835349997622, "eta_seconds": 10358.225833181914, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0361328125, "fast_rcnn/fg_cls_accuracy": 0.9638671875, "iteration": 2079, "loss_box_reg": 0.08724486455321312, "loss_cls": 0.045973993837833405, "loss_rpn_cls": 0.0030110322404652834, "loss_rpn_loc": 0.03779111988842487, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.8679554685004405, "total_loss": 0.19020180380903184}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 89.90068357647002, "bbox/AP50": 98.90752019335251, "bbox/AP75": 98.90147705938551, "bbox/APl": 90.23938380754622, "bbox/APm": 88.88386901962771, "bbox/APs": NaN, "data_time": 0.013675101999979233, "eta_seconds": 10341.815137924052, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2099, "loss_box_reg": 0.0884990505874157, "loss_cls": 0.04107754863798618, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.003416641498915851, "loss_rpn_loc": 0.06242932006716728, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8932269239999187, "total_loss": 0.19365975121036172, "validation_loss": 0.19123022244832846}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.0136575635006011, "eta_seconds": 10324.176337227254, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.038356667698019806, "fast_rcnn/fg_cls_accuracy": 0.9616433323019802, "iteration": 2119, "loss_box_reg": 0.08040068298578262, "loss_cls": 0.038239989429712296, "loss_rpn_cls": 0.003759029903449118, "loss_rpn_loc": 0.045844390988349915, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8485069829998793, "total_loss": 0.17594775510951877}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01224396199995681, "eta_seconds": 10307.610909986604, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03441750101279009, "fast_rcnn/fg_cls_accuracy": 0.9655824989872099, "iteration": 2139, "loss_box_reg": 0.09104080125689507, "loss_cls": 0.03530845418572426, "loss_rpn_cls": 0.0037917372537776828, "loss_rpn_loc": 0.037452591583132744, "lr": 0.005, "roi_head/num_bg_samples": 392.625, "roi_head/num_fg_samples": 119.375, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8768745459997263, "total_loss": 0.17403553624171764}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013991559500027506, "eta_seconds": 10297.328521033947, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.034357063506758004, "fast_rcnn/fg_cls_accuracy": 0.965642936493242, "iteration": 2159, "loss_box_reg": 0.08362606540322304, "loss_cls": 0.03820972703397274, "loss_rpn_cls": 0.0028603734681382775, "loss_rpn_loc": 0.038150036707520485, "lr": 0.005, "roi_head/num_bg_samples": 391.25, "roi_head/num_fg_samples": 120.75, "rpn/num_neg_anchors": 170.125, "rpn/num_pos_anchors": 85.875, "time": 0.8841141164998589, "total_loss": 0.16322252247482538}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013330730500001664, "eta_seconds": 10272.849554586599, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.03048554157239819, "fast_rcnn/fg_cls_accuracy": 0.9695144584276019, "iteration": 2179, "loss_box_reg": 0.09114638343453407, "loss_cls": 0.03680109232664108, "loss_rpn_cls": 0.002896717400290072, "loss_rpn_loc": 0.04303932003676891, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8548102505001225, "total_loss": 0.1797549540642649}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011985454500518244, "eta_seconds": 10255.468876886596, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.03245170659221902, "fast_rcnn/fg_cls_accuracy": 0.967548293407781, "iteration": 2199, "loss_box_reg": 0.09328019246459007, "loss_cls": 0.039469512179493904, "loss_rpn_cls": 0.0030301783699542284, "loss_rpn_loc": 0.042535314336419106, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.875668800999847, "total_loss": 0.18828994838986546}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013756813499639975, "eta_seconds": 10236.74518285594, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2219, "loss_box_reg": 0.08324635773897171, "loss_cls": 0.03644854947924614, "loss_rpn_cls": 0.003077507601119578, "loss_rpn_loc": 0.04696730896830559, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 151.5, "rpn/num_pos_anchors": 104.5, "time": 0.8660500474998116, "total_loss": 0.17756581807043403}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012775122499988356, "eta_seconds": 10229.34179495411, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.036272321428571425, "fast_rcnn/fg_cls_accuracy": 0.9637276785714286, "iteration": 2239, "loss_box_reg": 0.08963338658213615, "loss_cls": 0.041584597900509834, "loss_rpn_cls": 0.003160484484396875, "loss_rpn_loc": 0.04723039269447327, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8688699244999043, "total_loss": 0.1874701443593949}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015097248999609292, "eta_seconds": 10217.529332700633, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2259, "loss_box_reg": 0.07312063500285149, "loss_cls": 0.03746681474149227, "loss_rpn_cls": 0.0033478353871032596, "loss_rpn_loc": 0.04146379791200161, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.875, "rpn/num_pos_anchors": 86.125, "time": 0.877857135999875, "total_loss": 0.16872154723387212}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.018694472999868594, "eta_seconds": 10209.779635761235, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 2279, "loss_box_reg": 0.08895870670676231, "loss_cls": 0.029577581211924553, "loss_rpn_cls": 0.00313483620993793, "loss_rpn_loc": 0.04437120631337166, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.875047160500344, "total_loss": 0.1661791643127799}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014058729499993206, "eta_seconds": 10192.35829008124, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2299, "loss_box_reg": 0.0840831771492958, "loss_cls": 0.03785872086882591, "loss_rpn_cls": 0.003355022519826889, "loss_rpn_loc": 0.048520974814891815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8901794160001373, "total_loss": 0.18029032868798822}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014900668499649328, "eta_seconds": 10169.059123611969, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2319, "loss_box_reg": 0.08981714025139809, "loss_cls": 0.034265389665961266, "loss_rpn_cls": 0.0031644627451896667, "loss_rpn_loc": 0.03894554451107979, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.0, "rpn/num_pos_anchors": 101.0, "time": 0.8586659924999367, "total_loss": 0.17702865693718195}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.0162080194995724, "eta_seconds": 10151.647841831964, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2339, "loss_box_reg": 0.08361848816275597, "loss_cls": 0.0330031830817461, "loss_rpn_cls": 0.002660089638084173, "loss_rpn_loc": 0.036235157400369644, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8543626634996144, "total_loss": 0.15929806616622955}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01537236500007566, "eta_seconds": 10130.504979300576, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029702746350488786, "fast_rcnn/fg_cls_accuracy": 0.9702972536495111, "iteration": 2359, "loss_box_reg": 0.07438933849334717, "loss_cls": 0.03239784575998783, "loss_rpn_cls": 0.0028395807603374124, "loss_rpn_loc": 0.03916883282363415, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8654807150005581, "total_loss": 0.15443656395655125}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013455614000122296, "eta_seconds": 10113.100108620565, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 2379, "loss_box_reg": 0.07959544658660889, "loss_cls": 0.03229916840791702, "loss_rpn_cls": 0.0025239757960662246, "loss_rpn_loc": 0.038064660504460335, "lr": 0.005, "roi_head/num_bg_samples": 388.375, "roi_head/num_fg_samples": 123.625, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8699438974995246, "total_loss": 0.15723116433946416}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 90.38046983259721, "bbox/AP50": 98.95554647930321, "bbox/AP75": 98.93429029294731, "bbox/APl": 90.51305711164808, "bbox/APm": 90.37498846524267, "bbox/APs": NaN, "data_time": 0.014254079500460648, "eta_seconds": 10102.240359718868, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 2399, "loss_box_reg": 0.07846162468194962, "loss_cls": 0.03271058388054371, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002632420277222991, "loss_rpn_loc": 0.04105196334421635, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8823002785002245, "total_loss": 0.15162402321584523, "validation_loss": 0.18059760322568635}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013223844500316773, "eta_seconds": 10082.002714711944, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02970393912825651, "fast_rcnn/fg_cls_accuracy": 0.9702960608717435, "iteration": 2419, "loss_box_reg": 0.07463748008012772, "loss_cls": 0.03062492609024048, "loss_rpn_cls": 0.003003168385475874, "loss_rpn_loc": 0.04139695316553116, "lr": 0.005, "roi_head/num_bg_samples": 395.875, "roi_head/num_fg_samples": 116.125, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8846325539998361, "total_loss": 0.15889020101167262}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01342617850013994, "eta_seconds": 10058.791759012625, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03232062055591467, "fast_rcnn/fg_cls_accuracy": 0.9676793794440853, "iteration": 2439, "loss_box_reg": 0.08237595111131668, "loss_cls": 0.03586164303123951, "loss_rpn_cls": 0.0030923092272132635, "loss_rpn_loc": 0.04343203827738762, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8559531569999308, "total_loss": 0.1755513409152627}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014425377000407025, "eta_seconds": 10049.991896518874, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02795220690133038, "fast_rcnn/fg_cls_accuracy": 0.9720477930986696, "iteration": 2459, "loss_box_reg": 0.07967670261859894, "loss_cls": 0.03273317776620388, "loss_rpn_cls": 0.003336146706715226, "loss_rpn_loc": 0.052099425345659256, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8797186050005621, "total_loss": 0.17592523363418877}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013915394999912678, "eta_seconds": 10023.989261792618, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03218129139072848, "fast_rcnn/fg_cls_accuracy": 0.9678187086092715, "iteration": 2479, "loss_box_reg": 0.08192437514662743, "loss_cls": 0.033937135711312294, "loss_rpn_cls": 0.003456542850472033, "loss_rpn_loc": 0.04651975259184837, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8666510749999361, "total_loss": 0.1762359922286123}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.010985515999891504, "eta_seconds": 9994.220309323966, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2499, "loss_box_reg": 0.08062322810292244, "loss_cls": 0.0348933469504118, "loss_rpn_cls": 0.0027861351845785975, "loss_rpn_loc": 0.038825834169983864, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8623936889998731, "total_loss": 0.16029999474994838}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012925224999435159, "eta_seconds": 9975.52187745336, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03711904393564357, "fast_rcnn/fg_cls_accuracy": 0.9628809560643564, "iteration": 2519, "loss_box_reg": 0.08054154366254807, "loss_cls": 0.03537464700639248, "loss_rpn_cls": 0.0020838259952142835, "loss_rpn_loc": 0.03704572282731533, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.0, "rpn/num_pos_anchors": 92.0, "time": 0.8709305714996844, "total_loss": 0.1565095882397145}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014001295999605645, "eta_seconds": 9970.222825800769, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024819186681222707, "fast_rcnn/fg_cls_accuracy": 0.9751808133187774, "iteration": 2539, "loss_box_reg": 0.0694175660610199, "loss_cls": 0.028812485747039318, "loss_rpn_cls": 0.002306518144905567, "loss_rpn_loc": 0.034660546109080315, "lr": 0.005, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.9114369695003006, "total_loss": 0.14976061368361115}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015146330999868951, "eta_seconds": 9964.491298234194, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2559, "loss_box_reg": 0.07692543789744377, "loss_cls": 0.031828004866838455, "loss_rpn_cls": 0.003076101769693196, "loss_rpn_loc": 0.039611104875802994, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.882002274000115, "total_loss": 0.15674148977268487}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014400603499780118, "eta_seconds": 9936.9830187426, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029522579376430207, "fast_rcnn/fg_cls_accuracy": 0.9704774206235698, "iteration": 2579, "loss_box_reg": 0.07119812443852425, "loss_cls": 0.03264463320374489, "loss_rpn_cls": 0.0027976155979558825, "loss_rpn_loc": 0.0388930719345808, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8642328930000076, "total_loss": 0.15167312882840633}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011450261000391038, "eta_seconds": 9935.233353661648, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.032523878905617615, "fast_rcnn/fg_cls_accuracy": 0.9674761210943823, "iteration": 2599, "loss_box_reg": 0.06924661248922348, "loss_cls": 0.028150435537099838, "loss_rpn_cls": 0.0023369272239506245, "loss_rpn_loc": 0.03825339488685131, "lr": 0.005, "roi_head/num_bg_samples": 396.125, "roi_head/num_fg_samples": 115.875, "rpn/num_neg_anchors": 174.625, "rpn/num_pos_anchors": 81.375, "time": 0.8899173999998311, "total_loss": 0.14393403416033834}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015590758999678656, "eta_seconds": 9929.062597158703, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02809597523219814, "fast_rcnn/fg_cls_accuracy": 0.9719040247678019, "iteration": 2619, "loss_box_reg": 0.07244919240474701, "loss_cls": 0.030225475318729877, "loss_rpn_cls": 0.0027918906416743994, "loss_rpn_loc": 0.03854382783174515, "lr": 0.005, "roi_head/num_bg_samples": 384.25, "roi_head/num_fg_samples": 127.75, "rpn/num_neg_anchors": 164.375, "rpn/num_pos_anchors": 91.625, "time": 0.9016381179999371, "total_loss": 0.1531053998041898}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014583123999727832, "eta_seconds": 9908.669780157361, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.029799952651515152, "fast_rcnn/fg_cls_accuracy": 0.9702000473484849, "iteration": 2639, "loss_box_reg": 0.08254137635231018, "loss_cls": 0.03172833938151598, "loss_rpn_cls": 0.0028717368841171265, "loss_rpn_loc": 0.04374443367123604, "lr": 0.005, "roi_head/num_bg_samples": 397.0, "roi_head/num_fg_samples": 115.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8593994910002039, "total_loss": 0.16603078274056315}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011498301999836258, "eta_seconds": 9894.165619398722, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.026568700396825396, "fast_rcnn/fg_cls_accuracy": 0.9734312996031746, "iteration": 2659, "loss_box_reg": 0.07682507485151291, "loss_cls": 0.029614977538585663, "loss_rpn_cls": 0.002964502782560885, "loss_rpn_loc": 0.03749946877360344, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8888799219998873, "total_loss": 0.1592754531884566}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013297670999691036, "eta_seconds": 9873.78316883738, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2679, "loss_box_reg": 0.07238440215587616, "loss_cls": 0.0355693232268095, "loss_rpn_cls": 0.0026111083570867777, "loss_rpn_loc": 0.0347738191485405, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.877020037499733, "total_loss": 0.16674690548097715}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 92.9240043828716, "bbox/AP50": 98.92929606072012, "bbox/AP75": 98.92799052796131, "bbox/APl": 93.68590994988891, "bbox/APm": 91.26409846273341, "bbox/APs": NaN, "data_time": 0.012849886500134744, "eta_seconds": 9856.122737068548, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 2699, "loss_box_reg": 0.0671813078224659, "loss_cls": 0.031869376078248024, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0031945809023454785, "loss_rpn_loc": 0.036566296592354774, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8767406539996045, "total_loss": 0.14776976208668202, "validation_loss": 0.15299182322134222}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011506692000239127, "eta_seconds": 9834.512868088885, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02899722337196468, "fast_rcnn/fg_cls_accuracy": 0.9710027766280354, "iteration": 2719, "loss_box_reg": 0.07861164957284927, "loss_cls": 0.030141491442918777, "loss_rpn_cls": 0.0024106288328766823, "loss_rpn_loc": 0.03943100944161415, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8650525944999572, "total_loss": 0.1521670074434951}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01285303099984958, "eta_seconds": 9817.077334238891, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02957381063432836, "fast_rcnn/fg_cls_accuracy": 0.9704261893656716, "iteration": 2739, "loss_box_reg": 0.06671890988945961, "loss_cls": 0.03127466607838869, "loss_rpn_cls": 0.0026815730379894376, "loss_rpn_loc": 0.032418686896562576, "lr": 0.005, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.872626844000024, "total_loss": 0.14512363611720502}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012917492500037042, "eta_seconds": 9801.74766123081, "fast_rcnn/cls_accuracy": 0.954833984375, "fast_rcnn/false_negative": 0.09676804011336385, "fast_rcnn/fg_cls_accuracy": 0.9032319598866361, "iteration": 2759, "loss_box_reg": 0.11749137938022614, "loss_cls": 0.10883904993534088, "loss_rpn_cls": 0.01077337609604001, "loss_rpn_loc": 0.058977166190743446, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8778482835000432, "total_loss": 0.3397485390305519}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015244338000229618, "eta_seconds": 9784.308380630808, "fast_rcnn/cls_accuracy": 0.96533203125, "fast_rcnn/false_negative": 0.0766254912525355, "fast_rcnn/fg_cls_accuracy": 0.9233745087474645, "iteration": 2779, "loss_box_reg": 0.129035085439682, "loss_cls": 0.09200597926974297, "loss_rpn_cls": 0.013461795169860125, "loss_rpn_loc": 0.06961438059806824, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8592402270001003, "total_loss": 0.30797872692346573}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014976671999647806, "eta_seconds": 9762.52735721154, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.05617177138594165, "fast_rcnn/fg_cls_accuracy": 0.9438282286140584, "iteration": 2799, "loss_box_reg": 0.12645410001277924, "loss_cls": 0.07380463182926178, "loss_rpn_cls": 0.007109847851097584, "loss_rpn_loc": 0.06993347778916359, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8461526080000112, "total_loss": 0.290553962578997}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013639475000218226, "eta_seconds": 9745.095829031536, "fast_rcnn/cls_accuracy": 0.98291015625, "fast_rcnn/false_negative": 0.03667033370003667, "fast_rcnn/fg_cls_accuracy": 0.9633296662999633, "iteration": 2819, "loss_box_reg": 0.09371316060423851, "loss_cls": 0.045089706778526306, "loss_rpn_cls": 0.005565444240346551, "loss_rpn_loc": 0.04761535860598087, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8727382074998786, "total_loss": 0.19521310785785317}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01387930500004586, "eta_seconds": 9728.338034612361, "fast_rcnn/cls_accuracy": 0.981689453125, "fast_rcnn/false_negative": 0.04177911931818182, "fast_rcnn/fg_cls_accuracy": 0.9582208806818182, "iteration": 2839, "loss_box_reg": 0.09622959420084953, "loss_cls": 0.04797627404332161, "loss_rpn_cls": 0.005159869324415922, "loss_rpn_loc": 0.04820975102484226, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8819557160004479, "total_loss": 0.20418882521335036}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01400469649979641, "eta_seconds": 9721.238075284942, "fast_rcnn/cls_accuracy": 0.9833984375, "fast_rcnn/false_negative": 0.035701430861929534, "fast_rcnn/fg_cls_accuracy": 0.9642985691380704, "iteration": 2859, "loss_box_reg": 0.08729725331068039, "loss_cls": 0.046435995027422905, "loss_rpn_cls": 0.00510191498324275, "loss_rpn_loc": 0.058035969734191895, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.908507136499793, "total_loss": 0.20082180527970195}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01294949600014661, "eta_seconds": 9702.349646118308, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2879, "loss_box_reg": 0.07738611847162247, "loss_cls": 0.037084782496094704, "loss_rpn_cls": 0.004217830719426274, "loss_rpn_loc": 0.04370034486055374, "lr": 0.005, "roi_head/num_bg_samples": 386.25, "roi_head/num_fg_samples": 125.75, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8611070060001111, "total_loss": 0.16869779070839286}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013615458000003855, "eta_seconds": 9692.134685180317, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.030606273408239702, "fast_rcnn/fg_cls_accuracy": 0.9693937265917603, "iteration": 2899, "loss_box_reg": 0.08812431991100311, "loss_cls": 0.035314807668328285, "loss_rpn_cls": 0.0043608746491372585, "loss_rpn_loc": 0.04997708648443222, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 158.125, "rpn/num_pos_anchors": 97.875, "time": 0.8876654215000599, "total_loss": 0.1825667613884434}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012895140999717114, "eta_seconds": 9674.672952570318, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.0361241703539823, "fast_rcnn/fg_cls_accuracy": 0.9638758296460177, "iteration": 2919, "loss_box_reg": 0.08205550536513329, "loss_cls": 0.03564905747771263, "loss_rpn_cls": 0.003591310582123697, "loss_rpn_loc": 0.05027636140584946, "lr": 0.005, "roi_head/num_bg_samples": 399.875, "roi_head/num_fg_samples": 112.125, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.8845072490003076, "total_loss": 0.17568102467339486}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014998236500105122, "eta_seconds": 9651.432936964971, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02536879358071411, "fast_rcnn/fg_cls_accuracy": 0.9746312064192859, "iteration": 2939, "loss_box_reg": 0.08032884448766708, "loss_cls": 0.03405417315661907, "loss_rpn_cls": 0.003540605423040688, "loss_rpn_loc": 0.04676378145813942, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.871404378999614, "total_loss": 0.16514784714672714}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01499920749984085, "eta_seconds": 9640.941865665844, "fast_rcnn/cls_accuracy": 0.985595703125, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2959, "loss_box_reg": 0.07666385546326637, "loss_cls": 0.033461492508649826, "loss_rpn_cls": 0.0037930241087451577, "loss_rpn_loc": 0.03955382853746414, "lr": 0.005, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8775624479999351, "total_loss": 0.1578356878599152}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.0172871985000711, "eta_seconds": 9625.483712489166, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2979, "loss_box_reg": 0.0873444713652134, "loss_cls": 0.03711334243416786, "loss_rpn_cls": 0.004567545838654041, "loss_rpn_loc": 0.04251238889992237, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.875, "rpn/num_pos_anchors": 87.125, "time": 0.8813596219997635, "total_loss": 0.17236966197378933}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 93.12233100450966, "bbox/AP50": 98.91209551467809, "bbox/AP75": 98.90815859983685, "bbox/APl": 94.12688557090384, "bbox/APm": 91.41003399932086, "bbox/APs": NaN, "data_time": 0.015606857999955537, "eta_seconds": 9623.082286138271, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 2999, "loss_box_reg": 0.06720640882849693, "loss_cls": 0.01835676282644272, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.009389291051775217, "loss_rpn_loc": 0.038574906066060066, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.9206664974999512, "total_loss": 0.14024185249581933, "validation_loss": 0.15954915430267325}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011808011999619339, "eta_seconds": 9600.16200263439, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 3019, "loss_box_reg": 0.08314639329910278, "loss_cls": 0.0376443974673748, "loss_rpn_cls": 0.0030142214382067323, "loss_rpn_loc": 0.03945096954703331, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8562799734995679, "total_loss": 0.1746992077678442}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013189115500154003, "eta_seconds": 9581.05644311135, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 3039, "loss_box_reg": 0.07409685850143433, "loss_cls": 0.03244470991194248, "loss_rpn_cls": 0.0028242692351341248, "loss_rpn_loc": 0.04587041959166527, "lr": 0.005, "roi_head/num_bg_samples": 387.5, "roi_head/num_fg_samples": 124.5, "rpn/num_neg_anchors": 154.375, "rpn/num_pos_anchors": 101.625, "time": 0.8644745054998566, "total_loss": 0.16931998787913471}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013534310999602894, "eta_seconds": 9555.039547035833, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0348046875, "fast_rcnn/fg_cls_accuracy": 0.9651953125, "iteration": 3059, "loss_box_reg": 0.08912316337227821, "loss_cls": 0.040720729157328606, "loss_rpn_cls": 0.0033090302022174, "loss_rpn_loc": 0.04025048390030861, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8530120370000986, "total_loss": 0.17787926085293293}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014201820000380394, "eta_seconds": 9543.668527310429, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03196486928104575, "fast_rcnn/fg_cls_accuracy": 0.9680351307189543, "iteration": 3079, "loss_box_reg": 0.0686977356672287, "loss_cls": 0.035015568137168884, "loss_rpn_cls": 0.00279963796492666, "loss_rpn_loc": 0.03855223208665848, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8948249290006061, "total_loss": 0.14674806164111942}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013865771499695256, "eta_seconds": 9517.51735908032, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02321697909933204, "fast_rcnn/fg_cls_accuracy": 0.9767830209006679, "iteration": 3099, "loss_box_reg": 0.07850319519639015, "loss_cls": 0.027558359317481518, "loss_rpn_cls": 0.0027522484306246042, "loss_rpn_loc": 0.03784923441708088, "lr": 0.005, "roi_head/num_bg_samples": 389.875, "roi_head/num_fg_samples": 122.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8595668009998008, "total_loss": 0.14408221002668142}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01446834599983049, "eta_seconds": 9508.71323557044, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 3119, "loss_box_reg": 0.07208020612597466, "loss_cls": 0.027958947233855724, "loss_rpn_cls": 0.0028214638587087393, "loss_rpn_loc": 0.04015910252928734, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8765667439997742, "total_loss": 0.14485203940421343}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015091185000073892, "eta_seconds": 9483.766832985846, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3139, "loss_box_reg": 0.07660289481282234, "loss_cls": 0.02883316855877638, "loss_rpn_cls": 0.003664590767584741, "loss_rpn_loc": 0.04118155874311924, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8495973095000409, "total_loss": 0.15969278826378286}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013378322499647766, "eta_seconds": 9456.344148523265, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027560763888888888, "fast_rcnn/fg_cls_accuracy": 0.9724392361111112, "iteration": 3159, "loss_box_reg": 0.07904543727636337, "loss_cls": 0.028979639522731304, "loss_rpn_cls": 0.002581986482255161, "loss_rpn_loc": 0.03558463603258133, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8616635454995958, "total_loss": 0.1512664365582168}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013394650000009278, "eta_seconds": 9445.126903894947, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.032126560069590346, "fast_rcnn/fg_cls_accuracy": 0.9678734399304096, "iteration": 3179, "loss_box_reg": 0.08476627245545387, "loss_cls": 0.0355964619666338, "loss_rpn_cls": 0.003005484351888299, "loss_rpn_loc": 0.039235398173332214, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8727699070004746, "total_loss": 0.17287040723022074}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015970269499575807, "eta_seconds": 9419.84299253093, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.027215893058690745, "fast_rcnn/fg_cls_accuracy": 0.9727841069413092, "iteration": 3199, "loss_box_reg": 0.08042847365140915, "loss_cls": 0.029140799306333065, "loss_rpn_cls": 0.0027483388548716903, "loss_rpn_loc": 0.03704603388905525, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8536831940004959, "total_loss": 0.15336330170975998}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01509946050009603, "eta_seconds": 9401.151297154625, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.0322592626984864, "fast_rcnn/fg_cls_accuracy": 0.9677407373015137, "iteration": 3219, "loss_box_reg": 0.07175835222005844, "loss_cls": 0.03212358430027962, "loss_rpn_cls": 0.0027838735841214657, "loss_rpn_loc": 0.036246467381715775, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8455828644996473, "total_loss": 0.14006751152919605}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013515179500245722, "eta_seconds": 9383.849602200717, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021980676328502417, "fast_rcnn/fg_cls_accuracy": 0.9780193236714976, "iteration": 3239, "loss_box_reg": 0.0661500059068203, "loss_cls": 0.025285215117037296, "loss_rpn_cls": 0.0022180761443451047, "loss_rpn_loc": 0.036850456148386, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8759488749997217, "total_loss": 0.13612847530748695}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013904339499731577, "eta_seconds": 9362.250589532423, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02769993111222445, "fast_rcnn/fg_cls_accuracy": 0.9723000688877755, "iteration": 3259, "loss_box_reg": 0.07065539062023163, "loss_cls": 0.028814840130507946, "loss_rpn_cls": 0.0029595009982585907, "loss_rpn_loc": 0.042885731905698776, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.88494127749982, "total_loss": 0.15331736870575696}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014031905499905406, "eta_seconds": 9348.968644660708, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.023207561461218836, "fast_rcnn/fg_cls_accuracy": 0.9767924385387812, "iteration": 3279, "loss_box_reg": 0.059069978073239326, "loss_cls": 0.025125066749751568, "loss_rpn_cls": 0.003141147317364812, "loss_rpn_loc": 0.038696713745594025, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.886954471000081, "total_loss": 0.1338297468610108}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 93.27905094948086, "bbox/AP50": 98.96061968335171, "bbox/AP75": 98.95254082058918, "bbox/APl": 94.22290992711233, "bbox/APm": 91.01193026527187, "bbox/APs": NaN, "data_time": 0.015314491499793803, "eta_seconds": 9331.528165890704, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3299, "loss_box_reg": 0.06118686683475971, "loss_cls": 0.025163940154016018, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.002601873711682856, "loss_rpn_loc": 0.046768760308623314, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8836847110001145, "total_loss": 0.14197535056155175, "validation_loss": 0.17572354030975335}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01657294799997544, "eta_seconds": 9327.826769569449, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027298709381551364, "fast_rcnn/fg_cls_accuracy": 0.9727012906184487, "iteration": 3319, "loss_box_reg": 0.07321085035800934, "loss_cls": 0.026175927370786667, "loss_rpn_cls": 0.0025562879163771868, "loss_rpn_loc": 0.04157147742807865, "lr": 0.005, "roi_head/num_bg_samples": 396.0, "roi_head/num_fg_samples": 116.0, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8852187219999905, "total_loss": 0.15138369193300605}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013637358500091068, "eta_seconds": 9320.907193381125, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3339, "loss_box_reg": 0.0705733373761177, "loss_cls": 0.029932837933301926, "loss_rpn_cls": 0.002767486381344497, "loss_rpn_loc": 0.04421466588973999, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8811242625001796, "total_loss": 0.1560333016095683}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015893325499746425, "eta_seconds": 9306.525065608244, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02383262761703129, "fast_rcnn/fg_cls_accuracy": 0.9761673723829687, "iteration": 3359, "loss_box_reg": 0.07866281643509865, "loss_cls": 0.03185747377574444, "loss_rpn_cls": 0.003939336049370468, "loss_rpn_loc": 0.04590761289000511, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8784054349998769, "total_loss": 0.15744307718705386}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01445641100008288, "eta_seconds": 9285.935212541124, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 3379, "loss_box_reg": 0.07135868817567825, "loss_cls": 0.03006169479340315, "loss_rpn_cls": 0.0031535130692645907, "loss_rpn_loc": 0.0403817743062973, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.75, "rpn/num_pos_anchors": 97.25, "time": 0.8491240339999422, "total_loss": 0.15564731787890196}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015795905500453955, "eta_seconds": 9261.439326773583, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02752351492961303, "fast_rcnn/fg_cls_accuracy": 0.972476485070387, "iteration": 3399, "loss_box_reg": 0.06518244743347168, "loss_cls": 0.02701749838888645, "loss_rpn_cls": 0.002880784450098872, "loss_rpn_loc": 0.0377532746642828, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8454985644998487, "total_loss": 0.1512888001743704}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01527901799954634, "eta_seconds": 9231.234745578438, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02244012304987915, "fast_rcnn/fg_cls_accuracy": 0.9775598769501208, "iteration": 3419, "loss_box_reg": 0.07252498716115952, "loss_cls": 0.03160363249480724, "loss_rpn_cls": 0.0024293236201629043, "loss_rpn_loc": 0.04073278419673443, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.852150950000123, "total_loss": 0.15422597713768482}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012618986000234145, "eta_seconds": 9217.465740862552, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3439, "loss_box_reg": 0.07212798297405243, "loss_cls": 0.02934582531452179, "loss_rpn_cls": 0.0028162638191133738, "loss_rpn_loc": 0.03634508140385151, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.859679992999645, "total_loss": 0.14720665954519063}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015629582999736158, "eta_seconds": 9209.021030423577, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.030127502792816015, "fast_rcnn/fg_cls_accuracy": 0.9698724972071839, "iteration": 3459, "loss_box_reg": 0.07034417241811752, "loss_cls": 0.026633177883923054, "loss_rpn_cls": 0.003176042577251792, "loss_rpn_loc": 0.0405108705163002, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.9005381335000493, "total_loss": 0.15105392935220152}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012076322499979142, "eta_seconds": 9194.057128930923, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.030489864864864866, "fast_rcnn/fg_cls_accuracy": 0.9695101351351352, "iteration": 3479, "loss_box_reg": 0.07114227861166, "loss_cls": 0.026824098080396652, "loss_rpn_cls": 0.002793507184833288, "loss_rpn_loc": 0.03859907202422619, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.8727268464995177, "total_loss": 0.14840750175062567}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014796175999890693, "eta_seconds": 9184.643737424389, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02636273846810934, "fast_rcnn/fg_cls_accuracy": 0.9736372615318907, "iteration": 3499, "loss_box_reg": 0.07014593109488487, "loss_cls": 0.025068681687116623, "loss_rpn_cls": 0.0022604097612202168, "loss_rpn_loc": 0.04264912009239197, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.893156176499815, "total_loss": 0.15068290615454316}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01170660899970244, "eta_seconds": 9176.90027535572, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.024857474662162163, "fast_rcnn/fg_cls_accuracy": 0.9751425253378379, "iteration": 3519, "loss_box_reg": 0.07261389493942261, "loss_cls": 0.031547232531011105, "loss_rpn_cls": 0.0035334062995389104, "loss_rpn_loc": 0.05682768300175667, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8848085234999417, "total_loss": 0.16874005855061114}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015069052500166435, "eta_seconds": 9149.657950404393, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02318663990825688, "fast_rcnn/fg_cls_accuracy": 0.9768133600917431, "iteration": 3539, "loss_box_reg": 0.06397773697972298, "loss_cls": 0.027955145575106144, "loss_rpn_cls": 0.0029910271987318993, "loss_rpn_loc": 0.035324785858392715, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8772716075000062, "total_loss": 0.14210126956459135}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014824828999735473, "eta_seconds": 9139.718760184218, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024399182888728672, "fast_rcnn/fg_cls_accuracy": 0.9756008171112713, "iteration": 3559, "loss_box_reg": 0.06688013300299644, "loss_cls": 0.02547728642821312, "loss_rpn_cls": 0.002551792422309518, "loss_rpn_loc": 0.041121695190668106, "lr": 0.005, "roi_head/num_bg_samples": 386.375, "roi_head/num_fg_samples": 125.625, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8910150914994119, "total_loss": 0.137859839014709}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012648733000332868, "eta_seconds": 9122.743446730547, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.03091551987767584, "fast_rcnn/fg_cls_accuracy": 0.9690844801223242, "iteration": 3579, "loss_box_reg": 0.06596524640917778, "loss_cls": 0.031009403057396412, "loss_rpn_cls": 0.002636650577187538, "loss_rpn_loc": 0.03402801230549812, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8622523320004802, "total_loss": 0.14295857812976465}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 94.51462784052855, "bbox/AP50": 98.93522228080109, "bbox/AP75": 98.93450218404813, "bbox/APl": 95.4269028089368, "bbox/APm": 92.13712530083895, "bbox/APs": NaN, "data_time": 0.016846376500325277, "eta_seconds": 9099.664099978247, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3599, "loss_box_reg": 0.060619814321398735, "loss_cls": 0.025204936042428017, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002324309549294412, "loss_rpn_loc": 0.029545368626713753, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8770653480000874, "total_loss": 0.12885292759165168, "validation_loss": 0.1466805888295102}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013414248000117368, "eta_seconds": 9073.193813482945, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02580995230643118, "fast_rcnn/fg_cls_accuracy": 0.9741900476935689, "iteration": 3619, "loss_box_reg": 0.07269391417503357, "loss_cls": 0.02648307103663683, "loss_rpn_cls": 0.002976909978315234, "loss_rpn_loc": 0.035148199647665024, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8643609504997585, "total_loss": 0.14119619433768094}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.017480556500231614, "eta_seconds": 9064.668756838248, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021484734934578288, "fast_rcnn/fg_cls_accuracy": 0.9785152650654217, "iteration": 3639, "loss_box_reg": 0.06451242417097092, "loss_cls": 0.025800890289247036, "loss_rpn_cls": 0.003012675791978836, "loss_rpn_loc": 0.03744327463209629, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8850444254994727, "total_loss": 0.13275502575561404}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015173202000369201, "eta_seconds": 9041.131346661121, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 3659, "loss_box_reg": 0.06518324464559555, "loss_cls": 0.028774174861609936, "loss_rpn_cls": 0.0030480388086289167, "loss_rpn_loc": 0.04536570981144905, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8544350470001518, "total_loss": 0.15816591365728527}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015335218500695191, "eta_seconds": 9025.614861067337, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3679, "loss_box_reg": 0.06726354733109474, "loss_cls": 0.024467935785651207, "loss_rpn_cls": 0.0026147140888497233, "loss_rpn_loc": 0.03361096978187561, "lr": 0.005, "roi_head/num_bg_samples": 385.125, "roi_head/num_fg_samples": 126.875, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8869942110004558, "total_loss": 0.13675730756949633}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.016904356500162976, "eta_seconds": 9004.579372686254, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025110662387133182, "fast_rcnn/fg_cls_accuracy": 0.9748893376128669, "iteration": 3699, "loss_box_reg": 0.07380294799804688, "loss_cls": 0.02671107929199934, "loss_rpn_cls": 0.0026282721664756536, "loss_rpn_loc": 0.03765440732240677, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.8669072914990466, "total_loss": 0.15535226103384048}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01588809099939681, "eta_seconds": 8987.096449916258, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02690737158822265, "fast_rcnn/fg_cls_accuracy": 0.9730926284117773, "iteration": 3719, "loss_box_reg": 0.07514582574367523, "loss_cls": 0.03208179213106632, "loss_rpn_cls": 0.0023227966157719493, "loss_rpn_loc": 0.03262249752879143, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8608530749997954, "total_loss": 0.13813788018887863}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01272802500079706, "eta_seconds": 8962.058414416571, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.023082386363636364, "fast_rcnn/fg_cls_accuracy": 0.9769176136363636, "iteration": 3739, "loss_box_reg": 0.06598043441772461, "loss_cls": 0.02492926735430956, "loss_rpn_cls": 0.002211912884376943, "loss_rpn_loc": 0.035132599994540215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.375, "rpn/num_pos_anchors": 99.625, "time": 0.8425305889995798, "total_loss": 0.14112166687846184}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.017491417498604278, "eta_seconds": 8932.782554465553, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.024274259868421053, "fast_rcnn/fg_cls_accuracy": 0.9757257401315789, "iteration": 3759, "loss_box_reg": 0.0770643837749958, "loss_cls": 0.02429282944649458, "loss_rpn_cls": 0.0028139676433056593, "loss_rpn_loc": 0.03533002734184265, "lr": 0.005, "roi_head/num_bg_samples": 392.125, "roi_head/num_fg_samples": 119.875, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8662025825005912, "total_loss": 0.13814355875365436}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014352537500599283, "eta_seconds": 8915.337417165552, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.025071550123762377, "fast_rcnn/fg_cls_accuracy": 0.9749284498762376, "iteration": 3779, "loss_box_reg": 0.07174495980143547, "loss_cls": 0.024629310704767704, "loss_rpn_cls": 0.002537853899411857, "loss_rpn_loc": 0.032603537663817406, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 172.625, "rpn/num_pos_anchors": 83.375, "time": 0.863006641499851, "total_loss": 0.1404715662356466}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.016315409999151598, "eta_seconds": 8902.066019020147, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 3799, "loss_box_reg": 0.07169150561094284, "loss_cls": 0.02851510141044855, "loss_rpn_cls": 0.002499441849067807, "loss_rpn_loc": 0.03480919077992439, "lr": 0.005, "roi_head/num_bg_samples": 387.125, "roi_head/num_fg_samples": 124.875, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8698634014999698, "total_loss": 0.1458265830297023}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014548789498803671, "eta_seconds": 8871.673029500389, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029305965489839936, "fast_rcnn/fg_cls_accuracy": 0.97069403451016, "iteration": 3819, "loss_box_reg": 0.06981262192130089, "loss_cls": 0.0321883549913764, "loss_rpn_cls": 0.0028753530932590365, "loss_rpn_loc": 0.036025675013661385, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8394459645005554, "total_loss": 0.15315054648090154}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013720603499677964, "eta_seconds": 8853.17420985548, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.030490451388888888, "fast_rcnn/fg_cls_accuracy": 0.9695095486111112, "iteration": 3839, "loss_box_reg": 0.07815155386924744, "loss_cls": 0.03196221496909857, "loss_rpn_cls": 0.002755100023932755, "loss_rpn_loc": 0.03541838005185127, "lr": 0.005, "roi_head/num_bg_samples": 391.875, "roi_head/num_fg_samples": 120.125, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8787194060005277, "total_loss": 0.1481912493472919}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012579242999890994, "eta_seconds": 8833.573435874765, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.031897189349112426, "fast_rcnn/fg_cls_accuracy": 0.9681028106508875, "iteration": 3859, "loss_box_reg": 0.07044711336493492, "loss_cls": 0.029714887030422688, "loss_rpn_cls": 0.0033130873925983906, "loss_rpn_loc": 0.041767822578549385, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8905400194989852, "total_loss": 0.14567952742800117}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.016821658499793557, "eta_seconds": 8823.220519568787, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02559853830645161, "fast_rcnn/fg_cls_accuracy": 0.9744014616935484, "iteration": 3879, "loss_box_reg": 0.07491979375481606, "loss_cls": 0.027746117673814297, "loss_rpn_cls": 0.0025814230320975184, "loss_rpn_loc": 0.04155806638300419, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 164.75, "rpn/num_pos_anchors": 91.25, "time": 0.8907964480004011, "total_loss": 0.15361196256708354}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 94.94155308690227, "bbox/AP50": 98.96777693067816, "bbox/AP75": 98.96599116280159, "bbox/APl": 95.81155173226301, "bbox/APm": 92.58270316582754, "bbox/APs": NaN, "data_time": 0.0166540754999005, "eta_seconds": 8797.017228219971, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 3899, "loss_box_reg": 0.06790591776371002, "loss_cls": 0.025828268378973007, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0026264950865879655, "loss_rpn_loc": 0.03195084631443024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8543838935001986, "total_loss": 0.13255327357910573, "validation_loss": 0.14792111576303246}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01380043500012107, "eta_seconds": 8781.817470994656, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024719360596192383, "fast_rcnn/fg_cls_accuracy": 0.9752806394038076, "iteration": 3919, "loss_box_reg": 0.06461720168590546, "loss_cls": 0.023319250904023647, "loss_rpn_cls": 0.0020520591642707586, "loss_rpn_loc": 0.03039520513266325, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.8972092889998748, "total_loss": 0.13415113149676472}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014971762999266502, "eta_seconds": 8759.346107136958, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3939, "loss_box_reg": 0.06706715747714043, "loss_cls": 0.027508745901286602, "loss_rpn_cls": 0.0024385941214859486, "loss_rpn_loc": 0.03421283699572086, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.375, "rpn/num_pos_anchors": 93.625, "time": 0.8548483864997252, "total_loss": 0.1354159387992695}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012218220000249858, "eta_seconds": 8741.933631026955, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3959, "loss_box_reg": 0.06786992028355598, "loss_cls": 0.02666586823761463, "loss_rpn_cls": 0.00215515261515975, "loss_rpn_loc": 0.0341497752815485, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8674180375001015, "total_loss": 0.13773037993814796}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013403915500020958, "eta_seconds": 8723.552189349628, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022183835097254002, "fast_rcnn/fg_cls_accuracy": 0.9778161649027459, "iteration": 3979, "loss_box_reg": 0.06269732862710953, "loss_cls": 0.02577450592070818, "loss_rpn_cls": 0.002212987863458693, "loss_rpn_loc": 0.033453453332185745, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8743991820001611, "total_loss": 0.12669191422173753}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014044588500837563, "eta_seconds": 8699.251158132407, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021779715093818985, "fast_rcnn/fg_cls_accuracy": 0.978220284906181, "iteration": 3999, "loss_box_reg": 0.05749828927218914, "loss_cls": 0.02292787656188011, "loss_rpn_cls": 0.0022763016168028116, "loss_rpn_loc": 0.030527872033417225, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8781595870004821, "total_loss": 0.12036801665090024}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.017877838000458723, "eta_seconds": 8681.47508755295, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.024946263227513227, "fast_rcnn/fg_cls_accuracy": 0.9750537367724867, "iteration": 4019, "loss_box_reg": 0.061806268990039825, "loss_cls": 0.021874409168958664, "loss_rpn_cls": 0.001797958801034838, "loss_rpn_loc": 0.032160378992557526, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.858296216000781, "total_loss": 0.12814085837453604}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.017760669000381313, "eta_seconds": 8664.079084972942, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025957911969496022, "fast_rcnn/fg_cls_accuracy": 0.974042088030504, "iteration": 4039, "loss_box_reg": 0.06829555332660675, "loss_cls": 0.02705319505184889, "loss_rpn_cls": 0.0019355633994564414, "loss_rpn_loc": 0.03182108514010906, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.868489757000134, "total_loss": 0.13258394983131438}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014202485499481554, "eta_seconds": 8653.910020389647, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4059, "loss_box_reg": 0.06874504685401917, "loss_cls": 0.02661903016269207, "loss_rpn_cls": 0.0024593337439000607, "loss_rpn_loc": 0.035074906423687935, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8713963939999303, "total_loss": 0.13849112973548472}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014231688500331074, "eta_seconds": 8633.553868764164, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025265144902234637, "fast_rcnn/fg_cls_accuracy": 0.9747348550977654, "iteration": 4079, "loss_box_reg": 0.06041577830910683, "loss_cls": 0.024997691623866558, "loss_rpn_cls": 0.0023892336757853627, "loss_rpn_loc": 0.033885177224874496, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 172.5, "rpn/num_pos_anchors": 83.5, "time": 0.8808629795003071, "total_loss": 0.1258070394396782}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013304524999512068, "eta_seconds": 8622.8361129201, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0185546875, "fast_rcnn/fg_cls_accuracy": 0.9814453125, "iteration": 4099, "loss_box_reg": 0.05665453523397446, "loss_cls": 0.02086931560188532, "loss_rpn_cls": 0.0020721667679026723, "loss_rpn_loc": 0.032867273315787315, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8957161810003527, "total_loss": 0.12901447108015418}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01389541300068231, "eta_seconds": 8609.213105755536, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021978142556179775, "fast_rcnn/fg_cls_accuracy": 0.9780218574438202, "iteration": 4119, "loss_box_reg": 0.06112395226955414, "loss_cls": 0.0211090799421072, "loss_rpn_cls": 0.002453662804327905, "loss_rpn_loc": 0.03786292113363743, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8970748760002607, "total_loss": 0.13180671783629805}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013343292500394455, "eta_seconds": 8593.27903537613, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 4139, "loss_box_reg": 0.07672134041786194, "loss_cls": 0.028643625788390636, "loss_rpn_cls": 0.0022411660756915808, "loss_rpn_loc": 0.03565843217074871, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8405602805005401, "total_loss": 0.14650720910867676}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.010753457500868535, "eta_seconds": 8575.850216726143, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.021805205331412104, "fast_rcnn/fg_cls_accuracy": 0.9781947946685878, "iteration": 4159, "loss_box_reg": 0.06780307739973068, "loss_cls": 0.027994119562208652, "loss_rpn_cls": 0.00258387578651309, "loss_rpn_loc": 0.033184777945280075, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.0, "rpn/num_pos_anchors": 87.0, "time": 0.8456791519993203, "total_loss": 0.13741438509896398}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01744608349963528, "eta_seconds": 8560.807449318956, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024896364795918367, "fast_rcnn/fg_cls_accuracy": 0.9751036352040816, "iteration": 4179, "loss_box_reg": 0.0685216449201107, "loss_cls": 0.02508564107120037, "loss_rpn_cls": 0.0029065579874441028, "loss_rpn_loc": 0.04283138923346996, "lr": 0.005, "roi_head/num_bg_samples": 393.625, "roi_head/num_fg_samples": 118.375, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.9070378970000093, "total_loss": 0.14319775789044797}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 93.40862195109425, "bbox/AP50": 98.96374346407794, "bbox/AP75": 98.96286729535807, "bbox/APl": 94.03985809640986, "bbox/APm": 91.7385771795752, "bbox/APs": NaN, "data_time": 0.014953972499824886, "eta_seconds": 8544.73683586187, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4199, "loss_box_reg": 0.06535263359546661, "loss_cls": 0.02621511183679104, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0030301553197205067, "loss_rpn_loc": 0.03586420789361, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.86083233249974, "total_loss": 0.14097663236316293, "validation_loss": 0.14196365930424992}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015456654999979946, "eta_seconds": 8526.088662350707, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022115090722165106, "fast_rcnn/fg_cls_accuracy": 0.9778849092778349, "iteration": 4219, "loss_box_reg": 0.054392239078879356, "loss_cls": 0.022306395694613457, "loss_rpn_cls": 0.002272343495860696, "loss_rpn_loc": 0.03396121598780155, "lr": 0.005, "roi_head/num_bg_samples": 385.625, "roi_head/num_fg_samples": 126.375, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8550791284997104, "total_loss": 0.11667074263095856}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014931448999959684, "eta_seconds": 8509.863917441864, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01743958153114187, "fast_rcnn/fg_cls_accuracy": 0.9825604184688581, "iteration": 4239, "loss_box_reg": 0.05129031836986542, "loss_cls": 0.01760159432888031, "loss_rpn_cls": 0.0029446481494233012, "loss_rpn_loc": 0.03069587703794241, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 175.375, "rpn/num_pos_anchors": 80.625, "time": 0.8826235694996285, "total_loss": 0.10483503562863916}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01954176850085787, "eta_seconds": 8496.111869716606, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.020697939712389382, "fast_rcnn/fg_cls_accuracy": 0.9793020602876106, "iteration": 4259, "loss_box_reg": 0.056341201066970825, "loss_cls": 0.02312588132917881, "loss_rpn_cls": 0.0025954004377126694, "loss_rpn_loc": 0.04303659126162529, "lr": 0.005, "roi_head/num_bg_samples": 400.125, "roi_head/num_fg_samples": 111.875, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8868610045010428, "total_loss": 0.1288284579059109}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012749520000397752, "eta_seconds": 8478.667845756609, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.02358640160891089, "fast_rcnn/fg_cls_accuracy": 0.9764135983910891, "iteration": 4279, "loss_box_reg": 0.07378086820244789, "loss_cls": 0.02591687999665737, "loss_rpn_cls": 0.0020061879768036306, "loss_rpn_loc": 0.035794125869870186, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8801597854990177, "total_loss": 0.14331023581326008}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013414688999546343, "eta_seconds": 8454.956621716445, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.025853207236842105, "fast_rcnn/fg_cls_accuracy": 0.974146792763158, "iteration": 4299, "loss_box_reg": 0.08156145364046097, "loss_cls": 0.027444886043667793, "loss_rpn_cls": 0.0019563272362574935, "loss_rpn_loc": 0.036992449313402176, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8439608360004058, "total_loss": 0.15209498221520334}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014210977000402636, "eta_seconds": 8435.753309788897, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024087717563291138, "fast_rcnn/fg_cls_accuracy": 0.9759122824367088, "iteration": 4319, "loss_box_reg": 0.06321131065487862, "loss_cls": 0.02684237528592348, "loss_rpn_cls": 0.0027903582667931914, "loss_rpn_loc": 0.039607759565114975, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8749667014999432, "total_loss": 0.13853128533810377}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014168770499964012, "eta_seconds": 8418.325867768881, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02317734089352923, "fast_rcnn/fg_cls_accuracy": 0.9768226591064708, "iteration": 4339, "loss_box_reg": 0.05184036307036877, "loss_cls": 0.0229664733633399, "loss_rpn_cls": 0.002469330560415983, "loss_rpn_loc": 0.03057936020195484, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8862034110006789, "total_loss": 0.11455292662139982}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011720945999513788, "eta_seconds": 8400.027674726469, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02158229590108401, "fast_rcnn/fg_cls_accuracy": 0.9784177040989159, "iteration": 4359, "loss_box_reg": 0.06309510581195354, "loss_cls": 0.02259633969515562, "loss_rpn_cls": 0.002194952219724655, "loss_rpn_loc": 0.03172831051051617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8717078200006654, "total_loss": 0.1274147952790372}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01361429050029983, "eta_seconds": 8383.61604435138, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4379, "loss_box_reg": 0.06567597761750221, "loss_cls": 0.02794388961046934, "loss_rpn_cls": 0.0024444819428026676, "loss_rpn_loc": 0.03958482854068279, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8592332269990948, "total_loss": 0.14897812146227807}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014307960500445915, "eta_seconds": 8366.704392926298, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02046009062391077, "fast_rcnn/fg_cls_accuracy": 0.9795399093760893, "iteration": 4399, "loss_box_reg": 0.06178067624568939, "loss_cls": 0.02468185406178236, "loss_rpn_cls": 0.0023401040816679597, "loss_rpn_loc": 0.037465330213308334, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8559774465002192, "total_loss": 0.13837072649039328}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012621712000509433, "eta_seconds": 8353.963404295257, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4419, "loss_box_reg": 0.06035963259637356, "loss_cls": 0.022992623038589954, "loss_rpn_cls": 0.002158885123208165, "loss_rpn_loc": 0.027208128944039345, "lr": 0.005, "roi_head/num_bg_samples": 384.875, "roi_head/num_fg_samples": 127.125, "rpn/num_neg_anchors": 170.0, "rpn/num_pos_anchors": 86.0, "time": 0.8953435434996209, "total_loss": 0.12231088278349489}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014090943000155676, "eta_seconds": 8335.499325341836, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4439, "loss_box_reg": 0.06730298697948456, "loss_cls": 0.023621671833097935, "loss_rpn_cls": 0.0021845350274816155, "loss_rpn_loc": 0.0352974496781826, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.25, "rpn/num_pos_anchors": 97.75, "time": 0.8675036810000165, "total_loss": 0.13669328414835036}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012706199500826187, "eta_seconds": 8316.448691135098, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01759963518722467, "fast_rcnn/fg_cls_accuracy": 0.9824003648127753, "iteration": 4459, "loss_box_reg": 0.06193057633936405, "loss_cls": 0.021720517426729202, "loss_rpn_cls": 0.0018856043461710215, "loss_rpn_loc": 0.03091004677116871, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8937260224993224, "total_loss": 0.1227074918569997}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013523801500014088, "eta_seconds": 8296.77059710459, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4479, "loss_box_reg": 0.0764407068490982, "loss_cls": 0.02567237988114357, "loss_rpn_cls": 0.001991047873161733, "loss_rpn_loc": 0.03321711905300617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8536981769993872, "total_loss": 0.14464460092131048}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 93.00705134353211, "bbox/AP50": 98.93110542393643, "bbox/AP75": 98.93110542393643, "bbox/APl": 93.71191938022734, "bbox/APm": 91.30748008841427, "bbox/APs": NaN, "data_time": 0.014672981499643356, "eta_seconds": 8276.31107170184, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 4499, "loss_box_reg": 0.06515203043818474, "loss_cls": 0.022937876172363758, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002306717331521213, "loss_rpn_loc": 0.03413390927016735, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.853352267500668, "total_loss": 0.12754546070937067, "validation_loss": 0.1391322108589738}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015802942000846087, "eta_seconds": 8253.11384120532, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4519, "loss_box_reg": 0.06294054538011551, "loss_cls": 0.023245316930115223, "loss_rpn_cls": 0.0022322835866361856, "loss_rpn_loc": 0.03262490779161453, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.852351106000242, "total_loss": 0.13475362805183977}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015078195000569394, "eta_seconds": 8230.85458721614, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4539, "loss_box_reg": 0.07160457968711853, "loss_cls": 0.024476973339915276, "loss_rpn_cls": 0.002147287130355835, "loss_rpn_loc": 0.03720744699239731, "lr": 0.005, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8453313475001778, "total_loss": 0.13857831864152104}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01636703949952789, "eta_seconds": 8213.274710050322, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.023623511904761904, "fast_rcnn/fg_cls_accuracy": 0.9763764880952381, "iteration": 4559, "loss_box_reg": 0.05875660479068756, "loss_cls": 0.023611723445355892, "loss_rpn_cls": 0.0022019054740667343, "loss_rpn_loc": 0.0357234925031662, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8867215840000426, "total_loss": 0.12488182925153524}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013644237999869802, "eta_seconds": 8196.326549555364, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.023111155063291138, "fast_rcnn/fg_cls_accuracy": 0.9768888449367088, "iteration": 4579, "loss_box_reg": 0.07077584601938725, "loss_cls": 0.03129696846008301, "loss_rpn_cls": 0.0026352115673944354, "loss_rpn_loc": 0.042789068073034286, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8891512034997504, "total_loss": 0.15943694883026183}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015678855999794905, "eta_seconds": 8178.476384830322, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 4599, "loss_box_reg": 0.06418749317526817, "loss_cls": 0.02551879547536373, "loss_rpn_cls": 0.0027105951448902488, "loss_rpn_loc": 0.03643552586436272, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8658532284998728, "total_loss": 0.13786764186806977}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013482987999850593, "eta_seconds": 8161.526309455352, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 4619, "loss_box_reg": 0.057235922664403915, "loss_cls": 0.027666328474879265, "loss_rpn_cls": 0.0028786591719835997, "loss_rpn_loc": 0.04224038124084473, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8686648815000808, "total_loss": 0.147602929151617}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014154113498989318, "eta_seconds": 8143.856864066196, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.018079134487803218, "fast_rcnn/fg_cls_accuracy": 0.9819208655121967, "iteration": 4639, "loss_box_reg": 0.06335645914077759, "loss_cls": 0.021422572433948517, "loss_rpn_cls": 0.002599337021820247, "loss_rpn_loc": 0.03555195406079292, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8944120790001762, "total_loss": 0.12154645670671016}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014369196500410908, "eta_seconds": 8126.457319436207, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.019082395186335404, "fast_rcnn/fg_cls_accuracy": 0.9809176048136645, "iteration": 4659, "loss_box_reg": 0.06376534700393677, "loss_cls": 0.02196851186454296, "loss_rpn_cls": 0.002237886539660394, "loss_rpn_loc": 0.033371662721037865, "lr": 0.005, "roi_head/num_bg_samples": 390.5, "roi_head/num_fg_samples": 121.5, "rpn/num_neg_anchors": 170.75, "rpn/num_pos_anchors": 85.25, "time": 0.8616984569998749, "total_loss": 0.1318136416375637}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015702468500421674, "eta_seconds": 8108.360181842967, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4679, "loss_box_reg": 0.07680578529834747, "loss_cls": 0.0263025164604187, "loss_rpn_cls": 0.002300129854120314, "loss_rpn_loc": 0.03531237877905369, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8752102919997924, "total_loss": 0.14133498328737915}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015292086000044947, "eta_seconds": 8090.584890122356, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019212366580787635, "fast_rcnn/fg_cls_accuracy": 0.9807876334192124, "iteration": 4699, "loss_box_reg": 0.0615016333758831, "loss_cls": 0.02258227299898863, "loss_rpn_cls": 0.0023130879271775484, "loss_rpn_loc": 0.03282614052295685, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8670793040009812, "total_loss": 0.1370764736784622}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014544139499776065, "eta_seconds": 8074.003555504269, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025486010174418604, "fast_rcnn/fg_cls_accuracy": 0.9745139898255815, "iteration": 4719, "loss_box_reg": 0.06041738949716091, "loss_cls": 0.02572917565703392, "loss_rpn_cls": 0.0029287008801475167, "loss_rpn_loc": 0.03309382498264313, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.25, "rpn/num_pos_anchors": 86.75, "time": 0.8711159704998863, "total_loss": 0.1269720789277926}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014847834499050805, "eta_seconds": 8059.29771503509, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025900135869565216, "fast_rcnn/fg_cls_accuracy": 0.9740998641304348, "iteration": 4739, "loss_box_reg": 0.0714801549911499, "loss_cls": 0.027188056148588657, "loss_rpn_cls": 0.0027070617070421576, "loss_rpn_loc": 0.03857620805501938, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8524405455000306, "total_loss": 0.14026663172990084}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01192657099909411, "eta_seconds": 8049.82534613164, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.02163327660891089, "fast_rcnn/fg_cls_accuracy": 0.9783667233910891, "iteration": 4759, "loss_box_reg": 0.06939147785305977, "loss_cls": 0.023606639355421066, "loss_rpn_cls": 0.0027515310794115067, "loss_rpn_loc": 0.03266059421002865, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8984915240007467, "total_loss": 0.1395235169911757}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014523527000164904, "eta_seconds": 8031.938204672058, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024965251150306747, "fast_rcnn/fg_cls_accuracy": 0.9750347488496933, "iteration": 4779, "loss_box_reg": 0.05777068808674812, "loss_cls": 0.023717678152024746, "loss_rpn_cls": 0.0021182504715397954, "loss_rpn_loc": 0.03053051419556141, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8574463155000558, "total_loss": 0.12371064920444041}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 92.83870913222127, "bbox/AP50": 98.89921854644973, "bbox/AP75": 98.89912728642817, "bbox/APl": 93.47087851814192, "bbox/APm": 91.12752205685403, "bbox/APs": NaN, "data_time": 0.012065286000506603, "eta_seconds": 8013.493554443942, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 4799, "loss_box_reg": 0.06852671504020691, "loss_cls": 0.024018924683332443, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0019923251820728183, "loss_rpn_loc": 0.031630223616957664, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8492078769995715, "total_loss": 0.12812982744071633, "validation_loss": 0.13883173140969918}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014361648500198498, "eta_seconds": 7997.974128998968, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022432739674118983, "fast_rcnn/fg_cls_accuracy": 0.9775672603258809, "iteration": 4819, "loss_box_reg": 0.06308107823133469, "loss_cls": 0.026020622812211514, "loss_rpn_cls": 0.0019791799131780863, "loss_rpn_loc": 0.028659190982580185, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8516874639999514, "total_loss": 0.12498592003248632}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01331285400010529, "eta_seconds": 7975.913023215084, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4839, "loss_box_reg": 0.0646427609026432, "loss_cls": 0.020347592420876026, "loss_rpn_cls": 0.001991485129110515, "loss_rpn_loc": 0.033798862248659134, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.125, "rpn/num_pos_anchors": 94.875, "time": 0.8548326489999454, "total_loss": 0.12101646140217781}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014856578499347961, "eta_seconds": 7952.287270900327, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022954705056179775, "fast_rcnn/fg_cls_accuracy": 0.9770452949438202, "iteration": 4859, "loss_box_reg": 0.06417588889598846, "loss_cls": 0.024928205646574497, "loss_rpn_cls": 0.0023953185882419348, "loss_rpn_loc": 0.0365652646869421, "lr": 0.005, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 153.75, "rpn/num_pos_anchors": 102.25, "time": 0.8659156755002186, "total_loss": 0.13248549425043166}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015284542999324913, "eta_seconds": 7934.0097605425235, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.026614481409001956, "fast_rcnn/fg_cls_accuracy": 0.9733855185909981, "iteration": 4879, "loss_box_reg": 0.05695581994950771, "loss_cls": 0.026949993334710598, "loss_rpn_cls": 0.0022568139247596264, "loss_rpn_loc": 0.031991198658943176, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8785490965001372, "total_loss": 0.13178676005918533}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012375500499729242, "eta_seconds": 7916.612523922542, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 4899, "loss_box_reg": 0.054332148283720016, "loss_cls": 0.025169258937239647, "loss_rpn_cls": 0.0021670913556590676, "loss_rpn_loc": 0.035927778109908104, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8605520105002142, "total_loss": 0.12185906816739589}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014561972000592505, "eta_seconds": 7899.583608123161, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.023943392839564794, "fast_rcnn/fg_cls_accuracy": 0.9760566071604352, "iteration": 4919, "loss_box_reg": 0.06230667047202587, "loss_cls": 0.024050562642514706, "loss_rpn_cls": 0.0027801310643553734, "loss_rpn_loc": 0.041868120431900024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.9079685364995385, "total_loss": 0.1367650660686195}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01624575099958747, "eta_seconds": 7882.62070578202, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019130335409405175, "fast_rcnn/fg_cls_accuracy": 0.9808696645905948, "iteration": 4939, "loss_box_reg": 0.054358769208192825, "loss_cls": 0.020983748137950897, "loss_rpn_cls": 0.002553392667323351, "loss_rpn_loc": 0.031057841144502163, "lr": 0.005, "roi_head/num_bg_samples": 394.625, "roi_head/num_fg_samples": 117.375, "rpn/num_neg_anchors": 172.125, "rpn/num_pos_anchors": 83.875, "time": 0.8572734889994535, "total_loss": 0.11413180537056178}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01480730749972281, "eta_seconds": 7863.060794523997, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4959, "loss_box_reg": 0.05059147626161575, "loss_cls": 0.023940959945321083, "loss_rpn_cls": 0.0020585795864462852, "loss_rpn_loc": 0.02574349381029606, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 173.625, "rpn/num_pos_anchors": 82.375, "time": 0.8511550149996765, "total_loss": 0.11159791017416865}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013298474000293936, "eta_seconds": 7845.386798191916, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.020877322635135136, "fast_rcnn/fg_cls_accuracy": 0.9791226773648649, "iteration": 4979, "loss_box_reg": 0.07002099975943565, "loss_cls": 0.023530988954007626, "loss_rpn_cls": 0.002559944987297058, "loss_rpn_loc": 0.03650126792490482, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.865666287500062, "total_loss": 0.12548251438420266}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013746322499173402, "eta_seconds": 7826.405837039674, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021134797199769052, "fast_rcnn/fg_cls_accuracy": 0.9788652028002309, "iteration": 4999, "loss_box_reg": 0.06474976241588593, "loss_cls": 0.021297583356499672, "loss_rpn_cls": 0.002553505590185523, "loss_rpn_loc": 0.03182519692927599, "lr": 0.005, "roi_head/num_bg_samples": 397.75, "roi_head/num_fg_samples": 114.25, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8724677414993494, "total_loss": 0.12312883127015084}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.017712214999846765, "eta_seconds": 7811.00530376116, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01583389037433155, "fast_rcnn/fg_cls_accuracy": 0.9841661096256684, "iteration": 5019, "loss_box_reg": 0.05722466856241226, "loss_cls": 0.02171662263572216, "loss_rpn_cls": 0.002134993555955589, "loss_rpn_loc": 0.029185540974140167, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8960107909997532, "total_loss": 0.12077607901301235}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011359848999745736, "eta_seconds": 7795.350431704812, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 5039, "loss_box_reg": 0.06120045855641365, "loss_cls": 0.022784790955483913, "loss_rpn_cls": 0.0019911217968910933, "loss_rpn_loc": 0.031012319959700108, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8855154500006392, "total_loss": 0.1210803515277803}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013461599499350996, "eta_seconds": 7777.597656692167, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02298001126126126, "fast_rcnn/fg_cls_accuracy": 0.9770199887387387, "iteration": 5059, "loss_box_reg": 0.05519508570432663, "loss_cls": 0.021881303749978542, "loss_rpn_cls": 0.0015915895928628743, "loss_rpn_loc": 0.028308226726949215, "lr": 0.005, "roi_head/num_bg_samples": 399.375, "roi_head/num_fg_samples": 112.625, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8794450919995143, "total_loss": 0.11374891316518188}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014579236500139814, "eta_seconds": 7759.600550817865, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01996970663265306, "fast_rcnn/fg_cls_accuracy": 0.9800302933673469, "iteration": 5079, "loss_box_reg": 0.06210821121931076, "loss_cls": 0.021420322358608246, "loss_rpn_cls": 0.002174493740312755, "loss_rpn_loc": 0.03592707775533199, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8945027979998486, "total_loss": 0.12663503305520862}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 93.27516183589476, "bbox/AP50": 98.92261668327345, "bbox/AP75": 98.92261668327345, "bbox/APl": 94.44478261656324, "bbox/APm": 91.0697213988469, "bbox/APs": NaN, "data_time": 0.012990881500627438, "eta_seconds": 7742.204293557877, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5099, "loss_box_reg": 0.06781146675348282, "loss_cls": 0.02289230190217495, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0022374700056388974, "loss_rpn_loc": 0.03365788422524929, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8827287754993449, "total_loss": 0.1412262988742441, "validation_loss": 0.1673684855862346}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015810367000085535, "eta_seconds": 7710.074186440191, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5119, "loss_box_reg": 0.06492654047906399, "loss_cls": 0.022693458944559097, "loss_rpn_cls": 0.0022741026477888227, "loss_rpn_loc": 0.031002508476376534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8662360599992098, "total_loss": 0.1364175053895451}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012367580000500311, "eta_seconds": 7694.085353412403, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5139, "loss_box_reg": 0.07034502178430557, "loss_cls": 0.024538532830774784, "loss_rpn_cls": 0.0024909517960622907, "loss_rpn_loc": 0.043401483446359634, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8675591125002029, "total_loss": 0.1635031864279881}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01278185899991513, "eta_seconds": 7676.719174982401, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021799902947443932, "fast_rcnn/fg_cls_accuracy": 0.9782000970525561, "iteration": 5159, "loss_box_reg": 0.06870999187231064, "loss_cls": 0.022335607558488846, "loss_rpn_cls": 0.0037398403510451317, "loss_rpn_loc": 0.03882879391312599, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 156.25, "rpn/num_pos_anchors": 99.75, "time": 0.8584405870005867, "total_loss": 0.14448954432737082}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014791360999879544, "eta_seconds": 7654.754357859041, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.021103493480725623, "fast_rcnn/fg_cls_accuracy": 0.9788965065192744, "iteration": 5179, "loss_box_reg": 0.062266405671834946, "loss_cls": 0.020777718164026737, "loss_rpn_cls": 0.0027317109052091837, "loss_rpn_loc": 0.03314981982111931, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.8586420629999338, "total_loss": 0.1260088358540088}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.0178490789994612, "eta_seconds": 7639.841349945431, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.020830322300910538, "fast_rcnn/fg_cls_accuracy": 0.9791696776990895, "iteration": 5199, "loss_box_reg": 0.05128978006541729, "loss_cls": 0.020412922836840153, "loss_rpn_cls": 0.00241474446374923, "loss_rpn_loc": 0.032859938219189644, "lr": 0.005, "roi_head/num_bg_samples": 397.875, "roi_head/num_fg_samples": 114.125, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8652067134999015, "total_loss": 0.11148050939664245}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014005898499817704, "eta_seconds": 7625.286419499909, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5219, "loss_box_reg": 0.07316218316555023, "loss_cls": 0.02596404869109392, "loss_rpn_cls": 0.002091426053084433, "loss_rpn_loc": 0.02928838226944208, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8749200555002972, "total_loss": 0.13676173146814108}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014579200498701539, "eta_seconds": 7606.520547918383, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 5239, "loss_box_reg": 0.057390253990888596, "loss_cls": 0.025880426168441772, "loss_rpn_cls": 0.0021389470202848315, "loss_rpn_loc": 0.030492116697132587, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.25, "rpn/num_pos_anchors": 98.75, "time": 0.8600255340006697, "total_loss": 0.12460418161936104}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013745038500019291, "eta_seconds": 7588.538982743184, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5259, "loss_box_reg": 0.056663066148757935, "loss_cls": 0.023413637652993202, "loss_rpn_cls": 0.0019466887461021543, "loss_rpn_loc": 0.028949135914444923, "lr": 0.005, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8934628930010149, "total_loss": 0.11742609593784437}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013735102999817173, "eta_seconds": 7571.79154187835, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.021936217350746266, "fast_rcnn/fg_cls_accuracy": 0.9780637826492538, "iteration": 5279, "loss_box_reg": 0.053737033158540726, "loss_cls": 0.020394417457282543, "loss_rpn_cls": 0.0022291388595476747, "loss_rpn_loc": 0.03190678358078003, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.888264144000459, "total_loss": 0.10988271929090843}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014853118500468554, "eta_seconds": 7555.155925972386, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5299, "loss_box_reg": 0.06301657855510712, "loss_cls": 0.026609317399561405, "loss_rpn_cls": 0.0028848357032984495, "loss_rpn_loc": 0.03864687494933605, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8611808724999719, "total_loss": 0.1402190721128136}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.019291798500489676, "eta_seconds": 7538.447945299933, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5319, "loss_box_reg": 0.05684913694858551, "loss_cls": 0.023610541597008705, "loss_rpn_cls": 0.0021845183800905943, "loss_rpn_loc": 0.036675380542874336, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.883741806499529, "total_loss": 0.12332985328976065}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011460525499387586, "eta_seconds": 7517.054734584882, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5339, "loss_box_reg": 0.05149811878800392, "loss_cls": 0.021740407682955265, "loss_rpn_cls": 0.0019605476409196854, "loss_rpn_loc": 0.025657817721366882, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 175.875, "rpn/num_pos_anchors": 80.125, "time": 0.8436655450004764, "total_loss": 0.1036763918818906}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014291302999481559, "eta_seconds": 7497.301465048081, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01953339629120879, "fast_rcnn/fg_cls_accuracy": 0.9804666037087912, "iteration": 5359, "loss_box_reg": 0.08082463592290878, "loss_cls": 0.025784828700125217, "loss_rpn_cls": 0.0018990978132933378, "loss_rpn_loc": 0.028976663015782833, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8448055550006757, "total_loss": 0.13354162609903142}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012258945499524998, "eta_seconds": 7480.5243409162, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021518049568965518, "fast_rcnn/fg_cls_accuracy": 0.9784819504310345, "iteration": 5379, "loss_box_reg": 0.05838654190301895, "loss_cls": 0.022231215611100197, "loss_rpn_cls": 0.002136561321094632, "loss_rpn_loc": 0.02987600862979889, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8743206509998345, "total_loss": 0.12518500722944736}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 95.04890968998043, "bbox/AP50": 98.94553151126911, "bbox/AP75": 98.94553151126911, "bbox/APl": 96.15622781452859, "bbox/APm": 92.46222763709739, "bbox/APs": NaN, "data_time": 0.017025694999574625, "eta_seconds": 7462.112617529453, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5399, "loss_box_reg": 0.06437629461288452, "loss_cls": 0.021576158702373505, "loss_failed_to_get_better_count": 3.0, "loss_rpn_cls": 0.0018772268667817116, "loss_rpn_loc": 0.03226642683148384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.839295048999702, "total_loss": 0.12637696543242782, "validation_loss": 0.13707834863576526}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014937989500140247, "eta_seconds": 7443.814259008943, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02089447176395939, "fast_rcnn/fg_cls_accuracy": 0.9791055282360406, "iteration": 5419, "loss_box_reg": 0.0552052017301321, "loss_cls": 0.023376869969069958, "loss_rpn_cls": 0.002138674957677722, "loss_rpn_loc": 0.03407907858490944, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8698784409998552, "total_loss": 0.1193440561182797}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013423880000118515, "eta_seconds": 7427.8900407680385, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5439, "loss_box_reg": 0.05655006691813469, "loss_cls": 0.020559591241180897, "loss_rpn_cls": 0.002320499625056982, "loss_rpn_loc": 0.02890327014029026, "lr": 0.005, "roi_head/num_bg_samples": 391.0, "roi_head/num_fg_samples": 121.0, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.8760674590002964, "total_loss": 0.11336366704199463}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013994625999657728, "eta_seconds": 7409.115206408971, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02149487567204301, "fast_rcnn/fg_cls_accuracy": 0.978505124327957, "iteration": 5459, "loss_box_reg": 0.07386057823896408, "loss_cls": 0.026604370214045048, "loss_rpn_cls": 0.002588826813735068, "loss_rpn_loc": 0.03413362801074982, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8716043390004415, "total_loss": 0.13196638779481873}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015597055500620627, "eta_seconds": 7391.041927670588, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.020091788378455145, "fast_rcnn/fg_cls_accuracy": 0.9799082116215448, "iteration": 5479, "loss_box_reg": 0.07050042226910591, "loss_cls": 0.02474079467356205, "loss_rpn_cls": 0.0021399272372946143, "loss_rpn_loc": 0.03489230014383793, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.625, "rpn/num_pos_anchors": 98.375, "time": 0.8589253799991639, "total_loss": 0.13852309167850763}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013122772500537394, "eta_seconds": 7380.782008658164, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5499, "loss_box_reg": 0.05695950612425804, "loss_cls": 0.02017846144735813, "loss_rpn_cls": 0.0020662585739046335, "loss_rpn_loc": 0.032298844307661057, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8999541200000749, "total_loss": 0.12246235285419971}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.0167387419996885, "eta_seconds": 7363.790504257526, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.020821030161507912, "fast_rcnn/fg_cls_accuracy": 0.9791789698384921, "iteration": 5519, "loss_box_reg": 0.058595409616827965, "loss_cls": 0.02239445224404335, "loss_rpn_cls": 0.0017480264650657773, "loss_rpn_loc": 0.027675089426338673, "lr": 0.005, "roi_head/num_bg_samples": 392.75, "roi_head/num_fg_samples": 119.25, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8498236614996131, "total_loss": 0.1146762321004644}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013517774999854737, "eta_seconds": 7351.907261574616, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.025513980263157897, "fast_rcnn/fg_cls_accuracy": 0.9744860197368421, "iteration": 5539, "loss_box_reg": 0.05855027958750725, "loss_cls": 0.02038880344480276, "loss_rpn_cls": 0.0016652494668960571, "loss_rpn_loc": 0.032311808317899704, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 179.25, "rpn/num_pos_anchors": 76.75, "time": 0.8776390135008114, "total_loss": 0.1092486809939146}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.011882913499903225, "eta_seconds": 7331.50439608604, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.027322972074468085, "fast_rcnn/fg_cls_accuracy": 0.9726770279255319, "iteration": 5559, "loss_box_reg": 0.07120954245328903, "loss_cls": 0.02515412401407957, "loss_rpn_cls": 0.002385318512097001, "loss_rpn_loc": 0.05022135563194752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.5, "rpn/num_pos_anchors": 89.5, "time": 0.8847628325002006, "total_loss": 0.15015550452517346}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.014155146999655699, "eta_seconds": 7319.531056854045, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5579, "loss_box_reg": 0.05726276524364948, "loss_cls": 0.021695980802178383, "loss_rpn_cls": 0.003677344066090882, "loss_rpn_loc": 0.03555099293589592, "lr": 0.005, "roi_head/num_bg_samples": 389.375, "roi_head/num_fg_samples": 122.625, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.889490406000732, "total_loss": 0.1365722599439323}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015677778999815928, "eta_seconds": 7308.0039661134015, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01936768149882904, "fast_rcnn/fg_cls_accuracy": 0.9806323185011709, "iteration": 5599, "loss_box_reg": 0.05844062566757202, "loss_cls": 0.024206336587667465, "loss_rpn_cls": 0.0030458024702966213, "loss_rpn_loc": 0.029629665426909924, "lr": 0.005, "roi_head/num_bg_samples": 385.5, "roi_head/num_fg_samples": 126.5, "rpn/num_neg_anchors": 157.375, "rpn/num_pos_anchors": 98.625, "time": 0.8965334399999847, "total_loss": 0.12030651373788714}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.012024970000311441, "eta_seconds": 7291.668960754016, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0218780449610245, "fast_rcnn/fg_cls_accuracy": 0.9781219550389755, "iteration": 5619, "loss_box_reg": 0.05273590423166752, "loss_cls": 0.022803835570812225, "loss_rpn_cls": 0.002020141459070146, "loss_rpn_loc": 0.03192746266722679, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8826613595001618, "total_loss": 0.11135749111417681}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.01687377500002185, "eta_seconds": 7273.004645558488, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025233133963598945, "fast_rcnn/fg_cls_accuracy": 0.9747668660364011, "iteration": 5639, "loss_box_reg": 0.05719747394323349, "loss_cls": 0.021588620729744434, "loss_rpn_cls": 0.0022916418965905905, "loss_rpn_loc": 0.03184593468904495, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8682225524989917, "total_loss": 0.10914462374057621}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.015325386500990135, "eta_seconds": 7258.687283364799, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 5659, "loss_box_reg": 0.06096772849559784, "loss_cls": 0.023034741170704365, "loss_rpn_cls": 0.0021676926407963037, "loss_rpn_loc": 0.034716688096523285, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8767866954995043, "total_loss": 0.12500563205685467}

[07/29 19:51:49] detectron2 INFO: {"data_time": 0.013309132998983841, "eta_seconds": 7244.426740044826, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02398894699691992, "fast_rcnn/fg_cls_accuracy": 0.9760110530030801, "iteration": 5679, "loss_box_reg": 0.056637827306985855, "loss_cls": 0.023409683257341385, "loss_rpn_cls": 0.0018303157994523644, "loss_rpn_loc": 0.031725311651825905, "lr": 0.005, "roi_head/num_bg_samples": 389.75, "roi_head/num_fg_samples": 122.25, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.890535961999376, "total_loss": 0.11612003430491313}

[07/29 19:51:49] detectron2 INFO: {"bbox/AP": 94.76483093972008, "bbox/AP50": 98.95816960546958, "bbox/AP75": 98.95816613684278, "bbox/APl": 95.88726467497828, "bbox/APm": 91.9470155575016, "bbox/APs": NaN, "data_time": 0.015500677500313031, "eta_seconds": 7227.014345524829, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 5699, "loss_box_reg": 0.05493253283202648, "loss_cls": 0.023701573722064495, "loss_failed_to_get_better_count": 4.0, "loss_rpn_cls": 0.0020725850481539965, "loss_rpn_loc": 0.02556756976991892, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8545353485005762, "total_loss": 0.11283672647550702, "validation_loss": 0.13626214306693646}{"data_time": 0.013604358499833324, "eta_seconds": 7392.379508102773, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5719, "loss_box_reg": 0.05309678427875042, "loss_cls": 0.02268114034086466, "loss_rpn_cls": 0.0021833128994330764, "loss_rpn_loc": 0.02707052417099476, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 159.0, "rpn/num_pos_anchors": 97.0, "time": 0.8926916444997914, "total_loss": 0.11451471340842545}

[07/29 19:56:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 19:56:14] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 19:56:15] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 19:56:15] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 19:56:15] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:56:15] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 19:56:15] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 19:56:15] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 19:56:15] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 19:56:15] detectron2 INFO: {"data_time": 0.02939015450010629, "eta_seconds": 11686.352576468416, "fast_rcnn/cls_accuracy": 0.786865234375, "fast_rcnn/false_negative": 0.9394059153493115, "fast_rcnn/fg_cls_accuracy": 0.060594084650688426, "iteration": 19, "loss_box_reg": 0.12881449237465858, "loss_cls": 0.6249855756759644, "loss_rpn_cls": 0.7874684631824493, "loss_rpn_loc": 0.2691366523504257, "lr": 8.408750000000002e-05, "roi_head/num_bg_samples": 474.5, "roi_head/num_fg_samples": 37.5, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8358738699998867, "total_loss": 1.9008187465369701}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.030504754000048706, "eta_seconds": 12071.132336078655, "fast_rcnn/cls_accuracy": 0.82177734375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 39, "loss_box_reg": 0.5570397675037384, "loss_cls": 0.4548873007297516, "loss_rpn_cls": 0.18511445075273514, "loss_rpn_loc": 0.21736495941877365, "lr": 0.00016733750000000002, "roi_head/num_bg_samples": 420.75, "roi_head/num_fg_samples": 91.25, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.873537560999921, "total_loss": 1.6033400520682335}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.018182287000172437, "eta_seconds": 12211.82605749436, "fast_rcnn/cls_accuracy": 0.8115234375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 59, "loss_box_reg": 0.6337968111038208, "loss_cls": 0.4483332186937332, "loss_rpn_cls": 0.11832546815276146, "loss_rpn_loc": 0.1953253597021103, "lr": 0.0002505875, "roi_head/num_bg_samples": 415.5, "roi_head/num_fg_samples": 96.5, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8913536900001873, "total_loss": 1.436222393065691}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01889697700016768, "eta_seconds": 12284.491105073626, "fast_rcnn/cls_accuracy": 0.78271484375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 79, "loss_box_reg": 0.7354804873466492, "loss_cls": 0.45420069992542267, "loss_rpn_cls": 0.07250338047742844, "loss_rpn_loc": 0.16615113615989685, "lr": 0.0003338375, "roi_head/num_bg_samples": 400.75, "roi_head/num_fg_samples": 111.25, "rpn/num_neg_anchors": 153.625, "rpn/num_pos_anchors": 102.375, "time": 0.8865976399999909, "total_loss": 1.4724470991641283}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.018002271499881317, "eta_seconds": 12308.280497507018, "fast_rcnn/cls_accuracy": 0.775634765625, "fast_rcnn/false_negative": 0.9627708420293705, "fast_rcnn/fg_cls_accuracy": 0.037229157970629534, "iteration": 99, "loss_box_reg": 0.8062326312065125, "loss_cls": 0.42708392441272736, "loss_rpn_cls": 0.05313627049326897, "loss_rpn_loc": 0.12421421706676483, "lr": 0.0004170875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.89259754349996, "total_loss": 1.4219505097717047}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013190883500101336, "eta_seconds": 12300.492148384357, "fast_rcnn/cls_accuracy": 0.836669921875, "fast_rcnn/false_negative": 0.6792227649825398, "fast_rcnn/fg_cls_accuracy": 0.32077723501746025, "iteration": 119, "loss_box_reg": 0.6585336923599243, "loss_cls": 0.34507088363170624, "loss_rpn_cls": 0.03669000416994095, "loss_rpn_loc": 0.11788284033536911, "lr": 0.0005003375000000001, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8962868920000346, "total_loss": 1.1734376233071089}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01545518400007495, "eta_seconds": 12287.084732144256, "fast_rcnn/cls_accuracy": 0.884765625, "fast_rcnn/false_negative": 0.30859375, "fast_rcnn/fg_cls_accuracy": 0.69140625, "iteration": 139, "loss_box_reg": 0.5096877813339233, "loss_cls": 0.26354336738586426, "loss_rpn_cls": 0.018867461010813713, "loss_rpn_loc": 0.08101745694875717, "lr": 0.0005835875000000001, "roi_head/num_bg_samples": 388.125, "roi_head/num_fg_samples": 123.875, "rpn/num_neg_anchors": 172.0, "rpn/num_pos_anchors": 84.0, "time": 0.887171862500054, "total_loss": 0.8601078088395298}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01646772100002636, "eta_seconds": 12307.382867401684, "fast_rcnn/cls_accuracy": 0.919921875, "fast_rcnn/false_negative": 0.17972995923913043, "fast_rcnn/fg_cls_accuracy": 0.8202700407608696, "iteration": 159, "loss_box_reg": 0.3034415692090988, "loss_cls": 0.20181019604206085, "loss_rpn_cls": 0.014326298609375954, "loss_rpn_loc": 0.07085645943880081, "lr": 0.0006668375, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.9058895885000311, "total_loss": 0.5821873405948281}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015896259000328428, "eta_seconds": 12263.543236107209, "fast_rcnn/cls_accuracy": 0.915283203125, "fast_rcnn/false_negative": 0.19735852925095682, "fast_rcnn/fg_cls_accuracy": 0.8026414707490432, "iteration": 179, "loss_box_reg": 0.2435252144932747, "loss_cls": 0.19679177552461624, "loss_rpn_cls": 0.015311155002564192, "loss_rpn_loc": 0.06794760376214981, "lr": 0.0007500875, "roi_head/num_bg_samples": 395.75, "roi_head/num_fg_samples": 116.25, "rpn/num_neg_anchors": 174.0, "rpn/num_pos_anchors": 82.0, "time": 0.8723723070002052, "total_loss": 0.5317779292818159}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012299204000100872, "eta_seconds": 12224.272998899309, "fast_rcnn/cls_accuracy": 0.932861328125, "fast_rcnn/false_negative": 0.19618584485587062, "fast_rcnn/fg_cls_accuracy": 0.8038141551441293, "iteration": 199, "loss_box_reg": 0.22756582498550415, "loss_cls": 0.16675635427236557, "loss_rpn_cls": 0.009464774280786514, "loss_rpn_loc": 0.0724685788154602, "lr": 0.0008333375, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8750523474998317, "total_loss": 0.4794214074499905}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014126985500070077, "eta_seconds": 12202.029604787009, "fast_rcnn/cls_accuracy": 0.950927734375, "fast_rcnn/false_negative": 0.12814344152360516, "fast_rcnn/fg_cls_accuracy": 0.8718565584763949, "iteration": 219, "loss_box_reg": 0.21683961898088455, "loss_cls": 0.1309489831328392, "loss_rpn_cls": 0.00984030868858099, "loss_rpn_loc": 0.06770532205700874, "lr": 0.0009165875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8745993960001215, "total_loss": 0.4421173296868801}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014485199499858936, "eta_seconds": 12151.444937739672, "fast_rcnn/cls_accuracy": 0.95654296875, "fast_rcnn/false_negative": 0.1064453125, "fast_rcnn/fg_cls_accuracy": 0.8935546875, "iteration": 239, "loss_box_reg": 0.17889448255300522, "loss_cls": 0.11397441476583481, "loss_rpn_cls": 0.010145330801606178, "loss_rpn_loc": 0.05544925481081009, "lr": 0.0009998375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8600121944998591, "total_loss": 0.3471206361427903}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.019302317499978017, "eta_seconds": 12080.389871734214, "fast_rcnn/cls_accuracy": 0.9541015625, "fast_rcnn/false_negative": 0.12636323851203501, "fast_rcnn/fg_cls_accuracy": 0.873636761487965, "iteration": 259, "loss_box_reg": 0.18179909139871597, "loss_cls": 0.1189894787967205, "loss_rpn_cls": 0.007479577325284481, "loss_rpn_loc": 0.061658645048737526, "lr": 0.0010830875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.855434207999906, "total_loss": 0.36115485936170444}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013283666000006633, "eta_seconds": 12055.122413197958, "fast_rcnn/cls_accuracy": 0.926025390625, "fast_rcnn/false_negative": 0.162109375, "fast_rcnn/fg_cls_accuracy": 0.837890625, "iteration": 279, "loss_box_reg": 0.21112839132547379, "loss_cls": 0.18035943061113358, "loss_rpn_cls": 0.014031817205250263, "loss_rpn_loc": 0.07702159136533737, "lr": 0.0011663375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8750548134999008, "total_loss": 0.5035657323896885}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 83.41258386889328, "bbox/AP50": 98.38983659105097, "bbox/AP75": 97.104577022374, "bbox/APl": 84.48451837716055, "bbox/APm": 82.36344665876535, "bbox/APs": NaN, "data_time": 0.016146144499771253, "eta_seconds": 12043.127799364234, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 299, "loss_box_reg": 0.16537624597549438, "loss_cls": 0.11342864856123924, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.007433959748595953, "loss_rpn_loc": 0.0554153174161911, "lr": 0.0012495875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8814841179998893, "total_loss": 0.33745233179070055, "validation_loss": 0.32906902715045755}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016304798999954073, "eta_seconds": 12019.978845197964, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.076171875, "fast_rcnn/fg_cls_accuracy": 0.923828125, "iteration": 319, "loss_box_reg": 0.15682829916477203, "loss_cls": 0.0946701243519783, "loss_rpn_cls": 0.0038296080892905593, "loss_rpn_loc": 0.06303796917200089, "lr": 0.0013328374999999999, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 155.125, "rpn/num_pos_anchors": 100.875, "time": 0.8458358415000475, "total_loss": 0.31777258962392807}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01102276699975846, "eta_seconds": 12006.686827094072, "fast_rcnn/cls_accuracy": 0.963134765625, "fast_rcnn/false_negative": 0.10078125, "fast_rcnn/fg_cls_accuracy": 0.89921875, "iteration": 339, "loss_box_reg": 0.15902839601039886, "loss_cls": 0.09758839383721352, "loss_rpn_cls": 0.005238221259787679, "loss_rpn_loc": 0.062006376683712006, "lr": 0.0014160874999999999, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.883200966000004, "total_loss": 0.3246980574913323}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.010798721999890404, "eta_seconds": 11976.53362377627, "fast_rcnn/cls_accuracy": 0.95947265625, "fast_rcnn/false_negative": 0.11650020879732739, "fast_rcnn/fg_cls_accuracy": 0.8834997912026725, "iteration": 359, "loss_box_reg": 0.1674002781510353, "loss_cls": 0.11093494668602943, "loss_rpn_cls": 0.009214169345796108, "loss_rpn_loc": 0.05432415381073952, "lr": 0.0014993375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.8555542895001054, "total_loss": 0.34753162460401654}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015279147000001103, "eta_seconds": 11946.566867246482, "fast_rcnn/cls_accuracy": 0.967041015625, "fast_rcnn/false_negative": 0.0796565594059406, "fast_rcnn/fg_cls_accuracy": 0.9203434405940594, "iteration": 379, "loss_box_reg": 0.14857570081949234, "loss_cls": 0.08996423333883286, "loss_rpn_cls": 0.006297955987975001, "loss_rpn_loc": 0.05611295625567436, "lr": 0.0015825875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8612688080002044, "total_loss": 0.3035198914585635}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012088851499356679, "eta_seconds": 11909.025623667902, "fast_rcnn/cls_accuracy": 0.966064453125, "fast_rcnn/false_negative": 0.0810546875, "fast_rcnn/fg_cls_accuracy": 0.9189453125, "iteration": 399, "loss_box_reg": 0.14267047494649887, "loss_cls": 0.08620045706629753, "loss_rpn_cls": 0.003031725063920021, "loss_rpn_loc": 0.05911160446703434, "lr": 0.0016658375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.8536961670001801, "total_loss": 0.30017199623398483}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012189826500161871, "eta_seconds": 11883.833854455119, "fast_rcnn/cls_accuracy": 0.971923828125, "fast_rcnn/false_negative": 0.0693359375, "fast_rcnn/fg_cls_accuracy": 0.9306640625, "iteration": 419, "loss_box_reg": 0.13817040622234344, "loss_cls": 0.07225135341286659, "loss_rpn_cls": 0.004466069862246513, "loss_rpn_loc": 0.0624714121222496, "lr": 0.0017490875, "roi_head/num_bg_samples": 395.625, "roi_head/num_fg_samples": 116.375, "rpn/num_neg_anchors": 170.25, "rpn/num_pos_anchors": 85.75, "time": 0.853337961500074, "total_loss": 0.2805070823524147}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011904372000117291, "eta_seconds": 11840.29540779574, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.07421875, "fast_rcnn/fg_cls_accuracy": 0.92578125, "iteration": 439, "loss_box_reg": 0.1460084617137909, "loss_cls": 0.08459053561091423, "loss_rpn_cls": 0.004542296519502997, "loss_rpn_loc": 0.06430486589670181, "lr": 0.0018323375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.75, "rpn/num_pos_anchors": 88.25, "time": 0.8255171649998374, "total_loss": 0.28996874997392297}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01606286150035885, "eta_seconds": 11815.596436706812, "fast_rcnn/cls_accuracy": 0.972412109375, "fast_rcnn/false_negative": 0.06473777326233184, "fast_rcnn/fg_cls_accuracy": 0.9352622267376682, "iteration": 459, "loss_box_reg": 0.1321180760860443, "loss_cls": 0.06950072944164276, "loss_rpn_cls": 0.004573044599965215, "loss_rpn_loc": 0.06276549398899078, "lr": 0.0019155875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8637742569994771, "total_loss": 0.29605477419681847}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012803132500266656, "eta_seconds": 11785.865274366573, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.07613281250000001, "fast_rcnn/fg_cls_accuracy": 0.9238671875, "iteration": 479, "loss_box_reg": 0.1410418078303337, "loss_cls": 0.0620583388954401, "loss_rpn_cls": 0.01461251126602292, "loss_rpn_loc": 0.059028103947639465, "lr": 0.0019988375, "roi_head/num_bg_samples": 399.625, "roi_head/num_fg_samples": 112.375, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.868328073000157, "total_loss": 0.3025325112976134}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015173395499914477, "eta_seconds": 11766.056904469786, "fast_rcnn/cls_accuracy": 0.967529296875, "fast_rcnn/false_negative": 0.0791015625, "fast_rcnn/fg_cls_accuracy": 0.9208984375, "iteration": 499, "loss_box_reg": 0.14217590540647507, "loss_cls": 0.08436384052038193, "loss_rpn_cls": 0.005042934790253639, "loss_rpn_loc": 0.054758913815021515, "lr": 0.0020820875, "roi_head/num_bg_samples": 388.75, "roi_head/num_fg_samples": 123.25, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.869340422500045, "total_loss": 0.2905305549502373}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011143657999582501, "eta_seconds": 11748.62700015978, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.09221540178571429, "fast_rcnn/fg_cls_accuracy": 0.9077845982142857, "iteration": 519, "loss_box_reg": 0.14154227823019028, "loss_cls": 0.08936139941215515, "loss_rpn_cls": 0.0032708962680771947, "loss_rpn_loc": 0.06133125722408295, "lr": 0.0021653375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8633433045001766, "total_loss": 0.2882083682343364}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014494807000119181, "eta_seconds": 11733.565006896564, "fast_rcnn/cls_accuracy": 0.9521484375, "fast_rcnn/false_negative": 0.095703125, "fast_rcnn/fg_cls_accuracy": 0.904296875, "iteration": 539, "loss_box_reg": 0.16541259735822678, "loss_cls": 0.12462004274129868, "loss_rpn_cls": 0.005535591393709183, "loss_rpn_loc": 0.06912935525178909, "lr": 0.0022485875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8846403235002072, "total_loss": 0.36126803897786885}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012273919000563183, "eta_seconds": 11735.521759175765, "fast_rcnn/cls_accuracy": 0.95849609375, "fast_rcnn/false_negative": 0.0980273705244081, "fast_rcnn/fg_cls_accuracy": 0.9019726294755919, "iteration": 559, "loss_box_reg": 0.14862347394227982, "loss_cls": 0.10806813836097717, "loss_rpn_cls": 0.006631288910284638, "loss_rpn_loc": 0.0664207711815834, "lr": 0.0023318375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8845762955002101, "total_loss": 0.3488547676242888}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0118424329998561, "eta_seconds": 11702.231173056018, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.056640625, "fast_rcnn/fg_cls_accuracy": 0.943359375, "iteration": 579, "loss_box_reg": 0.1253226026892662, "loss_cls": 0.07414546608924866, "loss_rpn_cls": 0.008195447502657771, "loss_rpn_loc": 0.05210341885685921, "lr": 0.0024150875, "roi_head/num_bg_samples": 394.75, "roi_head/num_fg_samples": 117.25, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8636824619998151, "total_loss": 0.2699383229482919}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 80.35829873197507, "bbox/AP50": 98.58295968097553, "bbox/AP75": 97.43300081767086, "bbox/APl": 78.67308581650998, "bbox/APm": 84.08251405024096, "bbox/APs": NaN, "data_time": 0.013514647000192781, "eta_seconds": 11678.932228370002, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 599, "loss_box_reg": 0.13238591700792313, "loss_cls": 0.06162050738930702, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004966367734596133, "loss_rpn_loc": 0.05982688069343567, "lr": 0.0024983375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8484068394996029, "total_loss": 0.2661393281305209, "validation_loss": 0.3150369518328001}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0135088239999277, "eta_seconds": 11657.219651099671, "fast_rcnn/cls_accuracy": 0.96826171875, "fast_rcnn/false_negative": 0.07183139162719242, "fast_rcnn/fg_cls_accuracy": 0.9281686083728076, "iteration": 619, "loss_box_reg": 0.13828347623348236, "loss_cls": 0.08472422882914543, "loss_rpn_cls": 0.006264761555939913, "loss_rpn_loc": 0.06929788365960121, "lr": 0.0025815875, "roi_head/num_bg_samples": 397.25, "roi_head/num_fg_samples": 114.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8460839750000559, "total_loss": 0.30213607591576874}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014871884000058344, "eta_seconds": 11637.040077188369, "fast_rcnn/cls_accuracy": 0.9736328125, "fast_rcnn/false_negative": 0.06561053240740741, "fast_rcnn/fg_cls_accuracy": 0.9343894675925926, "iteration": 639, "loss_box_reg": 0.11789693310856819, "loss_cls": 0.07285590097308159, "loss_rpn_cls": 0.0053652566857635975, "loss_rpn_loc": 0.05852055549621582, "lr": 0.0026648374999999995, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8505885125000532, "total_loss": 0.26677903556264937}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014161194500047714, "eta_seconds": 11606.65481794033, "fast_rcnn/cls_accuracy": 0.973388671875, "fast_rcnn/false_negative": 0.06114628335798224, "fast_rcnn/fg_cls_accuracy": 0.9388537166420178, "iteration": 659, "loss_box_reg": 0.11722910404205322, "loss_cls": 0.06616359204053879, "loss_rpn_cls": 0.0080324187874794, "loss_rpn_loc": 0.07135805487632751, "lr": 0.0027480875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8602919130003102, "total_loss": 0.2675582447554916}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014358993000314513, "eta_seconds": 11589.254840700332, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05121358797635958, "fast_rcnn/fg_cls_accuracy": 0.9487864120236404, "iteration": 679, "loss_box_reg": 0.10997515171766281, "loss_cls": 0.05781390517950058, "loss_rpn_cls": 0.004788712132722139, "loss_rpn_loc": 0.055166978389024734, "lr": 0.0028313374999999995, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.869146297000043, "total_loss": 0.23458211263641715}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012000708500181645, "eta_seconds": 11582.719539248686, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.0615234375, "fast_rcnn/fg_cls_accuracy": 0.9384765625, "iteration": 699, "loss_box_reg": 0.129492849111557, "loss_cls": 0.07111507281661034, "loss_rpn_cls": 0.004493537941016257, "loss_rpn_loc": 0.05584186688065529, "lr": 0.0029145875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8904892555001425, "total_loss": 0.27537386934272945}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0145140229997196, "eta_seconds": 11571.990401450112, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 719, "loss_box_reg": 0.11887574195861816, "loss_cls": 0.06795364245772362, "loss_rpn_cls": 0.0033925181487575173, "loss_rpn_loc": 0.055030809715390205, "lr": 0.0029978374999999995, "roi_head/num_bg_samples": 390.0, "roi_head/num_fg_samples": 122.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8808223520004503, "total_loss": 0.24797416175715625}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01307606799991845, "eta_seconds": 11554.56401729011, "fast_rcnn/cls_accuracy": 0.97412109375, "fast_rcnn/false_negative": 0.05908962111398963, "fast_rcnn/fg_cls_accuracy": 0.9409103788860104, "iteration": 739, "loss_box_reg": 0.1245066188275814, "loss_cls": 0.06823312118649483, "loss_rpn_cls": 0.004734032321721315, "loss_rpn_loc": 0.05789220705628395, "lr": 0.0030810875, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8724708105005448, "total_loss": 0.25583526177797467}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012447178500224254, "eta_seconds": 11532.523588208307, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.06630535710901822, "fast_rcnn/fg_cls_accuracy": 0.9336946428909818, "iteration": 759, "loss_box_reg": 0.11907549947500229, "loss_cls": 0.06540242955088615, "loss_rpn_cls": 0.0041093959007412195, "loss_rpn_loc": 0.06332714855670929, "lr": 0.0031643374999999994, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8468276620001234, "total_loss": 0.24481784249655902}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01187162200039893, "eta_seconds": 11519.711248970103, "fast_rcnn/cls_accuracy": 0.9765625, "fast_rcnn/false_negative": 0.0557175727739726, "fast_rcnn/fg_cls_accuracy": 0.9442824272260274, "iteration": 779, "loss_box_reg": 0.12456638365983963, "loss_cls": 0.061244869604706764, "loss_rpn_cls": 0.0037338774418458343, "loss_rpn_loc": 0.0596346165984869, "lr": 0.0032475875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8824129194995294, "total_loss": 0.25049503380432725}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012807592999706685, "eta_seconds": 11502.314342643522, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.05575284090909091, "fast_rcnn/fg_cls_accuracy": 0.9442471590909092, "iteration": 799, "loss_box_reg": 0.11877157166600227, "loss_cls": 0.06167830340564251, "loss_rpn_cls": 0.004014276899397373, "loss_rpn_loc": 0.055346591398119926, "lr": 0.0033308375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 174.125, "rpn/num_pos_anchors": 81.875, "time": 0.877514559500014, "total_loss": 0.25743075169157237}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015489027000057831, "eta_seconds": 11491.371008443351, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.054571472772277224, "fast_rcnn/fg_cls_accuracy": 0.9454285272277227, "iteration": 819, "loss_box_reg": 0.11021328344941139, "loss_cls": 0.05502988211810589, "loss_rpn_cls": 0.00427356525324285, "loss_rpn_loc": 0.07074590399861336, "lr": 0.0034140875, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 155.25, "rpn/num_pos_anchors": 100.75, "time": 0.8855874439996114, "total_loss": 0.2403978342190385}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01506244800020795, "eta_seconds": 11468.434556696986, "fast_rcnn/cls_accuracy": 0.975341796875, "fast_rcnn/false_negative": 0.05666498370181406, "fast_rcnn/fg_cls_accuracy": 0.943335016298186, "iteration": 839, "loss_box_reg": 0.11180135607719421, "loss_cls": 0.061304209753870964, "loss_rpn_cls": 0.004914319375529885, "loss_rpn_loc": 0.05708741024136543, "lr": 0.0034973375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8517343014996186, "total_loss": 0.23385070823132992}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013418384000033257, "eta_seconds": 11449.058482766935, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05544679449648712, "fast_rcnn/fg_cls_accuracy": 0.9445532055035128, "iteration": 859, "loss_box_reg": 0.11569477990269661, "loss_cls": 0.06229258514940739, "loss_rpn_cls": 0.0068636140786111355, "loss_rpn_loc": 0.0628298930823803, "lr": 0.0035805875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8614465094997286, "total_loss": 0.25518918549641967}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014103679000072589, "eta_seconds": 11433.578741616986, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 879, "loss_box_reg": 0.12260067090392113, "loss_cls": 0.06857239827513695, "loss_rpn_cls": 0.006648323964327574, "loss_rpn_loc": 0.07462092489004135, "lr": 0.0036638375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8772594430001845, "total_loss": 0.27113425778225064}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 88.2900801425749, "bbox/AP50": 98.81273878550125, "bbox/AP75": 98.7412826713019, "bbox/APl": 88.86570946975849, "bbox/APm": 87.34035917496533, "bbox/APs": NaN, "data_time": 0.02003246050026064, "eta_seconds": 11431.046205987095, "fast_rcnn/cls_accuracy": 0.9716796875, "fast_rcnn/false_negative": 0.0859375, "fast_rcnn/fg_cls_accuracy": 0.9140625, "iteration": 899, "loss_box_reg": 0.12612708657979965, "loss_cls": 0.07696450874209404, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.00522907474078238, "loss_rpn_loc": 0.05966793745756149, "lr": 0.0037470875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8938876710003569, "total_loss": 0.27521815593354404, "validation_loss": 0.27454329396213306}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01586997549975422, "eta_seconds": 11409.577102119452, "fast_rcnn/cls_accuracy": 0.975830078125, "fast_rcnn/false_negative": 0.05459741876310273, "fast_rcnn/fg_cls_accuracy": 0.9454025812368974, "iteration": 919, "loss_box_reg": 0.11372284591197968, "loss_cls": 0.0605704840272665, "loss_rpn_cls": 0.004562443122267723, "loss_rpn_loc": 0.05959376133978367, "lr": 0.0038303375000000002, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.875, "rpn/num_pos_anchors": 95.125, "time": 0.8720150914996339, "total_loss": 0.24228383065201342}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.010550028499892505, "eta_seconds": 11386.753413343344, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.04433528791056139, "fast_rcnn/fg_cls_accuracy": 0.9556647120894386, "iteration": 939, "loss_box_reg": 0.10631585493683815, "loss_cls": 0.05721595883369446, "loss_rpn_cls": 0.0026982673443853855, "loss_rpn_loc": 0.0547914057970047, "lr": 0.0039135875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.8540105269999003, "total_loss": 0.21563802321907133}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01612528400028168, "eta_seconds": 11371.228795083965, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.0498046875, "fast_rcnn/fg_cls_accuracy": 0.9501953125, "iteration": 959, "loss_box_reg": 0.1004297025501728, "loss_cls": 0.05342039093375206, "loss_rpn_cls": 0.00477422121912241, "loss_rpn_loc": 0.048561520874500275, "lr": 0.0039968375, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8844300150003619, "total_loss": 0.2256989327725023}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012863743500020064, "eta_seconds": 11351.880881643341, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04565972222222223, "fast_rcnn/fg_cls_accuracy": 0.9543402777777779, "iteration": 979, "loss_box_reg": 0.11157135292887688, "loss_cls": 0.04482796974480152, "loss_rpn_cls": 0.0065105147659778595, "loss_rpn_loc": 0.06633155420422554, "lr": 0.0040800875, "roi_head/num_bg_samples": 390.375, "roi_head/num_fg_samples": 121.625, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.8682084174997726, "total_loss": 0.23189347283914685}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01232722449958601, "eta_seconds": 11337.924521956742, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.060546875, "fast_rcnn/fg_cls_accuracy": 0.939453125, "iteration": 999, "loss_box_reg": 0.11941342800855637, "loss_cls": 0.0730251595377922, "loss_rpn_cls": 0.0052137651946395636, "loss_rpn_loc": 0.06160200759768486, "lr": 0.0041633375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8827806014996895, "total_loss": 0.25915474398061633}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013164806000077078, "eta_seconds": 11329.957124608949, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.05002973894032922, "fast_rcnn/fg_cls_accuracy": 0.9499702610596708, "iteration": 1019, "loss_box_reg": 0.1171100102365017, "loss_cls": 0.05176871083676815, "loss_rpn_cls": 0.003309119725599885, "loss_rpn_loc": 0.051280347630381584, "lr": 0.0042465875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8771893994999118, "total_loss": 0.2285827926825732}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013883824499771436, "eta_seconds": 11304.91008489949, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.05069182981927711, "fast_rcnn/fg_cls_accuracy": 0.9493081701807229, "iteration": 1039, "loss_box_reg": 0.11066009849309921, "loss_cls": 0.05315266735851765, "loss_rpn_cls": 0.006170068867504597, "loss_rpn_loc": 0.05377185717225075, "lr": 0.0043298375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.0, "rpn/num_pos_anchors": 94.0, "time": 0.8545718394998403, "total_loss": 0.23264297121204436}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015017880499726743, "eta_seconds": 11280.984392763408, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04588942560731704, "fast_rcnn/fg_cls_accuracy": 0.954110574392683, "iteration": 1059, "loss_box_reg": 0.10310346260666847, "loss_cls": 0.044577477499842644, "loss_rpn_cls": 0.004134953022003174, "loss_rpn_loc": 0.051423339173197746, "lr": 0.0044130875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8577394704998369, "total_loss": 0.2035250838380307}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016613606499959133, "eta_seconds": 11252.08472195471, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.045861783679624665, "fast_rcnn/fg_cls_accuracy": 0.9541382163203753, "iteration": 1079, "loss_box_reg": 0.11094773188233376, "loss_cls": 0.05111839435994625, "loss_rpn_cls": 0.003501012222841382, "loss_rpn_loc": 0.052145302295684814, "lr": 0.0044963375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.862094334500398, "total_loss": 0.22528961999341846}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016227953500219883, "eta_seconds": 11234.6679821947, "fast_rcnn/cls_accuracy": 0.981201171875, "fast_rcnn/false_negative": 0.04735054347826087, "fast_rcnn/fg_cls_accuracy": 0.9526494565217392, "iteration": 1099, "loss_box_reg": 0.1110970675945282, "loss_cls": 0.0483903419226408, "loss_rpn_cls": 0.0037894557463005185, "loss_rpn_loc": 0.05519515089690685, "lr": 0.0045795875, "roi_head/num_bg_samples": 395.0, "roi_head/num_fg_samples": 117.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8814690505000726, "total_loss": 0.23251396394334733}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0157821050001985, "eta_seconds": 11194.459053585524, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04696308210784314, "fast_rcnn/fg_cls_accuracy": 0.9530369178921569, "iteration": 1119, "loss_box_reg": 0.11347878724336624, "loss_cls": 0.05304034985601902, "loss_rpn_cls": 0.0026472604367882013, "loss_rpn_loc": 0.05065883509814739, "lr": 0.0046628375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8446180029995958, "total_loss": 0.22228291805367917}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012794290499641647, "eta_seconds": 11174.544137118066, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04151621586134454, "fast_rcnn/fg_cls_accuracy": 0.9584837841386555, "iteration": 1139, "loss_box_reg": 0.11042098328471184, "loss_cls": 0.04875275492668152, "loss_rpn_cls": 0.0053986890707165, "loss_rpn_loc": 0.06635331735014915, "lr": 0.0047460875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8467612080003164, "total_loss": 0.24455570348072797}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014960789500037208, "eta_seconds": 11151.432648201459, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.0493672888326479, "fast_rcnn/fg_cls_accuracy": 0.950632711167352, "iteration": 1159, "loss_box_reg": 0.10223600640892982, "loss_cls": 0.05007513798773289, "loss_rpn_cls": 0.004917986923828721, "loss_rpn_loc": 0.07119227945804596, "lr": 0.0048293375, "roi_head/num_bg_samples": 393.875, "roi_head/num_fg_samples": 118.125, "rpn/num_neg_anchors": 169.75, "rpn/num_pos_anchors": 86.25, "time": 0.8591569790005451, "total_loss": 0.23316936113405973}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011912658499568352, "eta_seconds": 11133.44586255851, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.05077235193621868, "fast_rcnn/fg_cls_accuracy": 0.9492276480637813, "iteration": 1179, "loss_box_reg": 0.11368173360824585, "loss_cls": 0.05308356508612633, "loss_rpn_cls": 0.005349044920876622, "loss_rpn_loc": 0.06201360747218132, "lr": 0.0049125875, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8698166265003238, "total_loss": 0.23130762414075434}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 89.9372115855734, "bbox/AP50": 98.94397005781644, "bbox/AP75": 98.90289638087187, "bbox/APl": 90.72880288503814, "bbox/APm": 88.3051693765623, "bbox/APs": NaN, "data_time": 0.014878246000080253, "eta_seconds": 11116.078346978511, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.0703125, "fast_rcnn/fg_cls_accuracy": 0.9296875, "iteration": 1199, "loss_box_reg": 0.11325424909591675, "loss_cls": 0.04710954613983631, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0042733787558972836, "loss_rpn_loc": 0.06012917682528496, "lr": 0.0049958375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8741366975000346, "total_loss": 0.23101549898274243, "validation_loss": 0.22204631070859254}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013528545000099257, "eta_seconds": 11099.301888740878, "fast_rcnn/cls_accuracy": 0.980224609375, "fast_rcnn/false_negative": 0.046103560216894976, "fast_rcnn/fg_cls_accuracy": 0.953896439783105, "iteration": 1219, "loss_box_reg": 0.12120898813009262, "loss_cls": 0.05126929096877575, "loss_rpn_cls": 0.0038727218052372336, "loss_rpn_loc": 0.05043528042733669, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8828641514996889, "total_loss": 0.23491605871822685}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011044496000067738, "eta_seconds": 11073.083311939141, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1239, "loss_box_reg": 0.11235003918409348, "loss_cls": 0.046691738069057465, "loss_rpn_cls": 0.006056502927094698, "loss_rpn_loc": 0.053873563185334206, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8184038200001851, "total_loss": 0.23004397260956466}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015318163000301865, "eta_seconds": 11057.887156648141, "fast_rcnn/cls_accuracy": 0.98095703125, "fast_rcnn/false_negative": 0.04580158118560379, "fast_rcnn/fg_cls_accuracy": 0.9541984188143962, "iteration": 1259, "loss_box_reg": 0.10087935626506805, "loss_cls": 0.047167083248496056, "loss_rpn_cls": 0.004879459505900741, "loss_rpn_loc": 0.04768846556544304, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8561628545003259, "total_loss": 0.202470017131418}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014270402500187629, "eta_seconds": 11023.213576958839, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.052734375, "fast_rcnn/fg_cls_accuracy": 0.947265625, "iteration": 1279, "loss_box_reg": 0.1078275665640831, "loss_cls": 0.055708736181259155, "loss_rpn_cls": 0.004326054826378822, "loss_rpn_loc": 0.051015861332416534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8413463045003482, "total_loss": 0.23464090866036713}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013100360500175157, "eta_seconds": 11008.474875399741, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.047925034286833854, "fast_rcnn/fg_cls_accuracy": 0.9520749657131662, "iteration": 1299, "loss_box_reg": 0.09658817201852798, "loss_cls": 0.04709094204008579, "loss_rpn_cls": 0.0040003720205277205, "loss_rpn_loc": 0.061722202226519585, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8807059354999183, "total_loss": 0.22329395404085517}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015239898999880097, "eta_seconds": 11003.665032419109, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.03966547818791946, "fast_rcnn/fg_cls_accuracy": 0.9603345218120805, "iteration": 1319, "loss_box_reg": 0.10543150082230568, "loss_cls": 0.047363804653286934, "loss_rpn_cls": 0.006104244850575924, "loss_rpn_loc": 0.05552547238767147, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8904177599997638, "total_loss": 0.22847025434020907}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011903596499450941, "eta_seconds": 10975.392692321862, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.036201565026496865, "fast_rcnn/fg_cls_accuracy": 0.9637984349735031, "iteration": 1339, "loss_box_reg": 0.10207298025488853, "loss_cls": 0.03664606809616089, "loss_rpn_cls": 0.006632389267906547, "loss_rpn_loc": 0.047756388783454895, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.845586510999965, "total_loss": 0.1987403016537428}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012518932499915536, "eta_seconds": 10967.293575872216, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.036218475877192985, "fast_rcnn/fg_cls_accuracy": 0.963781524122807, "iteration": 1359, "loss_box_reg": 0.09389247000217438, "loss_cls": 0.03725110925734043, "loss_rpn_cls": 0.0026225635083392262, "loss_rpn_loc": 0.04946193844079971, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8703024129999903, "total_loss": 0.1872705266578123}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014252139999825886, "eta_seconds": 10949.941636032216, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.0381825206043956, "fast_rcnn/fg_cls_accuracy": 0.9618174793956045, "iteration": 1379, "loss_box_reg": 0.09005808085203171, "loss_cls": 0.04361296631395817, "loss_rpn_cls": 0.0031876161228865385, "loss_rpn_loc": 0.04760141670703888, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8653196120003486, "total_loss": 0.18320670002140105}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015607826999712415, "eta_seconds": 10936.381450508063, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04292900291705905, "fast_rcnn/fg_cls_accuracy": 0.957070997082941, "iteration": 1399, "loss_box_reg": 0.1026579923927784, "loss_cls": 0.040452633053064346, "loss_rpn_cls": 0.004050533752888441, "loss_rpn_loc": 0.050027329474687576, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 167.25, "rpn/num_pos_anchors": 88.75, "time": 0.8649475590000293, "total_loss": 0.21095226804027334}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012343008500465658, "eta_seconds": 10926.268840053872, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04167183366402116, "fast_rcnn/fg_cls_accuracy": 0.9583281663359788, "iteration": 1419, "loss_box_reg": 0.09014065191149712, "loss_cls": 0.042981088161468506, "loss_rpn_cls": 0.00645520631223917, "loss_rpn_loc": 0.06759355217218399, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8950779309998325, "total_loss": 0.22137367050163448}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012359693500002322, "eta_seconds": 10914.622519983426, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.03675857099514563, "fast_rcnn/fg_cls_accuracy": 0.9632414290048543, "iteration": 1439, "loss_box_reg": 0.08957243710756302, "loss_cls": 0.04217042587697506, "loss_rpn_cls": 0.007140532601624727, "loss_rpn_loc": 0.08009770512580872, "lr": 0.005, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8714704600001824, "total_loss": 0.22934484714642167}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012483622500440106, "eta_seconds": 10896.652974460563, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 1459, "loss_box_reg": 0.0861663743853569, "loss_cls": 0.03933589160442352, "loss_rpn_cls": 0.00711781601421535, "loss_rpn_loc": 0.07167446613311768, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8673060529995382, "total_loss": 0.20666937343776226}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014326036999591452, "eta_seconds": 10887.697147058661, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.07186511075949367, "fast_rcnn/fg_cls_accuracy": 0.9281348892405064, "iteration": 1479, "loss_box_reg": 0.11860571056604385, "loss_cls": 0.07213868945837021, "loss_rpn_cls": 0.008405119646340609, "loss_rpn_loc": 0.059620652347803116, "lr": 0.005, "roi_head/num_bg_samples": 401.25, "roi_head/num_fg_samples": 110.75, "rpn/num_neg_anchors": 175.0, "rpn/num_pos_anchors": 81.0, "time": 0.897518780000155, "total_loss": 0.28046197770163417}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 90.47100649648208, "bbox/AP50": 98.89818218763597, "bbox/AP75": 98.83786673282349, "bbox/APl": 90.98252513947219, "bbox/APm": 89.65274891712926, "bbox/APs": NaN, "data_time": 0.014468831499925727, "eta_seconds": 10880.330544314034, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.05078125, "fast_rcnn/fg_cls_accuracy": 0.94921875, "iteration": 1499, "loss_box_reg": 0.11426327377557755, "loss_cls": 0.051829954609274864, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.00704673957079649, "loss_rpn_loc": 0.08483739569783211, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.898153683000146, "total_loss": 0.25268610194325447, "validation_loss": 0.24073816174583876}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013221118500041484, "eta_seconds": 10867.58767004412, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04463252314814815, "fast_rcnn/fg_cls_accuracy": 0.9553674768518519, "iteration": 1519, "loss_box_reg": 0.1030765026807785, "loss_cls": 0.05443604104220867, "loss_rpn_cls": 0.007032011868432164, "loss_rpn_loc": 0.07387308403849602, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8726468634999947, "total_loss": 0.244771410478279}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015136590000565775, "eta_seconds": 10837.571910697727, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.04780190677966102, "fast_rcnn/fg_cls_accuracy": 0.952198093220339, "iteration": 1539, "loss_box_reg": 0.1154186986386776, "loss_cls": 0.05130871944129467, "loss_rpn_cls": 0.005730348872020841, "loss_rpn_loc": 0.06487315893173218, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8529182040001615, "total_loss": 0.23767815972678363}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014879302499593905, "eta_seconds": 10806.879806792327, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.049944196428571425, "fast_rcnn/fg_cls_accuracy": 0.9500558035714286, "iteration": 1559, "loss_box_reg": 0.10610762983560562, "loss_cls": 0.048841025680303574, "loss_rpn_cls": 0.00505010224878788, "loss_rpn_loc": 0.047558898106217384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.8628834279998046, "total_loss": 0.21762098465114832}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01316807399962272, "eta_seconds": 10794.525714710453, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.039278372332063605, "fast_rcnn/fg_cls_accuracy": 0.9607216276679363, "iteration": 1579, "loss_box_reg": 0.09529298916459084, "loss_cls": 0.047681115567684174, "loss_rpn_cls": 0.005185154965147376, "loss_rpn_loc": 0.04409233666956425, "lr": 0.005, "roi_head/num_bg_samples": 398.75, "roi_head/num_fg_samples": 113.25, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8907098810000207, "total_loss": 0.19659643550403416}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013807994499984488, "eta_seconds": 10777.144625080455, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.04536732456140351, "fast_rcnn/fg_cls_accuracy": 0.9546326754385965, "iteration": 1599, "loss_box_reg": 0.10481703281402588, "loss_cls": 0.04726100340485573, "loss_rpn_cls": 0.005707225529477, "loss_rpn_loc": 0.0522367749363184, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8495490139998765, "total_loss": 0.21333862002938986}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012579137000102492, "eta_seconds": 10762.580968191138, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1619, "loss_box_reg": 0.09973128139972687, "loss_cls": 0.040857817977666855, "loss_rpn_cls": 0.0033710956340655684, "loss_rpn_loc": 0.04723631218075752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8383417874997576, "total_loss": 0.20998939604032785}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012796253500255261, "eta_seconds": 10745.19532734114, "fast_rcnn/cls_accuracy": 0.983154296875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1639, "loss_box_reg": 0.09802206978201866, "loss_cls": 0.043301988393068314, "loss_rpn_cls": 0.004532157443463802, "loss_rpn_loc": 0.05338606610894203, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8678041269995447, "total_loss": 0.20312127005308867}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013821255500261032, "eta_seconds": 10735.521867402167, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04389311316815145, "fast_rcnn/fg_cls_accuracy": 0.9561068868318485, "iteration": 1659, "loss_box_reg": 0.09773008897900581, "loss_cls": 0.04519974626600742, "loss_rpn_cls": 0.004526508506387472, "loss_rpn_loc": 0.05140480026602745, "lr": 0.005, "roi_head/num_bg_samples": 396.75, "roi_head/num_fg_samples": 115.25, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.882670835999761, "total_loss": 0.20179360220208764}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01438021400008438, "eta_seconds": 10728.270786204119, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04066910282258064, "fast_rcnn/fg_cls_accuracy": 0.9593308971774194, "iteration": 1679, "loss_box_reg": 0.10078854858875275, "loss_cls": 0.050304073840379715, "loss_rpn_cls": 0.003972385311499238, "loss_rpn_loc": 0.05783495306968689, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.375, "rpn/num_pos_anchors": 92.625, "time": 0.8868689450000602, "total_loss": 0.21955888194497675}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015314830000079382, "eta_seconds": 10708.488811374478, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.03443205758426966, "fast_rcnn/fg_cls_accuracy": 0.9655679424157304, "iteration": 1699, "loss_box_reg": 0.08642548322677612, "loss_cls": 0.0424218624830246, "loss_rpn_cls": 0.004494124790653586, "loss_rpn_loc": 0.050324076786637306, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8947804085000826, "total_loss": 0.1852857698686421}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014327528499961772, "eta_seconds": 10683.327449442186, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1719, "loss_box_reg": 0.09392394125461578, "loss_cls": 0.040925584733486176, "loss_rpn_cls": 0.004295801743865013, "loss_rpn_loc": 0.051177412271499634, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8841799534998245, "total_loss": 0.19225792540237308}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014464311000210728, "eta_seconds": 10665.929310122192, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1739, "loss_box_reg": 0.10429317876696587, "loss_cls": 0.03850865736603737, "loss_rpn_cls": 0.004676738753914833, "loss_rpn_loc": 0.06099403649568558, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8719341980004174, "total_loss": 0.2191669741878286}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016681402000358503, "eta_seconds": 10658.612344284118, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.04427876650098872, "fast_rcnn/fg_cls_accuracy": 0.9557212334990113, "iteration": 1759, "loss_box_reg": 0.10086190328001976, "loss_cls": 0.041055068373680115, "loss_rpn_cls": 0.0038329382659867406, "loss_rpn_loc": 0.051342034712433815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8841451134999261, "total_loss": 0.19593067455571145}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014048279500457284, "eta_seconds": 10631.133031482204, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.03769699739194401, "fast_rcnn/fg_cls_accuracy": 0.962303002608056, "iteration": 1779, "loss_box_reg": 0.09833024814724922, "loss_cls": 0.04401624575257301, "loss_rpn_cls": 0.004325072979554534, "loss_rpn_loc": 0.06082310900092125, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.862232074000076, "total_loss": 0.21781846298836172}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 92.21388393069454, "bbox/AP50": 98.9582735663117, "bbox/AP75": 98.91922274208812, "bbox/APl": 92.76017734503245, "bbox/APm": 91.06707513844079, "bbox/APs": NaN, "data_time": 0.013798876500004553, "eta_seconds": 10612.28939699241, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 1799, "loss_box_reg": 0.08888481557369232, "loss_cls": 0.04587249644100666, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004532726481556892, "loss_rpn_loc": 0.04718616604804993, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8685472174997813, "total_loss": 0.18515282846055925, "validation_loss": 0.19486001614312065}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01440209100019274, "eta_seconds": 10588.782066193326, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.041015625, "fast_rcnn/fg_cls_accuracy": 0.958984375, "iteration": 1819, "loss_box_reg": 0.09320377558469772, "loss_cls": 0.04454539343714714, "loss_rpn_cls": 0.0031231624307110906, "loss_rpn_loc": 0.04289261996746063, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.878915322499779, "total_loss": 0.1927729855524376}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015858857000239368, "eta_seconds": 10577.49785729241, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0414482792721519, "fast_rcnn/fg_cls_accuracy": 0.9585517207278481, "iteration": 1839, "loss_box_reg": 0.09988433122634888, "loss_cls": 0.045475441962480545, "loss_rpn_cls": 0.0023602014407515526, "loss_rpn_loc": 0.04580887593328953, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8694505869998466, "total_loss": 0.19530457153450698}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011982069999703526, "eta_seconds": 10559.85364616426, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03892780172413793, "fast_rcnn/fg_cls_accuracy": 0.9610721982758621, "iteration": 1859, "loss_box_reg": 0.09175437316298485, "loss_cls": 0.037718771025538445, "loss_rpn_cls": 0.003915468696504831, "loss_rpn_loc": 0.045753927901387215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8600529149998692, "total_loss": 0.1927445613546297}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013541940000322938, "eta_seconds": 10536.624860383326, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0322265625, "fast_rcnn/fg_cls_accuracy": 0.9677734375, "iteration": 1879, "loss_box_reg": 0.09368035569787025, "loss_cls": 0.03680916503071785, "loss_rpn_cls": 0.004152178764343262, "loss_rpn_loc": 0.051723018288612366, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8636904879999747, "total_loss": 0.1892381781945005}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015167849000135902, "eta_seconds": 10505.653435268032, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380859375, "fast_rcnn/fg_cls_accuracy": 0.9619140625, "iteration": 1899, "loss_box_reg": 0.07685903087258339, "loss_cls": 0.03890354372560978, "loss_rpn_cls": 0.004574333317577839, "loss_rpn_loc": 0.046656785532832146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8658116014998996, "total_loss": 0.17074766720179468}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013550288500027818, "eta_seconds": 10490.1415308359, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03149801587301587, "fast_rcnn/fg_cls_accuracy": 0.9685019841269842, "iteration": 1919, "loss_box_reg": 0.084226094186306, "loss_cls": 0.03763917088508606, "loss_rpn_cls": 0.0033376823412254453, "loss_rpn_loc": 0.039989013224840164, "lr": 0.005, "roi_head/num_bg_samples": 387.875, "roi_head/num_fg_samples": 124.125, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8777504735003276, "total_loss": 0.1695472338469699}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013637017000291962, "eta_seconds": 10481.158423730092, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.033308006414081145, "fast_rcnn/fg_cls_accuracy": 0.9666919935859188, "iteration": 1939, "loss_box_reg": 0.09387752041220665, "loss_cls": 0.03691721335053444, "loss_rpn_cls": 0.00305631710216403, "loss_rpn_loc": 0.039622073993086815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.625, "rpn/num_pos_anchors": 84.375, "time": 0.8821017150003172, "total_loss": 0.16561688063666224}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01566228149977178, "eta_seconds": 10459.628094786585, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029418103448275862, "fast_rcnn/fg_cls_accuracy": 0.9705818965517241, "iteration": 1959, "loss_box_reg": 0.0838717557489872, "loss_cls": 0.03551844134926796, "loss_rpn_cls": 0.0031498116441071033, "loss_rpn_loc": 0.04677033796906471, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8585874375003186, "total_loss": 0.17996928666252643}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012967388999641116, "eta_seconds": 10442.254740256585, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03389473684210526, "fast_rcnn/fg_cls_accuracy": 0.9661052631578948, "iteration": 1979, "loss_box_reg": 0.08219883218407631, "loss_cls": 0.03881074674427509, "loss_rpn_cls": 0.004102814942598343, "loss_rpn_loc": 0.053613780066370964, "lr": 0.005, "roi_head/num_bg_samples": 397.125, "roi_head/num_fg_samples": 114.875, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8684652934998667, "total_loss": 0.1922797355800867}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013859366499673342, "eta_seconds": 10416.72865039066, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 1999, "loss_box_reg": 0.09208154305815697, "loss_cls": 0.03729891777038574, "loss_rpn_cls": 0.004324637353420258, "loss_rpn_loc": 0.049532048404216766, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8454489969999486, "total_loss": 0.18912802496924996}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013589772499926767, "eta_seconds": 10401.473746628071, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380501003440367, "fast_rcnn/fg_cls_accuracy": 0.9619498996559632, "iteration": 2019, "loss_box_reg": 0.08173145353794098, "loss_cls": 0.0348515585064888, "loss_rpn_cls": 0.0032774244900792837, "loss_rpn_loc": 0.04606715030968189, "lr": 0.005, "roi_head/num_bg_samples": 396.5, "roi_head/num_fg_samples": 115.5, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8827293745002862, "total_loss": 0.17900166858453304}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016258499000286974, "eta_seconds": 10383.14835822894, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03491323851583962, "fast_rcnn/fg_cls_accuracy": 0.9650867614841604, "iteration": 2039, "loss_box_reg": 0.09229341149330139, "loss_cls": 0.037404755130410194, "loss_rpn_cls": 0.0030006606830284, "loss_rpn_loc": 0.04984702169895172, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.863546210000095, "total_loss": 0.18486582313198596}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01584853300028044, "eta_seconds": 10369.857802306824, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037252784178187406, "fast_rcnn/fg_cls_accuracy": 0.9627472158218127, "iteration": 2059, "loss_box_reg": 0.09000474214553833, "loss_cls": 0.03899835981428623, "loss_rpn_cls": 0.0031731631606817245, "loss_rpn_loc": 0.047395261004567146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8975476909999998, "total_loss": 0.1849419007776305}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01302835349997622, "eta_seconds": 10358.225833181914, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0361328125, "fast_rcnn/fg_cls_accuracy": 0.9638671875, "iteration": 2079, "loss_box_reg": 0.08724486455321312, "loss_cls": 0.045973993837833405, "loss_rpn_cls": 0.0030110322404652834, "loss_rpn_loc": 0.03779111988842487, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.8679554685004405, "total_loss": 0.19020180380903184}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 89.90068357647002, "bbox/AP50": 98.90752019335251, "bbox/AP75": 98.90147705938551, "bbox/APl": 90.23938380754622, "bbox/APm": 88.88386901962771, "bbox/APs": NaN, "data_time": 0.013675101999979233, "eta_seconds": 10341.815137924052, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2099, "loss_box_reg": 0.0884990505874157, "loss_cls": 0.04107754863798618, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.003416641498915851, "loss_rpn_loc": 0.06242932006716728, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8932269239999187, "total_loss": 0.19365975121036172, "validation_loss": 0.19123022244832846}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0136575635006011, "eta_seconds": 10324.176337227254, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.038356667698019806, "fast_rcnn/fg_cls_accuracy": 0.9616433323019802, "iteration": 2119, "loss_box_reg": 0.08040068298578262, "loss_cls": 0.038239989429712296, "loss_rpn_cls": 0.003759029903449118, "loss_rpn_loc": 0.045844390988349915, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8485069829998793, "total_loss": 0.17594775510951877}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01224396199995681, "eta_seconds": 10307.610909986604, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03441750101279009, "fast_rcnn/fg_cls_accuracy": 0.9655824989872099, "iteration": 2139, "loss_box_reg": 0.09104080125689507, "loss_cls": 0.03530845418572426, "loss_rpn_cls": 0.0037917372537776828, "loss_rpn_loc": 0.037452591583132744, "lr": 0.005, "roi_head/num_bg_samples": 392.625, "roi_head/num_fg_samples": 119.375, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8768745459997263, "total_loss": 0.17403553624171764}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013991559500027506, "eta_seconds": 10297.328521033947, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.034357063506758004, "fast_rcnn/fg_cls_accuracy": 0.965642936493242, "iteration": 2159, "loss_box_reg": 0.08362606540322304, "loss_cls": 0.03820972703397274, "loss_rpn_cls": 0.0028603734681382775, "loss_rpn_loc": 0.038150036707520485, "lr": 0.005, "roi_head/num_bg_samples": 391.25, "roi_head/num_fg_samples": 120.75, "rpn/num_neg_anchors": 170.125, "rpn/num_pos_anchors": 85.875, "time": 0.8841141164998589, "total_loss": 0.16322252247482538}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013330730500001664, "eta_seconds": 10272.849554586599, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.03048554157239819, "fast_rcnn/fg_cls_accuracy": 0.9695144584276019, "iteration": 2179, "loss_box_reg": 0.09114638343453407, "loss_cls": 0.03680109232664108, "loss_rpn_cls": 0.002896717400290072, "loss_rpn_loc": 0.04303932003676891, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8548102505001225, "total_loss": 0.1797549540642649}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011985454500518244, "eta_seconds": 10255.468876886596, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.03245170659221902, "fast_rcnn/fg_cls_accuracy": 0.967548293407781, "iteration": 2199, "loss_box_reg": 0.09328019246459007, "loss_cls": 0.039469512179493904, "loss_rpn_cls": 0.0030301783699542284, "loss_rpn_loc": 0.042535314336419106, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.875668800999847, "total_loss": 0.18828994838986546}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013756813499639975, "eta_seconds": 10236.74518285594, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2219, "loss_box_reg": 0.08324635773897171, "loss_cls": 0.03644854947924614, "loss_rpn_cls": 0.003077507601119578, "loss_rpn_loc": 0.04696730896830559, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 151.5, "rpn/num_pos_anchors": 104.5, "time": 0.8660500474998116, "total_loss": 0.17756581807043403}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012775122499988356, "eta_seconds": 10229.34179495411, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.036272321428571425, "fast_rcnn/fg_cls_accuracy": 0.9637276785714286, "iteration": 2239, "loss_box_reg": 0.08963338658213615, "loss_cls": 0.041584597900509834, "loss_rpn_cls": 0.003160484484396875, "loss_rpn_loc": 0.04723039269447327, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8688699244999043, "total_loss": 0.1874701443593949}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015097248999609292, "eta_seconds": 10217.529332700633, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2259, "loss_box_reg": 0.07312063500285149, "loss_cls": 0.03746681474149227, "loss_rpn_cls": 0.0033478353871032596, "loss_rpn_loc": 0.04146379791200161, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.875, "rpn/num_pos_anchors": 86.125, "time": 0.877857135999875, "total_loss": 0.16872154723387212}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.018694472999868594, "eta_seconds": 10209.779635761235, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 2279, "loss_box_reg": 0.08895870670676231, "loss_cls": 0.029577581211924553, "loss_rpn_cls": 0.00313483620993793, "loss_rpn_loc": 0.04437120631337166, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.875047160500344, "total_loss": 0.1661791643127799}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014058729499993206, "eta_seconds": 10192.35829008124, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2299, "loss_box_reg": 0.0840831771492958, "loss_cls": 0.03785872086882591, "loss_rpn_cls": 0.003355022519826889, "loss_rpn_loc": 0.048520974814891815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8901794160001373, "total_loss": 0.18029032868798822}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014900668499649328, "eta_seconds": 10169.059123611969, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2319, "loss_box_reg": 0.08981714025139809, "loss_cls": 0.034265389665961266, "loss_rpn_cls": 0.0031644627451896667, "loss_rpn_loc": 0.03894554451107979, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.0, "rpn/num_pos_anchors": 101.0, "time": 0.8586659924999367, "total_loss": 0.17702865693718195}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0162080194995724, "eta_seconds": 10151.647841831964, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2339, "loss_box_reg": 0.08361848816275597, "loss_cls": 0.0330031830817461, "loss_rpn_cls": 0.002660089638084173, "loss_rpn_loc": 0.036235157400369644, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8543626634996144, "total_loss": 0.15929806616622955}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01537236500007566, "eta_seconds": 10130.504979300576, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029702746350488786, "fast_rcnn/fg_cls_accuracy": 0.9702972536495111, "iteration": 2359, "loss_box_reg": 0.07438933849334717, "loss_cls": 0.03239784575998783, "loss_rpn_cls": 0.0028395807603374124, "loss_rpn_loc": 0.03916883282363415, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8654807150005581, "total_loss": 0.15443656395655125}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013455614000122296, "eta_seconds": 10113.100108620565, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 2379, "loss_box_reg": 0.07959544658660889, "loss_cls": 0.03229916840791702, "loss_rpn_cls": 0.0025239757960662246, "loss_rpn_loc": 0.038064660504460335, "lr": 0.005, "roi_head/num_bg_samples": 388.375, "roi_head/num_fg_samples": 123.625, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8699438974995246, "total_loss": 0.15723116433946416}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 90.38046983259721, "bbox/AP50": 98.95554647930321, "bbox/AP75": 98.93429029294731, "bbox/APl": 90.51305711164808, "bbox/APm": 90.37498846524267, "bbox/APs": NaN, "data_time": 0.014254079500460648, "eta_seconds": 10102.240359718868, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 2399, "loss_box_reg": 0.07846162468194962, "loss_cls": 0.03271058388054371, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002632420277222991, "loss_rpn_loc": 0.04105196334421635, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8823002785002245, "total_loss": 0.15162402321584523, "validation_loss": 0.18059760322568635}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013223844500316773, "eta_seconds": 10082.002714711944, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02970393912825651, "fast_rcnn/fg_cls_accuracy": 0.9702960608717435, "iteration": 2419, "loss_box_reg": 0.07463748008012772, "loss_cls": 0.03062492609024048, "loss_rpn_cls": 0.003003168385475874, "loss_rpn_loc": 0.04139695316553116, "lr": 0.005, "roi_head/num_bg_samples": 395.875, "roi_head/num_fg_samples": 116.125, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8846325539998361, "total_loss": 0.15889020101167262}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01342617850013994, "eta_seconds": 10058.791759012625, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03232062055591467, "fast_rcnn/fg_cls_accuracy": 0.9676793794440853, "iteration": 2439, "loss_box_reg": 0.08237595111131668, "loss_cls": 0.03586164303123951, "loss_rpn_cls": 0.0030923092272132635, "loss_rpn_loc": 0.04343203827738762, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8559531569999308, "total_loss": 0.1755513409152627}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014425377000407025, "eta_seconds": 10049.991896518874, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02795220690133038, "fast_rcnn/fg_cls_accuracy": 0.9720477930986696, "iteration": 2459, "loss_box_reg": 0.07967670261859894, "loss_cls": 0.03273317776620388, "loss_rpn_cls": 0.003336146706715226, "loss_rpn_loc": 0.052099425345659256, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8797186050005621, "total_loss": 0.17592523363418877}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013915394999912678, "eta_seconds": 10023.989261792618, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03218129139072848, "fast_rcnn/fg_cls_accuracy": 0.9678187086092715, "iteration": 2479, "loss_box_reg": 0.08192437514662743, "loss_cls": 0.033937135711312294, "loss_rpn_cls": 0.003456542850472033, "loss_rpn_loc": 0.04651975259184837, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8666510749999361, "total_loss": 0.1762359922286123}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.010985515999891504, "eta_seconds": 9994.220309323966, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2499, "loss_box_reg": 0.08062322810292244, "loss_cls": 0.0348933469504118, "loss_rpn_cls": 0.0027861351845785975, "loss_rpn_loc": 0.038825834169983864, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8623936889998731, "total_loss": 0.16029999474994838}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012925224999435159, "eta_seconds": 9975.52187745336, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03711904393564357, "fast_rcnn/fg_cls_accuracy": 0.9628809560643564, "iteration": 2519, "loss_box_reg": 0.08054154366254807, "loss_cls": 0.03537464700639248, "loss_rpn_cls": 0.0020838259952142835, "loss_rpn_loc": 0.03704572282731533, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.0, "rpn/num_pos_anchors": 92.0, "time": 0.8709305714996844, "total_loss": 0.1565095882397145}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014001295999605645, "eta_seconds": 9970.222825800769, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024819186681222707, "fast_rcnn/fg_cls_accuracy": 0.9751808133187774, "iteration": 2539, "loss_box_reg": 0.0694175660610199, "loss_cls": 0.028812485747039318, "loss_rpn_cls": 0.002306518144905567, "loss_rpn_loc": 0.034660546109080315, "lr": 0.005, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.9114369695003006, "total_loss": 0.14976061368361115}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015146330999868951, "eta_seconds": 9964.491298234194, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2559, "loss_box_reg": 0.07692543789744377, "loss_cls": 0.031828004866838455, "loss_rpn_cls": 0.003076101769693196, "loss_rpn_loc": 0.039611104875802994, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.882002274000115, "total_loss": 0.15674148977268487}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014400603499780118, "eta_seconds": 9936.9830187426, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029522579376430207, "fast_rcnn/fg_cls_accuracy": 0.9704774206235698, "iteration": 2579, "loss_box_reg": 0.07119812443852425, "loss_cls": 0.03264463320374489, "loss_rpn_cls": 0.0027976155979558825, "loss_rpn_loc": 0.0388930719345808, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8642328930000076, "total_loss": 0.15167312882840633}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011450261000391038, "eta_seconds": 9935.233353661648, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.032523878905617615, "fast_rcnn/fg_cls_accuracy": 0.9674761210943823, "iteration": 2599, "loss_box_reg": 0.06924661248922348, "loss_cls": 0.028150435537099838, "loss_rpn_cls": 0.0023369272239506245, "loss_rpn_loc": 0.03825339488685131, "lr": 0.005, "roi_head/num_bg_samples": 396.125, "roi_head/num_fg_samples": 115.875, "rpn/num_neg_anchors": 174.625, "rpn/num_pos_anchors": 81.375, "time": 0.8899173999998311, "total_loss": 0.14393403416033834}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015590758999678656, "eta_seconds": 9929.062597158703, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02809597523219814, "fast_rcnn/fg_cls_accuracy": 0.9719040247678019, "iteration": 2619, "loss_box_reg": 0.07244919240474701, "loss_cls": 0.030225475318729877, "loss_rpn_cls": 0.0027918906416743994, "loss_rpn_loc": 0.03854382783174515, "lr": 0.005, "roi_head/num_bg_samples": 384.25, "roi_head/num_fg_samples": 127.75, "rpn/num_neg_anchors": 164.375, "rpn/num_pos_anchors": 91.625, "time": 0.9016381179999371, "total_loss": 0.1531053998041898}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014583123999727832, "eta_seconds": 9908.669780157361, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.029799952651515152, "fast_rcnn/fg_cls_accuracy": 0.9702000473484849, "iteration": 2639, "loss_box_reg": 0.08254137635231018, "loss_cls": 0.03172833938151598, "loss_rpn_cls": 0.0028717368841171265, "loss_rpn_loc": 0.04374443367123604, "lr": 0.005, "roi_head/num_bg_samples": 397.0, "roi_head/num_fg_samples": 115.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8593994910002039, "total_loss": 0.16603078274056315}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011498301999836258, "eta_seconds": 9894.165619398722, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.026568700396825396, "fast_rcnn/fg_cls_accuracy": 0.9734312996031746, "iteration": 2659, "loss_box_reg": 0.07682507485151291, "loss_cls": 0.029614977538585663, "loss_rpn_cls": 0.002964502782560885, "loss_rpn_loc": 0.03749946877360344, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8888799219998873, "total_loss": 0.1592754531884566}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013297670999691036, "eta_seconds": 9873.78316883738, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2679, "loss_box_reg": 0.07238440215587616, "loss_cls": 0.0355693232268095, "loss_rpn_cls": 0.0026111083570867777, "loss_rpn_loc": 0.0347738191485405, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.877020037499733, "total_loss": 0.16674690548097715}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 92.9240043828716, "bbox/AP50": 98.92929606072012, "bbox/AP75": 98.92799052796131, "bbox/APl": 93.68590994988891, "bbox/APm": 91.26409846273341, "bbox/APs": NaN, "data_time": 0.012849886500134744, "eta_seconds": 9856.122737068548, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 2699, "loss_box_reg": 0.0671813078224659, "loss_cls": 0.031869376078248024, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0031945809023454785, "loss_rpn_loc": 0.036566296592354774, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8767406539996045, "total_loss": 0.14776976208668202, "validation_loss": 0.15299182322134222}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011506692000239127, "eta_seconds": 9834.512868088885, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02899722337196468, "fast_rcnn/fg_cls_accuracy": 0.9710027766280354, "iteration": 2719, "loss_box_reg": 0.07861164957284927, "loss_cls": 0.030141491442918777, "loss_rpn_cls": 0.0024106288328766823, "loss_rpn_loc": 0.03943100944161415, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8650525944999572, "total_loss": 0.1521670074434951}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01285303099984958, "eta_seconds": 9817.077334238891, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02957381063432836, "fast_rcnn/fg_cls_accuracy": 0.9704261893656716, "iteration": 2739, "loss_box_reg": 0.06671890988945961, "loss_cls": 0.03127466607838869, "loss_rpn_cls": 0.0026815730379894376, "loss_rpn_loc": 0.032418686896562576, "lr": 0.005, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.872626844000024, "total_loss": 0.14512363611720502}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012917492500037042, "eta_seconds": 9801.74766123081, "fast_rcnn/cls_accuracy": 0.954833984375, "fast_rcnn/false_negative": 0.09676804011336385, "fast_rcnn/fg_cls_accuracy": 0.9032319598866361, "iteration": 2759, "loss_box_reg": 0.11749137938022614, "loss_cls": 0.10883904993534088, "loss_rpn_cls": 0.01077337609604001, "loss_rpn_loc": 0.058977166190743446, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8778482835000432, "total_loss": 0.3397485390305519}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015244338000229618, "eta_seconds": 9784.308380630808, "fast_rcnn/cls_accuracy": 0.96533203125, "fast_rcnn/false_negative": 0.0766254912525355, "fast_rcnn/fg_cls_accuracy": 0.9233745087474645, "iteration": 2779, "loss_box_reg": 0.129035085439682, "loss_cls": 0.09200597926974297, "loss_rpn_cls": 0.013461795169860125, "loss_rpn_loc": 0.06961438059806824, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8592402270001003, "total_loss": 0.30797872692346573}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014976671999647806, "eta_seconds": 9762.52735721154, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.05617177138594165, "fast_rcnn/fg_cls_accuracy": 0.9438282286140584, "iteration": 2799, "loss_box_reg": 0.12645410001277924, "loss_cls": 0.07380463182926178, "loss_rpn_cls": 0.007109847851097584, "loss_rpn_loc": 0.06993347778916359, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8461526080000112, "total_loss": 0.290553962578997}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013639475000218226, "eta_seconds": 9745.095829031536, "fast_rcnn/cls_accuracy": 0.98291015625, "fast_rcnn/false_negative": 0.03667033370003667, "fast_rcnn/fg_cls_accuracy": 0.9633296662999633, "iteration": 2819, "loss_box_reg": 0.09371316060423851, "loss_cls": 0.045089706778526306, "loss_rpn_cls": 0.005565444240346551, "loss_rpn_loc": 0.04761535860598087, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8727382074998786, "total_loss": 0.19521310785785317}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01387930500004586, "eta_seconds": 9728.338034612361, "fast_rcnn/cls_accuracy": 0.981689453125, "fast_rcnn/false_negative": 0.04177911931818182, "fast_rcnn/fg_cls_accuracy": 0.9582208806818182, "iteration": 2839, "loss_box_reg": 0.09622959420084953, "loss_cls": 0.04797627404332161, "loss_rpn_cls": 0.005159869324415922, "loss_rpn_loc": 0.04820975102484226, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8819557160004479, "total_loss": 0.20418882521335036}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01400469649979641, "eta_seconds": 9721.238075284942, "fast_rcnn/cls_accuracy": 0.9833984375, "fast_rcnn/false_negative": 0.035701430861929534, "fast_rcnn/fg_cls_accuracy": 0.9642985691380704, "iteration": 2859, "loss_box_reg": 0.08729725331068039, "loss_cls": 0.046435995027422905, "loss_rpn_cls": 0.00510191498324275, "loss_rpn_loc": 0.058035969734191895, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.908507136499793, "total_loss": 0.20082180527970195}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01294949600014661, "eta_seconds": 9702.349646118308, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2879, "loss_box_reg": 0.07738611847162247, "loss_cls": 0.037084782496094704, "loss_rpn_cls": 0.004217830719426274, "loss_rpn_loc": 0.04370034486055374, "lr": 0.005, "roi_head/num_bg_samples": 386.25, "roi_head/num_fg_samples": 125.75, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8611070060001111, "total_loss": 0.16869779070839286}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013615458000003855, "eta_seconds": 9692.134685180317, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.030606273408239702, "fast_rcnn/fg_cls_accuracy": 0.9693937265917603, "iteration": 2899, "loss_box_reg": 0.08812431991100311, "loss_cls": 0.035314807668328285, "loss_rpn_cls": 0.0043608746491372585, "loss_rpn_loc": 0.04997708648443222, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 158.125, "rpn/num_pos_anchors": 97.875, "time": 0.8876654215000599, "total_loss": 0.1825667613884434}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012895140999717114, "eta_seconds": 9674.672952570318, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.0361241703539823, "fast_rcnn/fg_cls_accuracy": 0.9638758296460177, "iteration": 2919, "loss_box_reg": 0.08205550536513329, "loss_cls": 0.03564905747771263, "loss_rpn_cls": 0.003591310582123697, "loss_rpn_loc": 0.05027636140584946, "lr": 0.005, "roi_head/num_bg_samples": 399.875, "roi_head/num_fg_samples": 112.125, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.8845072490003076, "total_loss": 0.17568102467339486}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014998236500105122, "eta_seconds": 9651.432936964971, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02536879358071411, "fast_rcnn/fg_cls_accuracy": 0.9746312064192859, "iteration": 2939, "loss_box_reg": 0.08032884448766708, "loss_cls": 0.03405417315661907, "loss_rpn_cls": 0.003540605423040688, "loss_rpn_loc": 0.04676378145813942, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.871404378999614, "total_loss": 0.16514784714672714}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01499920749984085, "eta_seconds": 9640.941865665844, "fast_rcnn/cls_accuracy": 0.985595703125, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2959, "loss_box_reg": 0.07666385546326637, "loss_cls": 0.033461492508649826, "loss_rpn_cls": 0.0037930241087451577, "loss_rpn_loc": 0.03955382853746414, "lr": 0.005, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8775624479999351, "total_loss": 0.1578356878599152}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0172871985000711, "eta_seconds": 9625.483712489166, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2979, "loss_box_reg": 0.0873444713652134, "loss_cls": 0.03711334243416786, "loss_rpn_cls": 0.004567545838654041, "loss_rpn_loc": 0.04251238889992237, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.875, "rpn/num_pos_anchors": 87.125, "time": 0.8813596219997635, "total_loss": 0.17236966197378933}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 93.12233100450966, "bbox/AP50": 98.91209551467809, "bbox/AP75": 98.90815859983685, "bbox/APl": 94.12688557090384, "bbox/APm": 91.41003399932086, "bbox/APs": NaN, "data_time": 0.015606857999955537, "eta_seconds": 9623.082286138271, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 2999, "loss_box_reg": 0.06720640882849693, "loss_cls": 0.01835676282644272, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.009389291051775217, "loss_rpn_loc": 0.038574906066060066, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.9206664974999512, "total_loss": 0.14024185249581933, "validation_loss": 0.15954915430267325}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011808011999619339, "eta_seconds": 9600.16200263439, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 3019, "loss_box_reg": 0.08314639329910278, "loss_cls": 0.0376443974673748, "loss_rpn_cls": 0.0030142214382067323, "loss_rpn_loc": 0.03945096954703331, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8562799734995679, "total_loss": 0.1746992077678442}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013189115500154003, "eta_seconds": 9581.05644311135, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 3039, "loss_box_reg": 0.07409685850143433, "loss_cls": 0.03244470991194248, "loss_rpn_cls": 0.0028242692351341248, "loss_rpn_loc": 0.04587041959166527, "lr": 0.005, "roi_head/num_bg_samples": 387.5, "roi_head/num_fg_samples": 124.5, "rpn/num_neg_anchors": 154.375, "rpn/num_pos_anchors": 101.625, "time": 0.8644745054998566, "total_loss": 0.16931998787913471}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013534310999602894, "eta_seconds": 9555.039547035833, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0348046875, "fast_rcnn/fg_cls_accuracy": 0.9651953125, "iteration": 3059, "loss_box_reg": 0.08912316337227821, "loss_cls": 0.040720729157328606, "loss_rpn_cls": 0.0033090302022174, "loss_rpn_loc": 0.04025048390030861, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8530120370000986, "total_loss": 0.17787926085293293}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014201820000380394, "eta_seconds": 9543.668527310429, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03196486928104575, "fast_rcnn/fg_cls_accuracy": 0.9680351307189543, "iteration": 3079, "loss_box_reg": 0.0686977356672287, "loss_cls": 0.035015568137168884, "loss_rpn_cls": 0.00279963796492666, "loss_rpn_loc": 0.03855223208665848, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8948249290006061, "total_loss": 0.14674806164111942}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013865771499695256, "eta_seconds": 9517.51735908032, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02321697909933204, "fast_rcnn/fg_cls_accuracy": 0.9767830209006679, "iteration": 3099, "loss_box_reg": 0.07850319519639015, "loss_cls": 0.027558359317481518, "loss_rpn_cls": 0.0027522484306246042, "loss_rpn_loc": 0.03784923441708088, "lr": 0.005, "roi_head/num_bg_samples": 389.875, "roi_head/num_fg_samples": 122.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8595668009998008, "total_loss": 0.14408221002668142}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01446834599983049, "eta_seconds": 9508.71323557044, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 3119, "loss_box_reg": 0.07208020612597466, "loss_cls": 0.027958947233855724, "loss_rpn_cls": 0.0028214638587087393, "loss_rpn_loc": 0.04015910252928734, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8765667439997742, "total_loss": 0.14485203940421343}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015091185000073892, "eta_seconds": 9483.766832985846, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3139, "loss_box_reg": 0.07660289481282234, "loss_cls": 0.02883316855877638, "loss_rpn_cls": 0.003664590767584741, "loss_rpn_loc": 0.04118155874311924, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8495973095000409, "total_loss": 0.15969278826378286}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013378322499647766, "eta_seconds": 9456.344148523265, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027560763888888888, "fast_rcnn/fg_cls_accuracy": 0.9724392361111112, "iteration": 3159, "loss_box_reg": 0.07904543727636337, "loss_cls": 0.028979639522731304, "loss_rpn_cls": 0.002581986482255161, "loss_rpn_loc": 0.03558463603258133, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8616635454995958, "total_loss": 0.1512664365582168}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013394650000009278, "eta_seconds": 9445.126903894947, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.032126560069590346, "fast_rcnn/fg_cls_accuracy": 0.9678734399304096, "iteration": 3179, "loss_box_reg": 0.08476627245545387, "loss_cls": 0.0355964619666338, "loss_rpn_cls": 0.003005484351888299, "loss_rpn_loc": 0.039235398173332214, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8727699070004746, "total_loss": 0.17287040723022074}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015970269499575807, "eta_seconds": 9419.84299253093, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.027215893058690745, "fast_rcnn/fg_cls_accuracy": 0.9727841069413092, "iteration": 3199, "loss_box_reg": 0.08042847365140915, "loss_cls": 0.029140799306333065, "loss_rpn_cls": 0.0027483388548716903, "loss_rpn_loc": 0.03704603388905525, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8536831940004959, "total_loss": 0.15336330170975998}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01509946050009603, "eta_seconds": 9401.151297154625, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.0322592626984864, "fast_rcnn/fg_cls_accuracy": 0.9677407373015137, "iteration": 3219, "loss_box_reg": 0.07175835222005844, "loss_cls": 0.03212358430027962, "loss_rpn_cls": 0.0027838735841214657, "loss_rpn_loc": 0.036246467381715775, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8455828644996473, "total_loss": 0.14006751152919605}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013515179500245722, "eta_seconds": 9383.849602200717, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021980676328502417, "fast_rcnn/fg_cls_accuracy": 0.9780193236714976, "iteration": 3239, "loss_box_reg": 0.0661500059068203, "loss_cls": 0.025285215117037296, "loss_rpn_cls": 0.0022180761443451047, "loss_rpn_loc": 0.036850456148386, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8759488749997217, "total_loss": 0.13612847530748695}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013904339499731577, "eta_seconds": 9362.250589532423, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02769993111222445, "fast_rcnn/fg_cls_accuracy": 0.9723000688877755, "iteration": 3259, "loss_box_reg": 0.07065539062023163, "loss_cls": 0.028814840130507946, "loss_rpn_cls": 0.0029595009982585907, "loss_rpn_loc": 0.042885731905698776, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.88494127749982, "total_loss": 0.15331736870575696}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014031905499905406, "eta_seconds": 9348.968644660708, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.023207561461218836, "fast_rcnn/fg_cls_accuracy": 0.9767924385387812, "iteration": 3279, "loss_box_reg": 0.059069978073239326, "loss_cls": 0.025125066749751568, "loss_rpn_cls": 0.003141147317364812, "loss_rpn_loc": 0.038696713745594025, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.886954471000081, "total_loss": 0.1338297468610108}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 93.27905094948086, "bbox/AP50": 98.96061968335171, "bbox/AP75": 98.95254082058918, "bbox/APl": 94.22290992711233, "bbox/APm": 91.01193026527187, "bbox/APs": NaN, "data_time": 0.015314491499793803, "eta_seconds": 9331.528165890704, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3299, "loss_box_reg": 0.06118686683475971, "loss_cls": 0.025163940154016018, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.002601873711682856, "loss_rpn_loc": 0.046768760308623314, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8836847110001145, "total_loss": 0.14197535056155175, "validation_loss": 0.17572354030975335}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01657294799997544, "eta_seconds": 9327.826769569449, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027298709381551364, "fast_rcnn/fg_cls_accuracy": 0.9727012906184487, "iteration": 3319, "loss_box_reg": 0.07321085035800934, "loss_cls": 0.026175927370786667, "loss_rpn_cls": 0.0025562879163771868, "loss_rpn_loc": 0.04157147742807865, "lr": 0.005, "roi_head/num_bg_samples": 396.0, "roi_head/num_fg_samples": 116.0, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8852187219999905, "total_loss": 0.15138369193300605}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013637358500091068, "eta_seconds": 9320.907193381125, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3339, "loss_box_reg": 0.0705733373761177, "loss_cls": 0.029932837933301926, "loss_rpn_cls": 0.002767486381344497, "loss_rpn_loc": 0.04421466588973999, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8811242625001796, "total_loss": 0.1560333016095683}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015893325499746425, "eta_seconds": 9306.525065608244, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02383262761703129, "fast_rcnn/fg_cls_accuracy": 0.9761673723829687, "iteration": 3359, "loss_box_reg": 0.07866281643509865, "loss_cls": 0.03185747377574444, "loss_rpn_cls": 0.003939336049370468, "loss_rpn_loc": 0.04590761289000511, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8784054349998769, "total_loss": 0.15744307718705386}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01445641100008288, "eta_seconds": 9285.935212541124, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 3379, "loss_box_reg": 0.07135868817567825, "loss_cls": 0.03006169479340315, "loss_rpn_cls": 0.0031535130692645907, "loss_rpn_loc": 0.0403817743062973, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.75, "rpn/num_pos_anchors": 97.25, "time": 0.8491240339999422, "total_loss": 0.15564731787890196}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015795905500453955, "eta_seconds": 9261.439326773583, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02752351492961303, "fast_rcnn/fg_cls_accuracy": 0.972476485070387, "iteration": 3399, "loss_box_reg": 0.06518244743347168, "loss_cls": 0.02701749838888645, "loss_rpn_cls": 0.002880784450098872, "loss_rpn_loc": 0.0377532746642828, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8454985644998487, "total_loss": 0.1512888001743704}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01527901799954634, "eta_seconds": 9231.234745578438, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02244012304987915, "fast_rcnn/fg_cls_accuracy": 0.9775598769501208, "iteration": 3419, "loss_box_reg": 0.07252498716115952, "loss_cls": 0.03160363249480724, "loss_rpn_cls": 0.0024293236201629043, "loss_rpn_loc": 0.04073278419673443, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.852150950000123, "total_loss": 0.15422597713768482}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012618986000234145, "eta_seconds": 9217.465740862552, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3439, "loss_box_reg": 0.07212798297405243, "loss_cls": 0.02934582531452179, "loss_rpn_cls": 0.0028162638191133738, "loss_rpn_loc": 0.03634508140385151, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.859679992999645, "total_loss": 0.14720665954519063}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015629582999736158, "eta_seconds": 9209.021030423577, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.030127502792816015, "fast_rcnn/fg_cls_accuracy": 0.9698724972071839, "iteration": 3459, "loss_box_reg": 0.07034417241811752, "loss_cls": 0.026633177883923054, "loss_rpn_cls": 0.003176042577251792, "loss_rpn_loc": 0.0405108705163002, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.9005381335000493, "total_loss": 0.15105392935220152}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012076322499979142, "eta_seconds": 9194.057128930923, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.030489864864864866, "fast_rcnn/fg_cls_accuracy": 0.9695101351351352, "iteration": 3479, "loss_box_reg": 0.07114227861166, "loss_cls": 0.026824098080396652, "loss_rpn_cls": 0.002793507184833288, "loss_rpn_loc": 0.03859907202422619, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.8727268464995177, "total_loss": 0.14840750175062567}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014796175999890693, "eta_seconds": 9184.643737424389, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02636273846810934, "fast_rcnn/fg_cls_accuracy": 0.9736372615318907, "iteration": 3499, "loss_box_reg": 0.07014593109488487, "loss_cls": 0.025068681687116623, "loss_rpn_cls": 0.0022604097612202168, "loss_rpn_loc": 0.04264912009239197, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.893156176499815, "total_loss": 0.15068290615454316}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01170660899970244, "eta_seconds": 9176.90027535572, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.024857474662162163, "fast_rcnn/fg_cls_accuracy": 0.9751425253378379, "iteration": 3519, "loss_box_reg": 0.07261389493942261, "loss_cls": 0.031547232531011105, "loss_rpn_cls": 0.0035334062995389104, "loss_rpn_loc": 0.05682768300175667, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8848085234999417, "total_loss": 0.16874005855061114}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015069052500166435, "eta_seconds": 9149.657950404393, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02318663990825688, "fast_rcnn/fg_cls_accuracy": 0.9768133600917431, "iteration": 3539, "loss_box_reg": 0.06397773697972298, "loss_cls": 0.027955145575106144, "loss_rpn_cls": 0.0029910271987318993, "loss_rpn_loc": 0.035324785858392715, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8772716075000062, "total_loss": 0.14210126956459135}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014824828999735473, "eta_seconds": 9139.718760184218, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024399182888728672, "fast_rcnn/fg_cls_accuracy": 0.9756008171112713, "iteration": 3559, "loss_box_reg": 0.06688013300299644, "loss_cls": 0.02547728642821312, "loss_rpn_cls": 0.002551792422309518, "loss_rpn_loc": 0.041121695190668106, "lr": 0.005, "roi_head/num_bg_samples": 386.375, "roi_head/num_fg_samples": 125.625, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8910150914994119, "total_loss": 0.137859839014709}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012648733000332868, "eta_seconds": 9122.743446730547, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.03091551987767584, "fast_rcnn/fg_cls_accuracy": 0.9690844801223242, "iteration": 3579, "loss_box_reg": 0.06596524640917778, "loss_cls": 0.031009403057396412, "loss_rpn_cls": 0.002636650577187538, "loss_rpn_loc": 0.03402801230549812, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8622523320004802, "total_loss": 0.14295857812976465}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 94.51462784052855, "bbox/AP50": 98.93522228080109, "bbox/AP75": 98.93450218404813, "bbox/APl": 95.4269028089368, "bbox/APm": 92.13712530083895, "bbox/APs": NaN, "data_time": 0.016846376500325277, "eta_seconds": 9099.664099978247, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3599, "loss_box_reg": 0.060619814321398735, "loss_cls": 0.025204936042428017, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002324309549294412, "loss_rpn_loc": 0.029545368626713753, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8770653480000874, "total_loss": 0.12885292759165168, "validation_loss": 0.1466805888295102}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013414248000117368, "eta_seconds": 9073.193813482945, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02580995230643118, "fast_rcnn/fg_cls_accuracy": 0.9741900476935689, "iteration": 3619, "loss_box_reg": 0.07269391417503357, "loss_cls": 0.02648307103663683, "loss_rpn_cls": 0.002976909978315234, "loss_rpn_loc": 0.035148199647665024, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8643609504997585, "total_loss": 0.14119619433768094}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.017480556500231614, "eta_seconds": 9064.668756838248, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021484734934578288, "fast_rcnn/fg_cls_accuracy": 0.9785152650654217, "iteration": 3639, "loss_box_reg": 0.06451242417097092, "loss_cls": 0.025800890289247036, "loss_rpn_cls": 0.003012675791978836, "loss_rpn_loc": 0.03744327463209629, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8850444254994727, "total_loss": 0.13275502575561404}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015173202000369201, "eta_seconds": 9041.131346661121, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 3659, "loss_box_reg": 0.06518324464559555, "loss_cls": 0.028774174861609936, "loss_rpn_cls": 0.0030480388086289167, "loss_rpn_loc": 0.04536570981144905, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8544350470001518, "total_loss": 0.15816591365728527}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015335218500695191, "eta_seconds": 9025.614861067337, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3679, "loss_box_reg": 0.06726354733109474, "loss_cls": 0.024467935785651207, "loss_rpn_cls": 0.0026147140888497233, "loss_rpn_loc": 0.03361096978187561, "lr": 0.005, "roi_head/num_bg_samples": 385.125, "roi_head/num_fg_samples": 126.875, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8869942110004558, "total_loss": 0.13675730756949633}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016904356500162976, "eta_seconds": 9004.579372686254, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025110662387133182, "fast_rcnn/fg_cls_accuracy": 0.9748893376128669, "iteration": 3699, "loss_box_reg": 0.07380294799804688, "loss_cls": 0.02671107929199934, "loss_rpn_cls": 0.0026282721664756536, "loss_rpn_loc": 0.03765440732240677, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.8669072914990466, "total_loss": 0.15535226103384048}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01588809099939681, "eta_seconds": 8987.096449916258, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02690737158822265, "fast_rcnn/fg_cls_accuracy": 0.9730926284117773, "iteration": 3719, "loss_box_reg": 0.07514582574367523, "loss_cls": 0.03208179213106632, "loss_rpn_cls": 0.0023227966157719493, "loss_rpn_loc": 0.03262249752879143, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8608530749997954, "total_loss": 0.13813788018887863}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01272802500079706, "eta_seconds": 8962.058414416571, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.023082386363636364, "fast_rcnn/fg_cls_accuracy": 0.9769176136363636, "iteration": 3739, "loss_box_reg": 0.06598043441772461, "loss_cls": 0.02492926735430956, "loss_rpn_cls": 0.002211912884376943, "loss_rpn_loc": 0.035132599994540215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.375, "rpn/num_pos_anchors": 99.625, "time": 0.8425305889995798, "total_loss": 0.14112166687846184}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.017491417498604278, "eta_seconds": 8932.782554465553, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.024274259868421053, "fast_rcnn/fg_cls_accuracy": 0.9757257401315789, "iteration": 3759, "loss_box_reg": 0.0770643837749958, "loss_cls": 0.02429282944649458, "loss_rpn_cls": 0.0028139676433056593, "loss_rpn_loc": 0.03533002734184265, "lr": 0.005, "roi_head/num_bg_samples": 392.125, "roi_head/num_fg_samples": 119.875, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8662025825005912, "total_loss": 0.13814355875365436}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014352537500599283, "eta_seconds": 8915.337417165552, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.025071550123762377, "fast_rcnn/fg_cls_accuracy": 0.9749284498762376, "iteration": 3779, "loss_box_reg": 0.07174495980143547, "loss_cls": 0.024629310704767704, "loss_rpn_cls": 0.002537853899411857, "loss_rpn_loc": 0.032603537663817406, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 172.625, "rpn/num_pos_anchors": 83.375, "time": 0.863006641499851, "total_loss": 0.1404715662356466}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016315409999151598, "eta_seconds": 8902.066019020147, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 3799, "loss_box_reg": 0.07169150561094284, "loss_cls": 0.02851510141044855, "loss_rpn_cls": 0.002499441849067807, "loss_rpn_loc": 0.03480919077992439, "lr": 0.005, "roi_head/num_bg_samples": 387.125, "roi_head/num_fg_samples": 124.875, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8698634014999698, "total_loss": 0.1458265830297023}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014548789498803671, "eta_seconds": 8871.673029500389, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029305965489839936, "fast_rcnn/fg_cls_accuracy": 0.97069403451016, "iteration": 3819, "loss_box_reg": 0.06981262192130089, "loss_cls": 0.0321883549913764, "loss_rpn_cls": 0.0028753530932590365, "loss_rpn_loc": 0.036025675013661385, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8394459645005554, "total_loss": 0.15315054648090154}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013720603499677964, "eta_seconds": 8853.17420985548, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.030490451388888888, "fast_rcnn/fg_cls_accuracy": 0.9695095486111112, "iteration": 3839, "loss_box_reg": 0.07815155386924744, "loss_cls": 0.03196221496909857, "loss_rpn_cls": 0.002755100023932755, "loss_rpn_loc": 0.03541838005185127, "lr": 0.005, "roi_head/num_bg_samples": 391.875, "roi_head/num_fg_samples": 120.125, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8787194060005277, "total_loss": 0.1481912493472919}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012579242999890994, "eta_seconds": 8833.573435874765, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.031897189349112426, "fast_rcnn/fg_cls_accuracy": 0.9681028106508875, "iteration": 3859, "loss_box_reg": 0.07044711336493492, "loss_cls": 0.029714887030422688, "loss_rpn_cls": 0.0033130873925983906, "loss_rpn_loc": 0.041767822578549385, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8905400194989852, "total_loss": 0.14567952742800117}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.016821658499793557, "eta_seconds": 8823.220519568787, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02559853830645161, "fast_rcnn/fg_cls_accuracy": 0.9744014616935484, "iteration": 3879, "loss_box_reg": 0.07491979375481606, "loss_cls": 0.027746117673814297, "loss_rpn_cls": 0.0025814230320975184, "loss_rpn_loc": 0.04155806638300419, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 164.75, "rpn/num_pos_anchors": 91.25, "time": 0.8907964480004011, "total_loss": 0.15361196256708354}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 94.94155308690227, "bbox/AP50": 98.96777693067816, "bbox/AP75": 98.96599116280159, "bbox/APl": 95.81155173226301, "bbox/APm": 92.58270316582754, "bbox/APs": NaN, "data_time": 0.0166540754999005, "eta_seconds": 8797.017228219971, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 3899, "loss_box_reg": 0.06790591776371002, "loss_cls": 0.025828268378973007, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0026264950865879655, "loss_rpn_loc": 0.03195084631443024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8543838935001986, "total_loss": 0.13255327357910573, "validation_loss": 0.14792111576303246}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01380043500012107, "eta_seconds": 8781.817470994656, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024719360596192383, "fast_rcnn/fg_cls_accuracy": 0.9752806394038076, "iteration": 3919, "loss_box_reg": 0.06461720168590546, "loss_cls": 0.023319250904023647, "loss_rpn_cls": 0.0020520591642707586, "loss_rpn_loc": 0.03039520513266325, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.8972092889998748, "total_loss": 0.13415113149676472}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014971762999266502, "eta_seconds": 8759.346107136958, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3939, "loss_box_reg": 0.06706715747714043, "loss_cls": 0.027508745901286602, "loss_rpn_cls": 0.0024385941214859486, "loss_rpn_loc": 0.03421283699572086, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.375, "rpn/num_pos_anchors": 93.625, "time": 0.8548483864997252, "total_loss": 0.1354159387992695}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012218220000249858, "eta_seconds": 8741.933631026955, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3959, "loss_box_reg": 0.06786992028355598, "loss_cls": 0.02666586823761463, "loss_rpn_cls": 0.00215515261515975, "loss_rpn_loc": 0.0341497752815485, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8674180375001015, "total_loss": 0.13773037993814796}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013403915500020958, "eta_seconds": 8723.552189349628, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022183835097254002, "fast_rcnn/fg_cls_accuracy": 0.9778161649027459, "iteration": 3979, "loss_box_reg": 0.06269732862710953, "loss_cls": 0.02577450592070818, "loss_rpn_cls": 0.002212987863458693, "loss_rpn_loc": 0.033453453332185745, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8743991820001611, "total_loss": 0.12669191422173753}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014044588500837563, "eta_seconds": 8699.251158132407, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021779715093818985, "fast_rcnn/fg_cls_accuracy": 0.978220284906181, "iteration": 3999, "loss_box_reg": 0.05749828927218914, "loss_cls": 0.02292787656188011, "loss_rpn_cls": 0.0022763016168028116, "loss_rpn_loc": 0.030527872033417225, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8781595870004821, "total_loss": 0.12036801665090024}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.017877838000458723, "eta_seconds": 8681.47508755295, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.024946263227513227, "fast_rcnn/fg_cls_accuracy": 0.9750537367724867, "iteration": 4019, "loss_box_reg": 0.061806268990039825, "loss_cls": 0.021874409168958664, "loss_rpn_cls": 0.001797958801034838, "loss_rpn_loc": 0.032160378992557526, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.858296216000781, "total_loss": 0.12814085837453604}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.017760669000381313, "eta_seconds": 8664.079084972942, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025957911969496022, "fast_rcnn/fg_cls_accuracy": 0.974042088030504, "iteration": 4039, "loss_box_reg": 0.06829555332660675, "loss_cls": 0.02705319505184889, "loss_rpn_cls": 0.0019355633994564414, "loss_rpn_loc": 0.03182108514010906, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.868489757000134, "total_loss": 0.13258394983131438}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014202485499481554, "eta_seconds": 8653.910020389647, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4059, "loss_box_reg": 0.06874504685401917, "loss_cls": 0.02661903016269207, "loss_rpn_cls": 0.0024593337439000607, "loss_rpn_loc": 0.035074906423687935, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8713963939999303, "total_loss": 0.13849112973548472}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014231688500331074, "eta_seconds": 8633.553868764164, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025265144902234637, "fast_rcnn/fg_cls_accuracy": 0.9747348550977654, "iteration": 4079, "loss_box_reg": 0.06041577830910683, "loss_cls": 0.024997691623866558, "loss_rpn_cls": 0.0023892336757853627, "loss_rpn_loc": 0.033885177224874496, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 172.5, "rpn/num_pos_anchors": 83.5, "time": 0.8808629795003071, "total_loss": 0.1258070394396782}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013304524999512068, "eta_seconds": 8622.8361129201, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0185546875, "fast_rcnn/fg_cls_accuracy": 0.9814453125, "iteration": 4099, "loss_box_reg": 0.05665453523397446, "loss_cls": 0.02086931560188532, "loss_rpn_cls": 0.0020721667679026723, "loss_rpn_loc": 0.032867273315787315, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8957161810003527, "total_loss": 0.12901447108015418}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01389541300068231, "eta_seconds": 8609.213105755536, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021978142556179775, "fast_rcnn/fg_cls_accuracy": 0.9780218574438202, "iteration": 4119, "loss_box_reg": 0.06112395226955414, "loss_cls": 0.0211090799421072, "loss_rpn_cls": 0.002453662804327905, "loss_rpn_loc": 0.03786292113363743, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8970748760002607, "total_loss": 0.13180671783629805}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013343292500394455, "eta_seconds": 8593.27903537613, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 4139, "loss_box_reg": 0.07672134041786194, "loss_cls": 0.028643625788390636, "loss_rpn_cls": 0.0022411660756915808, "loss_rpn_loc": 0.03565843217074871, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8405602805005401, "total_loss": 0.14650720910867676}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.010753457500868535, "eta_seconds": 8575.850216726143, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.021805205331412104, "fast_rcnn/fg_cls_accuracy": 0.9781947946685878, "iteration": 4159, "loss_box_reg": 0.06780307739973068, "loss_cls": 0.027994119562208652, "loss_rpn_cls": 0.00258387578651309, "loss_rpn_loc": 0.033184777945280075, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.0, "rpn/num_pos_anchors": 87.0, "time": 0.8456791519993203, "total_loss": 0.13741438509896398}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01744608349963528, "eta_seconds": 8560.807449318956, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024896364795918367, "fast_rcnn/fg_cls_accuracy": 0.9751036352040816, "iteration": 4179, "loss_box_reg": 0.0685216449201107, "loss_cls": 0.02508564107120037, "loss_rpn_cls": 0.0029065579874441028, "loss_rpn_loc": 0.04283138923346996, "lr": 0.005, "roi_head/num_bg_samples": 393.625, "roi_head/num_fg_samples": 118.375, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.9070378970000093, "total_loss": 0.14319775789044797}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 93.40862195109425, "bbox/AP50": 98.96374346407794, "bbox/AP75": 98.96286729535807, "bbox/APl": 94.03985809640986, "bbox/APm": 91.7385771795752, "bbox/APs": NaN, "data_time": 0.014953972499824886, "eta_seconds": 8544.73683586187, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4199, "loss_box_reg": 0.06535263359546661, "loss_cls": 0.02621511183679104, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0030301553197205067, "loss_rpn_loc": 0.03586420789361, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.86083233249974, "total_loss": 0.14097663236316293, "validation_loss": 0.14196365930424992}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015456654999979946, "eta_seconds": 8526.088662350707, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022115090722165106, "fast_rcnn/fg_cls_accuracy": 0.9778849092778349, "iteration": 4219, "loss_box_reg": 0.054392239078879356, "loss_cls": 0.022306395694613457, "loss_rpn_cls": 0.002272343495860696, "loss_rpn_loc": 0.03396121598780155, "lr": 0.005, "roi_head/num_bg_samples": 385.625, "roi_head/num_fg_samples": 126.375, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8550791284997104, "total_loss": 0.11667074263095856}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014931448999959684, "eta_seconds": 8509.863917441864, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01743958153114187, "fast_rcnn/fg_cls_accuracy": 0.9825604184688581, "iteration": 4239, "loss_box_reg": 0.05129031836986542, "loss_cls": 0.01760159432888031, "loss_rpn_cls": 0.0029446481494233012, "loss_rpn_loc": 0.03069587703794241, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 175.375, "rpn/num_pos_anchors": 80.625, "time": 0.8826235694996285, "total_loss": 0.10483503562863916}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01954176850085787, "eta_seconds": 8496.111869716606, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.020697939712389382, "fast_rcnn/fg_cls_accuracy": 0.9793020602876106, "iteration": 4259, "loss_box_reg": 0.056341201066970825, "loss_cls": 0.02312588132917881, "loss_rpn_cls": 0.0025954004377126694, "loss_rpn_loc": 0.04303659126162529, "lr": 0.005, "roi_head/num_bg_samples": 400.125, "roi_head/num_fg_samples": 111.875, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8868610045010428, "total_loss": 0.1288284579059109}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012749520000397752, "eta_seconds": 8478.667845756609, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.02358640160891089, "fast_rcnn/fg_cls_accuracy": 0.9764135983910891, "iteration": 4279, "loss_box_reg": 0.07378086820244789, "loss_cls": 0.02591687999665737, "loss_rpn_cls": 0.0020061879768036306, "loss_rpn_loc": 0.035794125869870186, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8801597854990177, "total_loss": 0.14331023581326008}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013414688999546343, "eta_seconds": 8454.956621716445, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.025853207236842105, "fast_rcnn/fg_cls_accuracy": 0.974146792763158, "iteration": 4299, "loss_box_reg": 0.08156145364046097, "loss_cls": 0.027444886043667793, "loss_rpn_cls": 0.0019563272362574935, "loss_rpn_loc": 0.036992449313402176, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8439608360004058, "total_loss": 0.15209498221520334}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014210977000402636, "eta_seconds": 8435.753309788897, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024087717563291138, "fast_rcnn/fg_cls_accuracy": 0.9759122824367088, "iteration": 4319, "loss_box_reg": 0.06321131065487862, "loss_cls": 0.02684237528592348, "loss_rpn_cls": 0.0027903582667931914, "loss_rpn_loc": 0.039607759565114975, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8749667014999432, "total_loss": 0.13853128533810377}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014168770499964012, "eta_seconds": 8418.325867768881, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02317734089352923, "fast_rcnn/fg_cls_accuracy": 0.9768226591064708, "iteration": 4339, "loss_box_reg": 0.05184036307036877, "loss_cls": 0.0229664733633399, "loss_rpn_cls": 0.002469330560415983, "loss_rpn_loc": 0.03057936020195484, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8862034110006789, "total_loss": 0.11455292662139982}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011720945999513788, "eta_seconds": 8400.027674726469, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02158229590108401, "fast_rcnn/fg_cls_accuracy": 0.9784177040989159, "iteration": 4359, "loss_box_reg": 0.06309510581195354, "loss_cls": 0.02259633969515562, "loss_rpn_cls": 0.002194952219724655, "loss_rpn_loc": 0.03172831051051617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8717078200006654, "total_loss": 0.1274147952790372}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01361429050029983, "eta_seconds": 8383.61604435138, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4379, "loss_box_reg": 0.06567597761750221, "loss_cls": 0.02794388961046934, "loss_rpn_cls": 0.0024444819428026676, "loss_rpn_loc": 0.03958482854068279, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8592332269990948, "total_loss": 0.14897812146227807}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014307960500445915, "eta_seconds": 8366.704392926298, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02046009062391077, "fast_rcnn/fg_cls_accuracy": 0.9795399093760893, "iteration": 4399, "loss_box_reg": 0.06178067624568939, "loss_cls": 0.02468185406178236, "loss_rpn_cls": 0.0023401040816679597, "loss_rpn_loc": 0.037465330213308334, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8559774465002192, "total_loss": 0.13837072649039328}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012621712000509433, "eta_seconds": 8353.963404295257, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4419, "loss_box_reg": 0.06035963259637356, "loss_cls": 0.022992623038589954, "loss_rpn_cls": 0.002158885123208165, "loss_rpn_loc": 0.027208128944039345, "lr": 0.005, "roi_head/num_bg_samples": 384.875, "roi_head/num_fg_samples": 127.125, "rpn/num_neg_anchors": 170.0, "rpn/num_pos_anchors": 86.0, "time": 0.8953435434996209, "total_loss": 0.12231088278349489}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014090943000155676, "eta_seconds": 8335.499325341836, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4439, "loss_box_reg": 0.06730298697948456, "loss_cls": 0.023621671833097935, "loss_rpn_cls": 0.0021845350274816155, "loss_rpn_loc": 0.0352974496781826, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.25, "rpn/num_pos_anchors": 97.75, "time": 0.8675036810000165, "total_loss": 0.13669328414835036}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012706199500826187, "eta_seconds": 8316.448691135098, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01759963518722467, "fast_rcnn/fg_cls_accuracy": 0.9824003648127753, "iteration": 4459, "loss_box_reg": 0.06193057633936405, "loss_cls": 0.021720517426729202, "loss_rpn_cls": 0.0018856043461710215, "loss_rpn_loc": 0.03091004677116871, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8937260224993224, "total_loss": 0.1227074918569997}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013523801500014088, "eta_seconds": 8296.77059710459, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4479, "loss_box_reg": 0.0764407068490982, "loss_cls": 0.02567237988114357, "loss_rpn_cls": 0.001991047873161733, "loss_rpn_loc": 0.03321711905300617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8536981769993872, "total_loss": 0.14464460092131048}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 93.00705134353211, "bbox/AP50": 98.93110542393643, "bbox/AP75": 98.93110542393643, "bbox/APl": 93.71191938022734, "bbox/APm": 91.30748008841427, "bbox/APs": NaN, "data_time": 0.014672981499643356, "eta_seconds": 8276.31107170184, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 4499, "loss_box_reg": 0.06515203043818474, "loss_cls": 0.022937876172363758, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002306717331521213, "loss_rpn_loc": 0.03413390927016735, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.853352267500668, "total_loss": 0.12754546070937067, "validation_loss": 0.1391322108589738}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015802942000846087, "eta_seconds": 8253.11384120532, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4519, "loss_box_reg": 0.06294054538011551, "loss_cls": 0.023245316930115223, "loss_rpn_cls": 0.0022322835866361856, "loss_rpn_loc": 0.03262490779161453, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.852351106000242, "total_loss": 0.13475362805183977}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015078195000569394, "eta_seconds": 8230.85458721614, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4539, "loss_box_reg": 0.07160457968711853, "loss_cls": 0.024476973339915276, "loss_rpn_cls": 0.002147287130355835, "loss_rpn_loc": 0.03720744699239731, "lr": 0.005, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8453313475001778, "total_loss": 0.13857831864152104}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01636703949952789, "eta_seconds": 8213.274710050322, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.023623511904761904, "fast_rcnn/fg_cls_accuracy": 0.9763764880952381, "iteration": 4559, "loss_box_reg": 0.05875660479068756, "loss_cls": 0.023611723445355892, "loss_rpn_cls": 0.0022019054740667343, "loss_rpn_loc": 0.0357234925031662, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8867215840000426, "total_loss": 0.12488182925153524}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013644237999869802, "eta_seconds": 8196.326549555364, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.023111155063291138, "fast_rcnn/fg_cls_accuracy": 0.9768888449367088, "iteration": 4579, "loss_box_reg": 0.07077584601938725, "loss_cls": 0.03129696846008301, "loss_rpn_cls": 0.0026352115673944354, "loss_rpn_loc": 0.042789068073034286, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8891512034997504, "total_loss": 0.15943694883026183}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015678855999794905, "eta_seconds": 8178.476384830322, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 4599, "loss_box_reg": 0.06418749317526817, "loss_cls": 0.02551879547536373, "loss_rpn_cls": 0.0027105951448902488, "loss_rpn_loc": 0.03643552586436272, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8658532284998728, "total_loss": 0.13786764186806977}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013482987999850593, "eta_seconds": 8161.526309455352, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 4619, "loss_box_reg": 0.057235922664403915, "loss_cls": 0.027666328474879265, "loss_rpn_cls": 0.0028786591719835997, "loss_rpn_loc": 0.04224038124084473, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8686648815000808, "total_loss": 0.147602929151617}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014154113498989318, "eta_seconds": 8143.856864066196, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.018079134487803218, "fast_rcnn/fg_cls_accuracy": 0.9819208655121967, "iteration": 4639, "loss_box_reg": 0.06335645914077759, "loss_cls": 0.021422572433948517, "loss_rpn_cls": 0.002599337021820247, "loss_rpn_loc": 0.03555195406079292, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8944120790001762, "total_loss": 0.12154645670671016}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014369196500410908, "eta_seconds": 8126.457319436207, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.019082395186335404, "fast_rcnn/fg_cls_accuracy": 0.9809176048136645, "iteration": 4659, "loss_box_reg": 0.06376534700393677, "loss_cls": 0.02196851186454296, "loss_rpn_cls": 0.002237886539660394, "loss_rpn_loc": 0.033371662721037865, "lr": 0.005, "roi_head/num_bg_samples": 390.5, "roi_head/num_fg_samples": 121.5, "rpn/num_neg_anchors": 170.75, "rpn/num_pos_anchors": 85.25, "time": 0.8616984569998749, "total_loss": 0.1318136416375637}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015702468500421674, "eta_seconds": 8108.360181842967, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4679, "loss_box_reg": 0.07680578529834747, "loss_cls": 0.0263025164604187, "loss_rpn_cls": 0.002300129854120314, "loss_rpn_loc": 0.03531237877905369, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8752102919997924, "total_loss": 0.14133498328737915}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015292086000044947, "eta_seconds": 8090.584890122356, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019212366580787635, "fast_rcnn/fg_cls_accuracy": 0.9807876334192124, "iteration": 4699, "loss_box_reg": 0.0615016333758831, "loss_cls": 0.02258227299898863, "loss_rpn_cls": 0.0023130879271775484, "loss_rpn_loc": 0.03282614052295685, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8670793040009812, "total_loss": 0.1370764736784622}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014544139499776065, "eta_seconds": 8074.003555504269, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025486010174418604, "fast_rcnn/fg_cls_accuracy": 0.9745139898255815, "iteration": 4719, "loss_box_reg": 0.06041738949716091, "loss_cls": 0.02572917565703392, "loss_rpn_cls": 0.0029287008801475167, "loss_rpn_loc": 0.03309382498264313, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.25, "rpn/num_pos_anchors": 86.75, "time": 0.8711159704998863, "total_loss": 0.1269720789277926}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014847834499050805, "eta_seconds": 8059.29771503509, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025900135869565216, "fast_rcnn/fg_cls_accuracy": 0.9740998641304348, "iteration": 4739, "loss_box_reg": 0.0714801549911499, "loss_cls": 0.027188056148588657, "loss_rpn_cls": 0.0027070617070421576, "loss_rpn_loc": 0.03857620805501938, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8524405455000306, "total_loss": 0.14026663172990084}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01192657099909411, "eta_seconds": 8049.82534613164, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.02163327660891089, "fast_rcnn/fg_cls_accuracy": 0.9783667233910891, "iteration": 4759, "loss_box_reg": 0.06939147785305977, "loss_cls": 0.023606639355421066, "loss_rpn_cls": 0.0027515310794115067, "loss_rpn_loc": 0.03266059421002865, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8984915240007467, "total_loss": 0.1395235169911757}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014523527000164904, "eta_seconds": 8031.938204672058, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024965251150306747, "fast_rcnn/fg_cls_accuracy": 0.9750347488496933, "iteration": 4779, "loss_box_reg": 0.05777068808674812, "loss_cls": 0.023717678152024746, "loss_rpn_cls": 0.0021182504715397954, "loss_rpn_loc": 0.03053051419556141, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8574463155000558, "total_loss": 0.12371064920444041}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 92.83870913222127, "bbox/AP50": 98.89921854644973, "bbox/AP75": 98.89912728642817, "bbox/APl": 93.47087851814192, "bbox/APm": 91.12752205685403, "bbox/APs": NaN, "data_time": 0.012065286000506603, "eta_seconds": 8013.493554443942, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 4799, "loss_box_reg": 0.06852671504020691, "loss_cls": 0.024018924683332443, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0019923251820728183, "loss_rpn_loc": 0.031630223616957664, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8492078769995715, "total_loss": 0.12812982744071633, "validation_loss": 0.13883173140969918}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014361648500198498, "eta_seconds": 7997.974128998968, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022432739674118983, "fast_rcnn/fg_cls_accuracy": 0.9775672603258809, "iteration": 4819, "loss_box_reg": 0.06308107823133469, "loss_cls": 0.026020622812211514, "loss_rpn_cls": 0.0019791799131780863, "loss_rpn_loc": 0.028659190982580185, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8516874639999514, "total_loss": 0.12498592003248632}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01331285400010529, "eta_seconds": 7975.913023215084, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4839, "loss_box_reg": 0.0646427609026432, "loss_cls": 0.020347592420876026, "loss_rpn_cls": 0.001991485129110515, "loss_rpn_loc": 0.033798862248659134, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.125, "rpn/num_pos_anchors": 94.875, "time": 0.8548326489999454, "total_loss": 0.12101646140217781}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014856578499347961, "eta_seconds": 7952.287270900327, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022954705056179775, "fast_rcnn/fg_cls_accuracy": 0.9770452949438202, "iteration": 4859, "loss_box_reg": 0.06417588889598846, "loss_cls": 0.024928205646574497, "loss_rpn_cls": 0.0023953185882419348, "loss_rpn_loc": 0.0365652646869421, "lr": 0.005, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 153.75, "rpn/num_pos_anchors": 102.25, "time": 0.8659156755002186, "total_loss": 0.13248549425043166}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015284542999324913, "eta_seconds": 7934.0097605425235, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.026614481409001956, "fast_rcnn/fg_cls_accuracy": 0.9733855185909981, "iteration": 4879, "loss_box_reg": 0.05695581994950771, "loss_cls": 0.026949993334710598, "loss_rpn_cls": 0.0022568139247596264, "loss_rpn_loc": 0.031991198658943176, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8785490965001372, "total_loss": 0.13178676005918533}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012375500499729242, "eta_seconds": 7916.612523922542, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 4899, "loss_box_reg": 0.054332148283720016, "loss_cls": 0.025169258937239647, "loss_rpn_cls": 0.0021670913556590676, "loss_rpn_loc": 0.035927778109908104, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8605520105002142, "total_loss": 0.12185906816739589}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014561972000592505, "eta_seconds": 7899.583608123161, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.023943392839564794, "fast_rcnn/fg_cls_accuracy": 0.9760566071604352, "iteration": 4919, "loss_box_reg": 0.06230667047202587, "loss_cls": 0.024050562642514706, "loss_rpn_cls": 0.0027801310643553734, "loss_rpn_loc": 0.041868120431900024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.9079685364995385, "total_loss": 0.1367650660686195}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01624575099958747, "eta_seconds": 7882.62070578202, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019130335409405175, "fast_rcnn/fg_cls_accuracy": 0.9808696645905948, "iteration": 4939, "loss_box_reg": 0.054358769208192825, "loss_cls": 0.020983748137950897, "loss_rpn_cls": 0.002553392667323351, "loss_rpn_loc": 0.031057841144502163, "lr": 0.005, "roi_head/num_bg_samples": 394.625, "roi_head/num_fg_samples": 117.375, "rpn/num_neg_anchors": 172.125, "rpn/num_pos_anchors": 83.875, "time": 0.8572734889994535, "total_loss": 0.11413180537056178}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01480730749972281, "eta_seconds": 7863.060794523997, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4959, "loss_box_reg": 0.05059147626161575, "loss_cls": 0.023940959945321083, "loss_rpn_cls": 0.0020585795864462852, "loss_rpn_loc": 0.02574349381029606, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 173.625, "rpn/num_pos_anchors": 82.375, "time": 0.8511550149996765, "total_loss": 0.11159791017416865}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013298474000293936, "eta_seconds": 7845.386798191916, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.020877322635135136, "fast_rcnn/fg_cls_accuracy": 0.9791226773648649, "iteration": 4979, "loss_box_reg": 0.07002099975943565, "loss_cls": 0.023530988954007626, "loss_rpn_cls": 0.002559944987297058, "loss_rpn_loc": 0.03650126792490482, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.865666287500062, "total_loss": 0.12548251438420266}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013746322499173402, "eta_seconds": 7826.405837039674, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021134797199769052, "fast_rcnn/fg_cls_accuracy": 0.9788652028002309, "iteration": 4999, "loss_box_reg": 0.06474976241588593, "loss_cls": 0.021297583356499672, "loss_rpn_cls": 0.002553505590185523, "loss_rpn_loc": 0.03182519692927599, "lr": 0.005, "roi_head/num_bg_samples": 397.75, "roi_head/num_fg_samples": 114.25, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8724677414993494, "total_loss": 0.12312883127015084}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.017712214999846765, "eta_seconds": 7811.00530376116, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01583389037433155, "fast_rcnn/fg_cls_accuracy": 0.9841661096256684, "iteration": 5019, "loss_box_reg": 0.05722466856241226, "loss_cls": 0.02171662263572216, "loss_rpn_cls": 0.002134993555955589, "loss_rpn_loc": 0.029185540974140167, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8960107909997532, "total_loss": 0.12077607901301235}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011359848999745736, "eta_seconds": 7795.350431704812, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 5039, "loss_box_reg": 0.06120045855641365, "loss_cls": 0.022784790955483913, "loss_rpn_cls": 0.0019911217968910933, "loss_rpn_loc": 0.031012319959700108, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8855154500006392, "total_loss": 0.1210803515277803}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013461599499350996, "eta_seconds": 7777.597656692167, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02298001126126126, "fast_rcnn/fg_cls_accuracy": 0.9770199887387387, "iteration": 5059, "loss_box_reg": 0.05519508570432663, "loss_cls": 0.021881303749978542, "loss_rpn_cls": 0.0015915895928628743, "loss_rpn_loc": 0.028308226726949215, "lr": 0.005, "roi_head/num_bg_samples": 399.375, "roi_head/num_fg_samples": 112.625, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8794450919995143, "total_loss": 0.11374891316518188}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014579236500139814, "eta_seconds": 7759.600550817865, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01996970663265306, "fast_rcnn/fg_cls_accuracy": 0.9800302933673469, "iteration": 5079, "loss_box_reg": 0.06210821121931076, "loss_cls": 0.021420322358608246, "loss_rpn_cls": 0.002174493740312755, "loss_rpn_loc": 0.03592707775533199, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8945027979998486, "total_loss": 0.12663503305520862}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 93.27516183589476, "bbox/AP50": 98.92261668327345, "bbox/AP75": 98.92261668327345, "bbox/APl": 94.44478261656324, "bbox/APm": 91.0697213988469, "bbox/APs": NaN, "data_time": 0.012990881500627438, "eta_seconds": 7742.204293557877, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5099, "loss_box_reg": 0.06781146675348282, "loss_cls": 0.02289230190217495, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0022374700056388974, "loss_rpn_loc": 0.03365788422524929, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8827287754993449, "total_loss": 0.1412262988742441, "validation_loss": 0.1673684855862346}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015810367000085535, "eta_seconds": 7710.074186440191, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5119, "loss_box_reg": 0.06492654047906399, "loss_cls": 0.022693458944559097, "loss_rpn_cls": 0.0022741026477888227, "loss_rpn_loc": 0.031002508476376534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8662360599992098, "total_loss": 0.1364175053895451}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012367580000500311, "eta_seconds": 7694.085353412403, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5139, "loss_box_reg": 0.07034502178430557, "loss_cls": 0.024538532830774784, "loss_rpn_cls": 0.0024909517960622907, "loss_rpn_loc": 0.043401483446359634, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8675591125002029, "total_loss": 0.1635031864279881}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01278185899991513, "eta_seconds": 7676.719174982401, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021799902947443932, "fast_rcnn/fg_cls_accuracy": 0.9782000970525561, "iteration": 5159, "loss_box_reg": 0.06870999187231064, "loss_cls": 0.022335607558488846, "loss_rpn_cls": 0.0037398403510451317, "loss_rpn_loc": 0.03882879391312599, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 156.25, "rpn/num_pos_anchors": 99.75, "time": 0.8584405870005867, "total_loss": 0.14448954432737082}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014791360999879544, "eta_seconds": 7654.754357859041, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.021103493480725623, "fast_rcnn/fg_cls_accuracy": 0.9788965065192744, "iteration": 5179, "loss_box_reg": 0.062266405671834946, "loss_cls": 0.020777718164026737, "loss_rpn_cls": 0.0027317109052091837, "loss_rpn_loc": 0.03314981982111931, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.8586420629999338, "total_loss": 0.1260088358540088}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0178490789994612, "eta_seconds": 7639.841349945431, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.020830322300910538, "fast_rcnn/fg_cls_accuracy": 0.9791696776990895, "iteration": 5199, "loss_box_reg": 0.05128978006541729, "loss_cls": 0.020412922836840153, "loss_rpn_cls": 0.00241474446374923, "loss_rpn_loc": 0.032859938219189644, "lr": 0.005, "roi_head/num_bg_samples": 397.875, "roi_head/num_fg_samples": 114.125, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8652067134999015, "total_loss": 0.11148050939664245}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014005898499817704, "eta_seconds": 7625.286419499909, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5219, "loss_box_reg": 0.07316218316555023, "loss_cls": 0.02596404869109392, "loss_rpn_cls": 0.002091426053084433, "loss_rpn_loc": 0.02928838226944208, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8749200555002972, "total_loss": 0.13676173146814108}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014579200498701539, "eta_seconds": 7606.520547918383, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 5239, "loss_box_reg": 0.057390253990888596, "loss_cls": 0.025880426168441772, "loss_rpn_cls": 0.0021389470202848315, "loss_rpn_loc": 0.030492116697132587, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.25, "rpn/num_pos_anchors": 98.75, "time": 0.8600255340006697, "total_loss": 0.12460418161936104}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013745038500019291, "eta_seconds": 7588.538982743184, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5259, "loss_box_reg": 0.056663066148757935, "loss_cls": 0.023413637652993202, "loss_rpn_cls": 0.0019466887461021543, "loss_rpn_loc": 0.028949135914444923, "lr": 0.005, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8934628930010149, "total_loss": 0.11742609593784437}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013735102999817173, "eta_seconds": 7571.79154187835, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.021936217350746266, "fast_rcnn/fg_cls_accuracy": 0.9780637826492538, "iteration": 5279, "loss_box_reg": 0.053737033158540726, "loss_cls": 0.020394417457282543, "loss_rpn_cls": 0.0022291388595476747, "loss_rpn_loc": 0.03190678358078003, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.888264144000459, "total_loss": 0.10988271929090843}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014853118500468554, "eta_seconds": 7555.155925972386, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5299, "loss_box_reg": 0.06301657855510712, "loss_cls": 0.026609317399561405, "loss_rpn_cls": 0.0028848357032984495, "loss_rpn_loc": 0.03864687494933605, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8611808724999719, "total_loss": 0.1402190721128136}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.019291798500489676, "eta_seconds": 7538.447945299933, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5319, "loss_box_reg": 0.05684913694858551, "loss_cls": 0.023610541597008705, "loss_rpn_cls": 0.0021845183800905943, "loss_rpn_loc": 0.036675380542874336, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.883741806499529, "total_loss": 0.12332985328976065}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011460525499387586, "eta_seconds": 7517.054734584882, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5339, "loss_box_reg": 0.05149811878800392, "loss_cls": 0.021740407682955265, "loss_rpn_cls": 0.0019605476409196854, "loss_rpn_loc": 0.025657817721366882, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 175.875, "rpn/num_pos_anchors": 80.125, "time": 0.8436655450004764, "total_loss": 0.1036763918818906}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014291302999481559, "eta_seconds": 7497.301465048081, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01953339629120879, "fast_rcnn/fg_cls_accuracy": 0.9804666037087912, "iteration": 5359, "loss_box_reg": 0.08082463592290878, "loss_cls": 0.025784828700125217, "loss_rpn_cls": 0.0018990978132933378, "loss_rpn_loc": 0.028976663015782833, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8448055550006757, "total_loss": 0.13354162609903142}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012258945499524998, "eta_seconds": 7480.5243409162, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021518049568965518, "fast_rcnn/fg_cls_accuracy": 0.9784819504310345, "iteration": 5379, "loss_box_reg": 0.05838654190301895, "loss_cls": 0.022231215611100197, "loss_rpn_cls": 0.002136561321094632, "loss_rpn_loc": 0.02987600862979889, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8743206509998345, "total_loss": 0.12518500722944736}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 95.04890968998043, "bbox/AP50": 98.94553151126911, "bbox/AP75": 98.94553151126911, "bbox/APl": 96.15622781452859, "bbox/APm": 92.46222763709739, "bbox/APs": NaN, "data_time": 0.017025694999574625, "eta_seconds": 7462.112617529453, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5399, "loss_box_reg": 0.06437629461288452, "loss_cls": 0.021576158702373505, "loss_failed_to_get_better_count": 3.0, "loss_rpn_cls": 0.0018772268667817116, "loss_rpn_loc": 0.03226642683148384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.839295048999702, "total_loss": 0.12637696543242782, "validation_loss": 0.13707834863576526}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014937989500140247, "eta_seconds": 7443.814259008943, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02089447176395939, "fast_rcnn/fg_cls_accuracy": 0.9791055282360406, "iteration": 5419, "loss_box_reg": 0.0552052017301321, "loss_cls": 0.023376869969069958, "loss_rpn_cls": 0.002138674957677722, "loss_rpn_loc": 0.03407907858490944, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8698784409998552, "total_loss": 0.1193440561182797}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013423880000118515, "eta_seconds": 7427.8900407680385, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5439, "loss_box_reg": 0.05655006691813469, "loss_cls": 0.020559591241180897, "loss_rpn_cls": 0.002320499625056982, "loss_rpn_loc": 0.02890327014029026, "lr": 0.005, "roi_head/num_bg_samples": 391.0, "roi_head/num_fg_samples": 121.0, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.8760674590002964, "total_loss": 0.11336366704199463}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013994625999657728, "eta_seconds": 7409.115206408971, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02149487567204301, "fast_rcnn/fg_cls_accuracy": 0.978505124327957, "iteration": 5459, "loss_box_reg": 0.07386057823896408, "loss_cls": 0.026604370214045048, "loss_rpn_cls": 0.002588826813735068, "loss_rpn_loc": 0.03413362801074982, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8716043390004415, "total_loss": 0.13196638779481873}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015597055500620627, "eta_seconds": 7391.041927670588, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.020091788378455145, "fast_rcnn/fg_cls_accuracy": 0.9799082116215448, "iteration": 5479, "loss_box_reg": 0.07050042226910591, "loss_cls": 0.02474079467356205, "loss_rpn_cls": 0.0021399272372946143, "loss_rpn_loc": 0.03489230014383793, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.625, "rpn/num_pos_anchors": 98.375, "time": 0.8589253799991639, "total_loss": 0.13852309167850763}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013122772500537394, "eta_seconds": 7380.782008658164, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5499, "loss_box_reg": 0.05695950612425804, "loss_cls": 0.02017846144735813, "loss_rpn_cls": 0.0020662585739046335, "loss_rpn_loc": 0.032298844307661057, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8999541200000749, "total_loss": 0.12246235285419971}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.0167387419996885, "eta_seconds": 7363.790504257526, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.020821030161507912, "fast_rcnn/fg_cls_accuracy": 0.9791789698384921, "iteration": 5519, "loss_box_reg": 0.058595409616827965, "loss_cls": 0.02239445224404335, "loss_rpn_cls": 0.0017480264650657773, "loss_rpn_loc": 0.027675089426338673, "lr": 0.005, "roi_head/num_bg_samples": 392.75, "roi_head/num_fg_samples": 119.25, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8498236614996131, "total_loss": 0.1146762321004644}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013517774999854737, "eta_seconds": 7351.907261574616, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.025513980263157897, "fast_rcnn/fg_cls_accuracy": 0.9744860197368421, "iteration": 5539, "loss_box_reg": 0.05855027958750725, "loss_cls": 0.02038880344480276, "loss_rpn_cls": 0.0016652494668960571, "loss_rpn_loc": 0.032311808317899704, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 179.25, "rpn/num_pos_anchors": 76.75, "time": 0.8776390135008114, "total_loss": 0.1092486809939146}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.011882913499903225, "eta_seconds": 7331.50439608604, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.027322972074468085, "fast_rcnn/fg_cls_accuracy": 0.9726770279255319, "iteration": 5559, "loss_box_reg": 0.07120954245328903, "loss_cls": 0.02515412401407957, "loss_rpn_cls": 0.002385318512097001, "loss_rpn_loc": 0.05022135563194752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.5, "rpn/num_pos_anchors": 89.5, "time": 0.8847628325002006, "total_loss": 0.15015550452517346}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.014155146999655699, "eta_seconds": 7319.531056854045, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5579, "loss_box_reg": 0.05726276524364948, "loss_cls": 0.021695980802178383, "loss_rpn_cls": 0.003677344066090882, "loss_rpn_loc": 0.03555099293589592, "lr": 0.005, "roi_head/num_bg_samples": 389.375, "roi_head/num_fg_samples": 122.625, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.889490406000732, "total_loss": 0.1365722599439323}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015677778999815928, "eta_seconds": 7308.0039661134015, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01936768149882904, "fast_rcnn/fg_cls_accuracy": 0.9806323185011709, "iteration": 5599, "loss_box_reg": 0.05844062566757202, "loss_cls": 0.024206336587667465, "loss_rpn_cls": 0.0030458024702966213, "loss_rpn_loc": 0.029629665426909924, "lr": 0.005, "roi_head/num_bg_samples": 385.5, "roi_head/num_fg_samples": 126.5, "rpn/num_neg_anchors": 157.375, "rpn/num_pos_anchors": 98.625, "time": 0.8965334399999847, "total_loss": 0.12030651373788714}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.012024970000311441, "eta_seconds": 7291.668960754016, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0218780449610245, "fast_rcnn/fg_cls_accuracy": 0.9781219550389755, "iteration": 5619, "loss_box_reg": 0.05273590423166752, "loss_cls": 0.022803835570812225, "loss_rpn_cls": 0.002020141459070146, "loss_rpn_loc": 0.03192746266722679, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8826613595001618, "total_loss": 0.11135749111417681}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.01687377500002185, "eta_seconds": 7273.004645558488, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025233133963598945, "fast_rcnn/fg_cls_accuracy": 0.9747668660364011, "iteration": 5639, "loss_box_reg": 0.05719747394323349, "loss_cls": 0.021588620729744434, "loss_rpn_cls": 0.0022916418965905905, "loss_rpn_loc": 0.03184593468904495, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8682225524989917, "total_loss": 0.10914462374057621}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.015325386500990135, "eta_seconds": 7258.687283364799, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 5659, "loss_box_reg": 0.06096772849559784, "loss_cls": 0.023034741170704365, "loss_rpn_cls": 0.0021676926407963037, "loss_rpn_loc": 0.034716688096523285, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8767866954995043, "total_loss": 0.12500563205685467}

[07/29 19:56:15] detectron2 INFO: {"data_time": 0.013309132998983841, "eta_seconds": 7244.426740044826, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02398894699691992, "fast_rcnn/fg_cls_accuracy": 0.9760110530030801, "iteration": 5679, "loss_box_reg": 0.056637827306985855, "loss_cls": 0.023409683257341385, "loss_rpn_cls": 0.0018303157994523644, "loss_rpn_loc": 0.031725311651825905, "lr": 0.005, "roi_head/num_bg_samples": 389.75, "roi_head/num_fg_samples": 122.25, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.890535961999376, "total_loss": 0.11612003430491313}

[07/29 19:56:15] detectron2 INFO: {"bbox/AP": 94.76483093972008, "bbox/AP50": 98.95816960546958, "bbox/AP75": 98.95816613684278, "bbox/APl": 95.88726467497828, "bbox/APm": 91.9470155575016, "bbox/APs": NaN, "data_time": 0.015500677500313031, "eta_seconds": 7227.014345524829, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 5699, "loss_box_reg": 0.05493253283202648, "loss_cls": 0.023701573722064495, "loss_failed_to_get_better_count": 4.0, "loss_rpn_cls": 0.0020725850481539965, "loss_rpn_loc": 0.02556756976991892, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8545353485005762, "total_loss": 0.11283672647550702, "validation_loss": 0.13626214306693646}{"data_time": 0.013604358499833324, "eta_seconds": 7392.379508102773, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5719, "loss_box_reg": 0.05309678427875042, "loss_cls": 0.02268114034086466, "loss_rpn_cls": 0.0021833128994330764, "loss_rpn_loc": 0.02707052417099476, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 159.0, "rpn/num_pos_anchors": 97.0, "time": 0.8926916444997914, "total_loss": 0.11451471340842545}

[07/29 20:00:03] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 20:00:03] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 20:00:03] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 20:00:03] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 20:00:08] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 20:00:08] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 20:00:08] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 20:00:08] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 20:00:08] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 20:00:08] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:00:08] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 20:00:10] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:00:10] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 20:00:10] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:00:10] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 20:00:10] detectron2 INFO: {"data_time": 0.02939015450010629, "eta_seconds": 11686.352576468416, "fast_rcnn/cls_accuracy": 0.786865234375, "fast_rcnn/false_negative": 0.9394059153493115, "fast_rcnn/fg_cls_accuracy": 0.060594084650688426, "iteration": 19, "loss_box_reg": 0.12881449237465858, "loss_cls": 0.6249855756759644, "loss_rpn_cls": 0.7874684631824493, "loss_rpn_loc": 0.2691366523504257, "lr": 8.408750000000002e-05, "roi_head/num_bg_samples": 474.5, "roi_head/num_fg_samples": 37.5, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8358738699998867, "total_loss": 1.9008187465369701}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.030504754000048706, "eta_seconds": 12071.132336078655, "fast_rcnn/cls_accuracy": 0.82177734375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 39, "loss_box_reg": 0.5570397675037384, "loss_cls": 0.4548873007297516, "loss_rpn_cls": 0.18511445075273514, "loss_rpn_loc": 0.21736495941877365, "lr": 0.00016733750000000002, "roi_head/num_bg_samples": 420.75, "roi_head/num_fg_samples": 91.25, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.873537560999921, "total_loss": 1.6033400520682335}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.018182287000172437, "eta_seconds": 12211.82605749436, "fast_rcnn/cls_accuracy": 0.8115234375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 59, "loss_box_reg": 0.6337968111038208, "loss_cls": 0.4483332186937332, "loss_rpn_cls": 0.11832546815276146, "loss_rpn_loc": 0.1953253597021103, "lr": 0.0002505875, "roi_head/num_bg_samples": 415.5, "roi_head/num_fg_samples": 96.5, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8913536900001873, "total_loss": 1.436222393065691}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01889697700016768, "eta_seconds": 12284.491105073626, "fast_rcnn/cls_accuracy": 0.78271484375, "fast_rcnn/false_negative": 1.0, "fast_rcnn/fg_cls_accuracy": 0.0, "iteration": 79, "loss_box_reg": 0.7354804873466492, "loss_cls": 0.45420069992542267, "loss_rpn_cls": 0.07250338047742844, "loss_rpn_loc": 0.16615113615989685, "lr": 0.0003338375, "roi_head/num_bg_samples": 400.75, "roi_head/num_fg_samples": 111.25, "rpn/num_neg_anchors": 153.625, "rpn/num_pos_anchors": 102.375, "time": 0.8865976399999909, "total_loss": 1.4724470991641283}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.018002271499881317, "eta_seconds": 12308.280497507018, "fast_rcnn/cls_accuracy": 0.775634765625, "fast_rcnn/false_negative": 0.9627708420293705, "fast_rcnn/fg_cls_accuracy": 0.037229157970629534, "iteration": 99, "loss_box_reg": 0.8062326312065125, "loss_cls": 0.42708392441272736, "loss_rpn_cls": 0.05313627049326897, "loss_rpn_loc": 0.12421421706676483, "lr": 0.0004170875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.89259754349996, "total_loss": 1.4219505097717047}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013190883500101336, "eta_seconds": 12300.492148384357, "fast_rcnn/cls_accuracy": 0.836669921875, "fast_rcnn/false_negative": 0.6792227649825398, "fast_rcnn/fg_cls_accuracy": 0.32077723501746025, "iteration": 119, "loss_box_reg": 0.6585336923599243, "loss_cls": 0.34507088363170624, "loss_rpn_cls": 0.03669000416994095, "loss_rpn_loc": 0.11788284033536911, "lr": 0.0005003375000000001, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8962868920000346, "total_loss": 1.1734376233071089}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01545518400007495, "eta_seconds": 12287.084732144256, "fast_rcnn/cls_accuracy": 0.884765625, "fast_rcnn/false_negative": 0.30859375, "fast_rcnn/fg_cls_accuracy": 0.69140625, "iteration": 139, "loss_box_reg": 0.5096877813339233, "loss_cls": 0.26354336738586426, "loss_rpn_cls": 0.018867461010813713, "loss_rpn_loc": 0.08101745694875717, "lr": 0.0005835875000000001, "roi_head/num_bg_samples": 388.125, "roi_head/num_fg_samples": 123.875, "rpn/num_neg_anchors": 172.0, "rpn/num_pos_anchors": 84.0, "time": 0.887171862500054, "total_loss": 0.8601078088395298}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01646772100002636, "eta_seconds": 12307.382867401684, "fast_rcnn/cls_accuracy": 0.919921875, "fast_rcnn/false_negative": 0.17972995923913043, "fast_rcnn/fg_cls_accuracy": 0.8202700407608696, "iteration": 159, "loss_box_reg": 0.3034415692090988, "loss_cls": 0.20181019604206085, "loss_rpn_cls": 0.014326298609375954, "loss_rpn_loc": 0.07085645943880081, "lr": 0.0006668375, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.9058895885000311, "total_loss": 0.5821873405948281}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015896259000328428, "eta_seconds": 12263.543236107209, "fast_rcnn/cls_accuracy": 0.915283203125, "fast_rcnn/false_negative": 0.19735852925095682, "fast_rcnn/fg_cls_accuracy": 0.8026414707490432, "iteration": 179, "loss_box_reg": 0.2435252144932747, "loss_cls": 0.19679177552461624, "loss_rpn_cls": 0.015311155002564192, "loss_rpn_loc": 0.06794760376214981, "lr": 0.0007500875, "roi_head/num_bg_samples": 395.75, "roi_head/num_fg_samples": 116.25, "rpn/num_neg_anchors": 174.0, "rpn/num_pos_anchors": 82.0, "time": 0.8723723070002052, "total_loss": 0.5317779292818159}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012299204000100872, "eta_seconds": 12224.272998899309, "fast_rcnn/cls_accuracy": 0.932861328125, "fast_rcnn/false_negative": 0.19618584485587062, "fast_rcnn/fg_cls_accuracy": 0.8038141551441293, "iteration": 199, "loss_box_reg": 0.22756582498550415, "loss_cls": 0.16675635427236557, "loss_rpn_cls": 0.009464774280786514, "loss_rpn_loc": 0.0724685788154602, "lr": 0.0008333375, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8750523474998317, "total_loss": 0.4794214074499905}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014126985500070077, "eta_seconds": 12202.029604787009, "fast_rcnn/cls_accuracy": 0.950927734375, "fast_rcnn/false_negative": 0.12814344152360516, "fast_rcnn/fg_cls_accuracy": 0.8718565584763949, "iteration": 219, "loss_box_reg": 0.21683961898088455, "loss_cls": 0.1309489831328392, "loss_rpn_cls": 0.00984030868858099, "loss_rpn_loc": 0.06770532205700874, "lr": 0.0009165875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8745993960001215, "total_loss": 0.4421173296868801}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014485199499858936, "eta_seconds": 12151.444937739672, "fast_rcnn/cls_accuracy": 0.95654296875, "fast_rcnn/false_negative": 0.1064453125, "fast_rcnn/fg_cls_accuracy": 0.8935546875, "iteration": 239, "loss_box_reg": 0.17889448255300522, "loss_cls": 0.11397441476583481, "loss_rpn_cls": 0.010145330801606178, "loss_rpn_loc": 0.05544925481081009, "lr": 0.0009998375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8600121944998591, "total_loss": 0.3471206361427903}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.019302317499978017, "eta_seconds": 12080.389871734214, "fast_rcnn/cls_accuracy": 0.9541015625, "fast_rcnn/false_negative": 0.12636323851203501, "fast_rcnn/fg_cls_accuracy": 0.873636761487965, "iteration": 259, "loss_box_reg": 0.18179909139871597, "loss_cls": 0.1189894787967205, "loss_rpn_cls": 0.007479577325284481, "loss_rpn_loc": 0.061658645048737526, "lr": 0.0010830875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.855434207999906, "total_loss": 0.36115485936170444}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013283666000006633, "eta_seconds": 12055.122413197958, "fast_rcnn/cls_accuracy": 0.926025390625, "fast_rcnn/false_negative": 0.162109375, "fast_rcnn/fg_cls_accuracy": 0.837890625, "iteration": 279, "loss_box_reg": 0.21112839132547379, "loss_cls": 0.18035943061113358, "loss_rpn_cls": 0.014031817205250263, "loss_rpn_loc": 0.07702159136533737, "lr": 0.0011663375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8750548134999008, "total_loss": 0.5035657323896885}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 83.41258386889328, "bbox/AP50": 98.38983659105097, "bbox/AP75": 97.104577022374, "bbox/APl": 84.48451837716055, "bbox/APm": 82.36344665876535, "bbox/APs": NaN, "data_time": 0.016146144499771253, "eta_seconds": 12043.127799364234, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 299, "loss_box_reg": 0.16537624597549438, "loss_cls": 0.11342864856123924, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.007433959748595953, "loss_rpn_loc": 0.0554153174161911, "lr": 0.0012495875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8814841179998893, "total_loss": 0.33745233179070055, "validation_loss": 0.32906902715045755}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016304798999954073, "eta_seconds": 12019.978845197964, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.076171875, "fast_rcnn/fg_cls_accuracy": 0.923828125, "iteration": 319, "loss_box_reg": 0.15682829916477203, "loss_cls": 0.0946701243519783, "loss_rpn_cls": 0.0038296080892905593, "loss_rpn_loc": 0.06303796917200089, "lr": 0.0013328374999999999, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 155.125, "rpn/num_pos_anchors": 100.875, "time": 0.8458358415000475, "total_loss": 0.31777258962392807}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01102276699975846, "eta_seconds": 12006.686827094072, "fast_rcnn/cls_accuracy": 0.963134765625, "fast_rcnn/false_negative": 0.10078125, "fast_rcnn/fg_cls_accuracy": 0.89921875, "iteration": 339, "loss_box_reg": 0.15902839601039886, "loss_cls": 0.09758839383721352, "loss_rpn_cls": 0.005238221259787679, "loss_rpn_loc": 0.062006376683712006, "lr": 0.0014160874999999999, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.883200966000004, "total_loss": 0.3246980574913323}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.010798721999890404, "eta_seconds": 11976.53362377627, "fast_rcnn/cls_accuracy": 0.95947265625, "fast_rcnn/false_negative": 0.11650020879732739, "fast_rcnn/fg_cls_accuracy": 0.8834997912026725, "iteration": 359, "loss_box_reg": 0.1674002781510353, "loss_cls": 0.11093494668602943, "loss_rpn_cls": 0.009214169345796108, "loss_rpn_loc": 0.05432415381073952, "lr": 0.0014993375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.875, "rpn/num_pos_anchors": 100.125, "time": 0.8555542895001054, "total_loss": 0.34753162460401654}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015279147000001103, "eta_seconds": 11946.566867246482, "fast_rcnn/cls_accuracy": 0.967041015625, "fast_rcnn/false_negative": 0.0796565594059406, "fast_rcnn/fg_cls_accuracy": 0.9203434405940594, "iteration": 379, "loss_box_reg": 0.14857570081949234, "loss_cls": 0.08996423333883286, "loss_rpn_cls": 0.006297955987975001, "loss_rpn_loc": 0.05611295625567436, "lr": 0.0015825875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8612688080002044, "total_loss": 0.3035198914585635}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012088851499356679, "eta_seconds": 11909.025623667902, "fast_rcnn/cls_accuracy": 0.966064453125, "fast_rcnn/false_negative": 0.0810546875, "fast_rcnn/fg_cls_accuracy": 0.9189453125, "iteration": 399, "loss_box_reg": 0.14267047494649887, "loss_cls": 0.08620045706629753, "loss_rpn_cls": 0.003031725063920021, "loss_rpn_loc": 0.05911160446703434, "lr": 0.0016658375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.5, "rpn/num_pos_anchors": 91.5, "time": 0.8536961670001801, "total_loss": 0.30017199623398483}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012189826500161871, "eta_seconds": 11883.833854455119, "fast_rcnn/cls_accuracy": 0.971923828125, "fast_rcnn/false_negative": 0.0693359375, "fast_rcnn/fg_cls_accuracy": 0.9306640625, "iteration": 419, "loss_box_reg": 0.13817040622234344, "loss_cls": 0.07225135341286659, "loss_rpn_cls": 0.004466069862246513, "loss_rpn_loc": 0.0624714121222496, "lr": 0.0017490875, "roi_head/num_bg_samples": 395.625, "roi_head/num_fg_samples": 116.375, "rpn/num_neg_anchors": 170.25, "rpn/num_pos_anchors": 85.75, "time": 0.853337961500074, "total_loss": 0.2805070823524147}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011904372000117291, "eta_seconds": 11840.29540779574, "fast_rcnn/cls_accuracy": 0.9677734375, "fast_rcnn/false_negative": 0.07421875, "fast_rcnn/fg_cls_accuracy": 0.92578125, "iteration": 439, "loss_box_reg": 0.1460084617137909, "loss_cls": 0.08459053561091423, "loss_rpn_cls": 0.004542296519502997, "loss_rpn_loc": 0.06430486589670181, "lr": 0.0018323375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.75, "rpn/num_pos_anchors": 88.25, "time": 0.8255171649998374, "total_loss": 0.28996874997392297}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01606286150035885, "eta_seconds": 11815.596436706812, "fast_rcnn/cls_accuracy": 0.972412109375, "fast_rcnn/false_negative": 0.06473777326233184, "fast_rcnn/fg_cls_accuracy": 0.9352622267376682, "iteration": 459, "loss_box_reg": 0.1321180760860443, "loss_cls": 0.06950072944164276, "loss_rpn_cls": 0.004573044599965215, "loss_rpn_loc": 0.06276549398899078, "lr": 0.0019155875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8637742569994771, "total_loss": 0.29605477419681847}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012803132500266656, "eta_seconds": 11785.865274366573, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.07613281250000001, "fast_rcnn/fg_cls_accuracy": 0.9238671875, "iteration": 479, "loss_box_reg": 0.1410418078303337, "loss_cls": 0.0620583388954401, "loss_rpn_cls": 0.01461251126602292, "loss_rpn_loc": 0.059028103947639465, "lr": 0.0019988375, "roi_head/num_bg_samples": 399.625, "roi_head/num_fg_samples": 112.375, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.868328073000157, "total_loss": 0.3025325112976134}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015173395499914477, "eta_seconds": 11766.056904469786, "fast_rcnn/cls_accuracy": 0.967529296875, "fast_rcnn/false_negative": 0.0791015625, "fast_rcnn/fg_cls_accuracy": 0.9208984375, "iteration": 499, "loss_box_reg": 0.14217590540647507, "loss_cls": 0.08436384052038193, "loss_rpn_cls": 0.005042934790253639, "loss_rpn_loc": 0.054758913815021515, "lr": 0.0020820875, "roi_head/num_bg_samples": 388.75, "roi_head/num_fg_samples": 123.25, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.869340422500045, "total_loss": 0.2905305549502373}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011143657999582501, "eta_seconds": 11748.62700015978, "fast_rcnn/cls_accuracy": 0.963623046875, "fast_rcnn/false_negative": 0.09221540178571429, "fast_rcnn/fg_cls_accuracy": 0.9077845982142857, "iteration": 519, "loss_box_reg": 0.14154227823019028, "loss_cls": 0.08936139941215515, "loss_rpn_cls": 0.0032708962680771947, "loss_rpn_loc": 0.06133125722408295, "lr": 0.0021653375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8633433045001766, "total_loss": 0.2882083682343364}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014494807000119181, "eta_seconds": 11733.565006896564, "fast_rcnn/cls_accuracy": 0.9521484375, "fast_rcnn/false_negative": 0.095703125, "fast_rcnn/fg_cls_accuracy": 0.904296875, "iteration": 539, "loss_box_reg": 0.16541259735822678, "loss_cls": 0.12462004274129868, "loss_rpn_cls": 0.005535591393709183, "loss_rpn_loc": 0.06912935525178909, "lr": 0.0022485875, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8846403235002072, "total_loss": 0.36126803897786885}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012273919000563183, "eta_seconds": 11735.521759175765, "fast_rcnn/cls_accuracy": 0.95849609375, "fast_rcnn/false_negative": 0.0980273705244081, "fast_rcnn/fg_cls_accuracy": 0.9019726294755919, "iteration": 559, "loss_box_reg": 0.14862347394227982, "loss_cls": 0.10806813836097717, "loss_rpn_cls": 0.006631288910284638, "loss_rpn_loc": 0.0664207711815834, "lr": 0.0023318375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8845762955002101, "total_loss": 0.3488547676242888}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0118424329998561, "eta_seconds": 11702.231173056018, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.056640625, "fast_rcnn/fg_cls_accuracy": 0.943359375, "iteration": 579, "loss_box_reg": 0.1253226026892662, "loss_cls": 0.07414546608924866, "loss_rpn_cls": 0.008195447502657771, "loss_rpn_loc": 0.05210341885685921, "lr": 0.0024150875, "roi_head/num_bg_samples": 394.75, "roi_head/num_fg_samples": 117.25, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8636824619998151, "total_loss": 0.2699383229482919}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 80.35829873197507, "bbox/AP50": 98.58295968097553, "bbox/AP75": 97.43300081767086, "bbox/APl": 78.67308581650998, "bbox/APm": 84.08251405024096, "bbox/APs": NaN, "data_time": 0.013514647000192781, "eta_seconds": 11678.932228370002, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 599, "loss_box_reg": 0.13238591700792313, "loss_cls": 0.06162050738930702, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004966367734596133, "loss_rpn_loc": 0.05982688069343567, "lr": 0.0024983375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8484068394996029, "total_loss": 0.2661393281305209, "validation_loss": 0.3150369518328001}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0135088239999277, "eta_seconds": 11657.219651099671, "fast_rcnn/cls_accuracy": 0.96826171875, "fast_rcnn/false_negative": 0.07183139162719242, "fast_rcnn/fg_cls_accuracy": 0.9281686083728076, "iteration": 619, "loss_box_reg": 0.13828347623348236, "loss_cls": 0.08472422882914543, "loss_rpn_cls": 0.006264761555939913, "loss_rpn_loc": 0.06929788365960121, "lr": 0.0025815875, "roi_head/num_bg_samples": 397.25, "roi_head/num_fg_samples": 114.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8460839750000559, "total_loss": 0.30213607591576874}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014871884000058344, "eta_seconds": 11637.040077188369, "fast_rcnn/cls_accuracy": 0.9736328125, "fast_rcnn/false_negative": 0.06561053240740741, "fast_rcnn/fg_cls_accuracy": 0.9343894675925926, "iteration": 639, "loss_box_reg": 0.11789693310856819, "loss_cls": 0.07285590097308159, "loss_rpn_cls": 0.0053652566857635975, "loss_rpn_loc": 0.05852055549621582, "lr": 0.0026648374999999995, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8505885125000532, "total_loss": 0.26677903556264937}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014161194500047714, "eta_seconds": 11606.65481794033, "fast_rcnn/cls_accuracy": 0.973388671875, "fast_rcnn/false_negative": 0.06114628335798224, "fast_rcnn/fg_cls_accuracy": 0.9388537166420178, "iteration": 659, "loss_box_reg": 0.11722910404205322, "loss_cls": 0.06616359204053879, "loss_rpn_cls": 0.0080324187874794, "loss_rpn_loc": 0.07135805487632751, "lr": 0.0027480875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8602919130003102, "total_loss": 0.2675582447554916}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014358993000314513, "eta_seconds": 11589.254840700332, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05121358797635958, "fast_rcnn/fg_cls_accuracy": 0.9487864120236404, "iteration": 679, "loss_box_reg": 0.10997515171766281, "loss_cls": 0.05781390517950058, "loss_rpn_cls": 0.004788712132722139, "loss_rpn_loc": 0.055166978389024734, "lr": 0.0028313374999999995, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.869146297000043, "total_loss": 0.23458211263641715}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012000708500181645, "eta_seconds": 11582.719539248686, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.0615234375, "fast_rcnn/fg_cls_accuracy": 0.9384765625, "iteration": 699, "loss_box_reg": 0.129492849111557, "loss_cls": 0.07111507281661034, "loss_rpn_cls": 0.004493537941016257, "loss_rpn_loc": 0.05584186688065529, "lr": 0.0029145875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8904892555001425, "total_loss": 0.27537386934272945}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0145140229997196, "eta_seconds": 11571.990401450112, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 719, "loss_box_reg": 0.11887574195861816, "loss_cls": 0.06795364245772362, "loss_rpn_cls": 0.0033925181487575173, "loss_rpn_loc": 0.055030809715390205, "lr": 0.0029978374999999995, "roi_head/num_bg_samples": 390.0, "roi_head/num_fg_samples": 122.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8808223520004503, "total_loss": 0.24797416175715625}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01307606799991845, "eta_seconds": 11554.56401729011, "fast_rcnn/cls_accuracy": 0.97412109375, "fast_rcnn/false_negative": 0.05908962111398963, "fast_rcnn/fg_cls_accuracy": 0.9409103788860104, "iteration": 739, "loss_box_reg": 0.1245066188275814, "loss_cls": 0.06823312118649483, "loss_rpn_cls": 0.004734032321721315, "loss_rpn_loc": 0.05789220705628395, "lr": 0.0030810875, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8724708105005448, "total_loss": 0.25583526177797467}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012447178500224254, "eta_seconds": 11532.523588208307, "fast_rcnn/cls_accuracy": 0.97314453125, "fast_rcnn/false_negative": 0.06630535710901822, "fast_rcnn/fg_cls_accuracy": 0.9336946428909818, "iteration": 759, "loss_box_reg": 0.11907549947500229, "loss_cls": 0.06540242955088615, "loss_rpn_cls": 0.0041093959007412195, "loss_rpn_loc": 0.06332714855670929, "lr": 0.0031643374999999994, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8468276620001234, "total_loss": 0.24481784249655902}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01187162200039893, "eta_seconds": 11519.711248970103, "fast_rcnn/cls_accuracy": 0.9765625, "fast_rcnn/false_negative": 0.0557175727739726, "fast_rcnn/fg_cls_accuracy": 0.9442824272260274, "iteration": 779, "loss_box_reg": 0.12456638365983963, "loss_cls": 0.061244869604706764, "loss_rpn_cls": 0.0037338774418458343, "loss_rpn_loc": 0.0596346165984869, "lr": 0.0032475875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8824129194995294, "total_loss": 0.25049503380432725}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012807592999706685, "eta_seconds": 11502.314342643522, "fast_rcnn/cls_accuracy": 0.97509765625, "fast_rcnn/false_negative": 0.05575284090909091, "fast_rcnn/fg_cls_accuracy": 0.9442471590909092, "iteration": 799, "loss_box_reg": 0.11877157166600227, "loss_cls": 0.06167830340564251, "loss_rpn_cls": 0.004014276899397373, "loss_rpn_loc": 0.055346591398119926, "lr": 0.0033308375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 174.125, "rpn/num_pos_anchors": 81.875, "time": 0.877514559500014, "total_loss": 0.25743075169157237}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015489027000057831, "eta_seconds": 11491.371008443351, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.054571472772277224, "fast_rcnn/fg_cls_accuracy": 0.9454285272277227, "iteration": 819, "loss_box_reg": 0.11021328344941139, "loss_cls": 0.05502988211810589, "loss_rpn_cls": 0.00427356525324285, "loss_rpn_loc": 0.07074590399861336, "lr": 0.0034140875, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 155.25, "rpn/num_pos_anchors": 100.75, "time": 0.8855874439996114, "total_loss": 0.2403978342190385}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01506244800020795, "eta_seconds": 11468.434556696986, "fast_rcnn/cls_accuracy": 0.975341796875, "fast_rcnn/false_negative": 0.05666498370181406, "fast_rcnn/fg_cls_accuracy": 0.943335016298186, "iteration": 839, "loss_box_reg": 0.11180135607719421, "loss_cls": 0.061304209753870964, "loss_rpn_cls": 0.004914319375529885, "loss_rpn_loc": 0.05708741024136543, "lr": 0.0034973375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8517343014996186, "total_loss": 0.23385070823132992}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013418384000033257, "eta_seconds": 11449.058482766935, "fast_rcnn/cls_accuracy": 0.97607421875, "fast_rcnn/false_negative": 0.05544679449648712, "fast_rcnn/fg_cls_accuracy": 0.9445532055035128, "iteration": 859, "loss_box_reg": 0.11569477990269661, "loss_cls": 0.06229258514940739, "loss_rpn_cls": 0.0068636140786111355, "loss_rpn_loc": 0.0628298930823803, "lr": 0.0035805875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8614465094997286, "total_loss": 0.25518918549641967}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014103679000072589, "eta_seconds": 11433.578741616986, "fast_rcnn/cls_accuracy": 0.972900390625, "fast_rcnn/false_negative": 0.0712890625, "fast_rcnn/fg_cls_accuracy": 0.9287109375, "iteration": 879, "loss_box_reg": 0.12260067090392113, "loss_cls": 0.06857239827513695, "loss_rpn_cls": 0.006648323964327574, "loss_rpn_loc": 0.07462092489004135, "lr": 0.0036638375000000003, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8772594430001845, "total_loss": 0.27113425778225064}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 88.2900801425749, "bbox/AP50": 98.81273878550125, "bbox/AP75": 98.7412826713019, "bbox/APl": 88.86570946975849, "bbox/APm": 87.34035917496533, "bbox/APs": NaN, "data_time": 0.02003246050026064, "eta_seconds": 11431.046205987095, "fast_rcnn/cls_accuracy": 0.9716796875, "fast_rcnn/false_negative": 0.0859375, "fast_rcnn/fg_cls_accuracy": 0.9140625, "iteration": 899, "loss_box_reg": 0.12612708657979965, "loss_cls": 0.07696450874209404, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.00522907474078238, "loss_rpn_loc": 0.05966793745756149, "lr": 0.0037470875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8938876710003569, "total_loss": 0.27521815593354404, "validation_loss": 0.27454329396213306}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01586997549975422, "eta_seconds": 11409.577102119452, "fast_rcnn/cls_accuracy": 0.975830078125, "fast_rcnn/false_negative": 0.05459741876310273, "fast_rcnn/fg_cls_accuracy": 0.9454025812368974, "iteration": 919, "loss_box_reg": 0.11372284591197968, "loss_cls": 0.0605704840272665, "loss_rpn_cls": 0.004562443122267723, "loss_rpn_loc": 0.05959376133978367, "lr": 0.0038303375000000002, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.875, "rpn/num_pos_anchors": 95.125, "time": 0.8720150914996339, "total_loss": 0.24228383065201342}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.010550028499892505, "eta_seconds": 11386.753413343344, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.04433528791056139, "fast_rcnn/fg_cls_accuracy": 0.9556647120894386, "iteration": 939, "loss_box_reg": 0.10631585493683815, "loss_cls": 0.05721595883369446, "loss_rpn_cls": 0.0026982673443853855, "loss_rpn_loc": 0.0547914057970047, "lr": 0.0039135875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.8540105269999003, "total_loss": 0.21563802321907133}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01612528400028168, "eta_seconds": 11371.228795083965, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.0498046875, "fast_rcnn/fg_cls_accuracy": 0.9501953125, "iteration": 959, "loss_box_reg": 0.1004297025501728, "loss_cls": 0.05342039093375206, "loss_rpn_cls": 0.00477422121912241, "loss_rpn_loc": 0.048561520874500275, "lr": 0.0039968375, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8844300150003619, "total_loss": 0.2256989327725023}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012863743500020064, "eta_seconds": 11351.880881643341, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04565972222222223, "fast_rcnn/fg_cls_accuracy": 0.9543402777777779, "iteration": 979, "loss_box_reg": 0.11157135292887688, "loss_cls": 0.04482796974480152, "loss_rpn_cls": 0.0065105147659778595, "loss_rpn_loc": 0.06633155420422554, "lr": 0.0040800875, "roi_head/num_bg_samples": 390.375, "roi_head/num_fg_samples": 121.625, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.8682084174997726, "total_loss": 0.23189347283914685}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01232722449958601, "eta_seconds": 11337.924521956742, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.060546875, "fast_rcnn/fg_cls_accuracy": 0.939453125, "iteration": 999, "loss_box_reg": 0.11941342800855637, "loss_cls": 0.0730251595377922, "loss_rpn_cls": 0.0052137651946395636, "loss_rpn_loc": 0.06160200759768486, "lr": 0.0041633375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8827806014996895, "total_loss": 0.25915474398061633}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013164806000077078, "eta_seconds": 11329.957124608949, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.05002973894032922, "fast_rcnn/fg_cls_accuracy": 0.9499702610596708, "iteration": 1019, "loss_box_reg": 0.1171100102365017, "loss_cls": 0.05176871083676815, "loss_rpn_cls": 0.003309119725599885, "loss_rpn_loc": 0.051280347630381584, "lr": 0.0042465875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8771893994999118, "total_loss": 0.2285827926825732}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013883824499771436, "eta_seconds": 11304.91008489949, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.05069182981927711, "fast_rcnn/fg_cls_accuracy": 0.9493081701807229, "iteration": 1039, "loss_box_reg": 0.11066009849309921, "loss_cls": 0.05315266735851765, "loss_rpn_cls": 0.006170068867504597, "loss_rpn_loc": 0.05377185717225075, "lr": 0.0043298375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.0, "rpn/num_pos_anchors": 94.0, "time": 0.8545718394998403, "total_loss": 0.23264297121204436}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015017880499726743, "eta_seconds": 11280.984392763408, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04588942560731704, "fast_rcnn/fg_cls_accuracy": 0.954110574392683, "iteration": 1059, "loss_box_reg": 0.10310346260666847, "loss_cls": 0.044577477499842644, "loss_rpn_cls": 0.004134953022003174, "loss_rpn_loc": 0.051423339173197746, "lr": 0.0044130875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8577394704998369, "total_loss": 0.2035250838380307}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016613606499959133, "eta_seconds": 11252.08472195471, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.045861783679624665, "fast_rcnn/fg_cls_accuracy": 0.9541382163203753, "iteration": 1079, "loss_box_reg": 0.11094773188233376, "loss_cls": 0.05111839435994625, "loss_rpn_cls": 0.003501012222841382, "loss_rpn_loc": 0.052145302295684814, "lr": 0.0044963375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.862094334500398, "total_loss": 0.22528961999341846}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016227953500219883, "eta_seconds": 11234.6679821947, "fast_rcnn/cls_accuracy": 0.981201171875, "fast_rcnn/false_negative": 0.04735054347826087, "fast_rcnn/fg_cls_accuracy": 0.9526494565217392, "iteration": 1099, "loss_box_reg": 0.1110970675945282, "loss_cls": 0.0483903419226408, "loss_rpn_cls": 0.0037894557463005185, "loss_rpn_loc": 0.05519515089690685, "lr": 0.0045795875, "roi_head/num_bg_samples": 395.0, "roi_head/num_fg_samples": 117.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8814690505000726, "total_loss": 0.23251396394334733}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0157821050001985, "eta_seconds": 11194.459053585524, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04696308210784314, "fast_rcnn/fg_cls_accuracy": 0.9530369178921569, "iteration": 1119, "loss_box_reg": 0.11347878724336624, "loss_cls": 0.05304034985601902, "loss_rpn_cls": 0.0026472604367882013, "loss_rpn_loc": 0.05065883509814739, "lr": 0.0046628375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8446180029995958, "total_loss": 0.22228291805367917}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012794290499641647, "eta_seconds": 11174.544137118066, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04151621586134454, "fast_rcnn/fg_cls_accuracy": 0.9584837841386555, "iteration": 1139, "loss_box_reg": 0.11042098328471184, "loss_cls": 0.04875275492668152, "loss_rpn_cls": 0.0053986890707165, "loss_rpn_loc": 0.06635331735014915, "lr": 0.0047460875, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8467612080003164, "total_loss": 0.24455570348072797}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014960789500037208, "eta_seconds": 11151.432648201459, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.0493672888326479, "fast_rcnn/fg_cls_accuracy": 0.950632711167352, "iteration": 1159, "loss_box_reg": 0.10223600640892982, "loss_cls": 0.05007513798773289, "loss_rpn_cls": 0.004917986923828721, "loss_rpn_loc": 0.07119227945804596, "lr": 0.0048293375, "roi_head/num_bg_samples": 393.875, "roi_head/num_fg_samples": 118.125, "rpn/num_neg_anchors": 169.75, "rpn/num_pos_anchors": 86.25, "time": 0.8591569790005451, "total_loss": 0.23316936113405973}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011912658499568352, "eta_seconds": 11133.44586255851, "fast_rcnn/cls_accuracy": 0.97900390625, "fast_rcnn/false_negative": 0.05077235193621868, "fast_rcnn/fg_cls_accuracy": 0.9492276480637813, "iteration": 1179, "loss_box_reg": 0.11368173360824585, "loss_cls": 0.05308356508612633, "loss_rpn_cls": 0.005349044920876622, "loss_rpn_loc": 0.06201360747218132, "lr": 0.0049125875, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8698166265003238, "total_loss": 0.23130762414075434}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 89.9372115855734, "bbox/AP50": 98.94397005781644, "bbox/AP75": 98.90289638087187, "bbox/APl": 90.72880288503814, "bbox/APm": 88.3051693765623, "bbox/APs": NaN, "data_time": 0.014878246000080253, "eta_seconds": 11116.078346978511, "fast_rcnn/cls_accuracy": 0.9775390625, "fast_rcnn/false_negative": 0.0703125, "fast_rcnn/fg_cls_accuracy": 0.9296875, "iteration": 1199, "loss_box_reg": 0.11325424909591675, "loss_cls": 0.04710954613983631, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0042733787558972836, "loss_rpn_loc": 0.06012917682528496, "lr": 0.0049958375, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8741366975000346, "total_loss": 0.23101549898274243, "validation_loss": 0.22204631070859254}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013528545000099257, "eta_seconds": 11099.301888740878, "fast_rcnn/cls_accuracy": 0.980224609375, "fast_rcnn/false_negative": 0.046103560216894976, "fast_rcnn/fg_cls_accuracy": 0.953896439783105, "iteration": 1219, "loss_box_reg": 0.12120898813009262, "loss_cls": 0.05126929096877575, "loss_rpn_cls": 0.0038727218052372336, "loss_rpn_loc": 0.05043528042733669, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8828641514996889, "total_loss": 0.23491605871822685}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011044496000067738, "eta_seconds": 11073.083311939141, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1239, "loss_box_reg": 0.11235003918409348, "loss_cls": 0.046691738069057465, "loss_rpn_cls": 0.006056502927094698, "loss_rpn_loc": 0.053873563185334206, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8184038200001851, "total_loss": 0.23004397260956466}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015318163000301865, "eta_seconds": 11057.887156648141, "fast_rcnn/cls_accuracy": 0.98095703125, "fast_rcnn/false_negative": 0.04580158118560379, "fast_rcnn/fg_cls_accuracy": 0.9541984188143962, "iteration": 1259, "loss_box_reg": 0.10087935626506805, "loss_cls": 0.047167083248496056, "loss_rpn_cls": 0.004879459505900741, "loss_rpn_loc": 0.04768846556544304, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8561628545003259, "total_loss": 0.202470017131418}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014270402500187629, "eta_seconds": 11023.213576958839, "fast_rcnn/cls_accuracy": 0.977783203125, "fast_rcnn/false_negative": 0.052734375, "fast_rcnn/fg_cls_accuracy": 0.947265625, "iteration": 1279, "loss_box_reg": 0.1078275665640831, "loss_cls": 0.055708736181259155, "loss_rpn_cls": 0.004326054826378822, "loss_rpn_loc": 0.051015861332416534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8413463045003482, "total_loss": 0.23464090866036713}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013100360500175157, "eta_seconds": 11008.474875399741, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.047925034286833854, "fast_rcnn/fg_cls_accuracy": 0.9520749657131662, "iteration": 1299, "loss_box_reg": 0.09658817201852798, "loss_cls": 0.04709094204008579, "loss_rpn_cls": 0.0040003720205277205, "loss_rpn_loc": 0.061722202226519585, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8807059354999183, "total_loss": 0.22329395404085517}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015239898999880097, "eta_seconds": 11003.665032419109, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.03966547818791946, "fast_rcnn/fg_cls_accuracy": 0.9603345218120805, "iteration": 1319, "loss_box_reg": 0.10543150082230568, "loss_cls": 0.047363804653286934, "loss_rpn_cls": 0.006104244850575924, "loss_rpn_loc": 0.05552547238767147, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8904177599997638, "total_loss": 0.22847025434020907}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011903596499450941, "eta_seconds": 10975.392692321862, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.036201565026496865, "fast_rcnn/fg_cls_accuracy": 0.9637984349735031, "iteration": 1339, "loss_box_reg": 0.10207298025488853, "loss_cls": 0.03664606809616089, "loss_rpn_cls": 0.006632389267906547, "loss_rpn_loc": 0.047756388783454895, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.25, "rpn/num_pos_anchors": 92.75, "time": 0.845586510999965, "total_loss": 0.1987403016537428}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012518932499915536, "eta_seconds": 10967.293575872216, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.036218475877192985, "fast_rcnn/fg_cls_accuracy": 0.963781524122807, "iteration": 1359, "loss_box_reg": 0.09389247000217438, "loss_cls": 0.03725110925734043, "loss_rpn_cls": 0.0026225635083392262, "loss_rpn_loc": 0.04946193844079971, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8703024129999903, "total_loss": 0.1872705266578123}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014252139999825886, "eta_seconds": 10949.941636032216, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.0381825206043956, "fast_rcnn/fg_cls_accuracy": 0.9618174793956045, "iteration": 1379, "loss_box_reg": 0.09005808085203171, "loss_cls": 0.04361296631395817, "loss_rpn_cls": 0.0031876161228865385, "loss_rpn_loc": 0.04760141670703888, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8653196120003486, "total_loss": 0.18320670002140105}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015607826999712415, "eta_seconds": 10936.381450508063, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04292900291705905, "fast_rcnn/fg_cls_accuracy": 0.957070997082941, "iteration": 1399, "loss_box_reg": 0.1026579923927784, "loss_cls": 0.040452633053064346, "loss_rpn_cls": 0.004050533752888441, "loss_rpn_loc": 0.050027329474687576, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 167.25, "rpn/num_pos_anchors": 88.75, "time": 0.8649475590000293, "total_loss": 0.21095226804027334}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012343008500465658, "eta_seconds": 10926.268840053872, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.04167183366402116, "fast_rcnn/fg_cls_accuracy": 0.9583281663359788, "iteration": 1419, "loss_box_reg": 0.09014065191149712, "loss_cls": 0.042981088161468506, "loss_rpn_cls": 0.00645520631223917, "loss_rpn_loc": 0.06759355217218399, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8950779309998325, "total_loss": 0.22137367050163448}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012359693500002322, "eta_seconds": 10914.622519983426, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.03675857099514563, "fast_rcnn/fg_cls_accuracy": 0.9632414290048543, "iteration": 1439, "loss_box_reg": 0.08957243710756302, "loss_cls": 0.04217042587697506, "loss_rpn_cls": 0.007140532601624727, "loss_rpn_loc": 0.08009770512580872, "lr": 0.005, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8714704600001824, "total_loss": 0.22934484714642167}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012483622500440106, "eta_seconds": 10896.652974460563, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.046875, "fast_rcnn/fg_cls_accuracy": 0.953125, "iteration": 1459, "loss_box_reg": 0.0861663743853569, "loss_cls": 0.03933589160442352, "loss_rpn_cls": 0.00711781601421535, "loss_rpn_loc": 0.07167446613311768, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8673060529995382, "total_loss": 0.20666937343776226}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014326036999591452, "eta_seconds": 10887.697147058661, "fast_rcnn/cls_accuracy": 0.97119140625, "fast_rcnn/false_negative": 0.07186511075949367, "fast_rcnn/fg_cls_accuracy": 0.9281348892405064, "iteration": 1479, "loss_box_reg": 0.11860571056604385, "loss_cls": 0.07213868945837021, "loss_rpn_cls": 0.008405119646340609, "loss_rpn_loc": 0.059620652347803116, "lr": 0.005, "roi_head/num_bg_samples": 401.25, "roi_head/num_fg_samples": 110.75, "rpn/num_neg_anchors": 175.0, "rpn/num_pos_anchors": 81.0, "time": 0.897518780000155, "total_loss": 0.28046197770163417}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 90.47100649648208, "bbox/AP50": 98.89818218763597, "bbox/AP75": 98.83786673282349, "bbox/APl": 90.98252513947219, "bbox/APm": 89.65274891712926, "bbox/APs": NaN, "data_time": 0.014468831499925727, "eta_seconds": 10880.330544314034, "fast_rcnn/cls_accuracy": 0.9794921875, "fast_rcnn/false_negative": 0.05078125, "fast_rcnn/fg_cls_accuracy": 0.94921875, "iteration": 1499, "loss_box_reg": 0.11426327377557755, "loss_cls": 0.051829954609274864, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.00704673957079649, "loss_rpn_loc": 0.08483739569783211, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.898153683000146, "total_loss": 0.25268610194325447, "validation_loss": 0.24073816174583876}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013221118500041484, "eta_seconds": 10867.58767004412, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.04463252314814815, "fast_rcnn/fg_cls_accuracy": 0.9553674768518519, "iteration": 1519, "loss_box_reg": 0.1030765026807785, "loss_cls": 0.05443604104220867, "loss_rpn_cls": 0.007032011868432164, "loss_rpn_loc": 0.07387308403849602, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8726468634999947, "total_loss": 0.244771410478279}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015136590000565775, "eta_seconds": 10837.571910697727, "fast_rcnn/cls_accuracy": 0.979248046875, "fast_rcnn/false_negative": 0.04780190677966102, "fast_rcnn/fg_cls_accuracy": 0.952198093220339, "iteration": 1539, "loss_box_reg": 0.1154186986386776, "loss_cls": 0.05130871944129467, "loss_rpn_cls": 0.005730348872020841, "loss_rpn_loc": 0.06487315893173218, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8529182040001615, "total_loss": 0.23767815972678363}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014879302499593905, "eta_seconds": 10806.879806792327, "fast_rcnn/cls_accuracy": 0.978759765625, "fast_rcnn/false_negative": 0.049944196428571425, "fast_rcnn/fg_cls_accuracy": 0.9500558035714286, "iteration": 1559, "loss_box_reg": 0.10610762983560562, "loss_cls": 0.048841025680303574, "loss_rpn_cls": 0.00505010224878788, "loss_rpn_loc": 0.047558898106217384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.8628834279998046, "total_loss": 0.21762098465114832}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01316807399962272, "eta_seconds": 10794.525714710453, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.039278372332063605, "fast_rcnn/fg_cls_accuracy": 0.9607216276679363, "iteration": 1579, "loss_box_reg": 0.09529298916459084, "loss_cls": 0.047681115567684174, "loss_rpn_cls": 0.005185154965147376, "loss_rpn_loc": 0.04409233666956425, "lr": 0.005, "roi_head/num_bg_samples": 398.75, "roi_head/num_fg_samples": 113.25, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8907098810000207, "total_loss": 0.19659643550403416}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013807994499984488, "eta_seconds": 10777.144625080455, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.04536732456140351, "fast_rcnn/fg_cls_accuracy": 0.9546326754385965, "iteration": 1599, "loss_box_reg": 0.10481703281402588, "loss_cls": 0.04726100340485573, "loss_rpn_cls": 0.005707225529477, "loss_rpn_loc": 0.0522367749363184, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8495490139998765, "total_loss": 0.21333862002938986}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012579137000102492, "eta_seconds": 10762.580968191138, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1619, "loss_box_reg": 0.09973128139972687, "loss_cls": 0.040857817977666855, "loss_rpn_cls": 0.0033710956340655684, "loss_rpn_loc": 0.04723631218075752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8383417874997576, "total_loss": 0.20998939604032785}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012796253500255261, "eta_seconds": 10745.19532734114, "fast_rcnn/cls_accuracy": 0.983154296875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1639, "loss_box_reg": 0.09802206978201866, "loss_cls": 0.043301988393068314, "loss_rpn_cls": 0.004532157443463802, "loss_rpn_loc": 0.05338606610894203, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8678041269995447, "total_loss": 0.20312127005308867}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013821255500261032, "eta_seconds": 10735.521867402167, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.04389311316815145, "fast_rcnn/fg_cls_accuracy": 0.9561068868318485, "iteration": 1659, "loss_box_reg": 0.09773008897900581, "loss_cls": 0.04519974626600742, "loss_rpn_cls": 0.004526508506387472, "loss_rpn_loc": 0.05140480026602745, "lr": 0.005, "roi_head/num_bg_samples": 396.75, "roi_head/num_fg_samples": 115.25, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.882670835999761, "total_loss": 0.20179360220208764}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01438021400008438, "eta_seconds": 10728.270786204119, "fast_rcnn/cls_accuracy": 0.98046875, "fast_rcnn/false_negative": 0.04066910282258064, "fast_rcnn/fg_cls_accuracy": 0.9593308971774194, "iteration": 1679, "loss_box_reg": 0.10078854858875275, "loss_cls": 0.050304073840379715, "loss_rpn_cls": 0.003972385311499238, "loss_rpn_loc": 0.05783495306968689, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.375, "rpn/num_pos_anchors": 92.625, "time": 0.8868689450000602, "total_loss": 0.21955888194497675}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015314830000079382, "eta_seconds": 10708.488811374478, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.03443205758426966, "fast_rcnn/fg_cls_accuracy": 0.9655679424157304, "iteration": 1699, "loss_box_reg": 0.08642548322677612, "loss_cls": 0.0424218624830246, "loss_rpn_cls": 0.004494124790653586, "loss_rpn_loc": 0.050324076786637306, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8947804085000826, "total_loss": 0.1852857698686421}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014327528499961772, "eta_seconds": 10683.327449442186, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0400390625, "fast_rcnn/fg_cls_accuracy": 0.9599609375, "iteration": 1719, "loss_box_reg": 0.09392394125461578, "loss_cls": 0.040925584733486176, "loss_rpn_cls": 0.004295801743865013, "loss_rpn_loc": 0.051177412271499634, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8841799534998245, "total_loss": 0.19225792540237308}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014464311000210728, "eta_seconds": 10665.929310122192, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 1739, "loss_box_reg": 0.10429317876696587, "loss_cls": 0.03850865736603737, "loss_rpn_cls": 0.004676738753914833, "loss_rpn_loc": 0.06099403649568558, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8719341980004174, "total_loss": 0.2191669741878286}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016681402000358503, "eta_seconds": 10658.612344284118, "fast_rcnn/cls_accuracy": 0.98193359375, "fast_rcnn/false_negative": 0.04427876650098872, "fast_rcnn/fg_cls_accuracy": 0.9557212334990113, "iteration": 1759, "loss_box_reg": 0.10086190328001976, "loss_cls": 0.041055068373680115, "loss_rpn_cls": 0.0038329382659867406, "loss_rpn_loc": 0.051342034712433815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8841451134999261, "total_loss": 0.19593067455571145}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014048279500457284, "eta_seconds": 10631.133031482204, "fast_rcnn/cls_accuracy": 0.982177734375, "fast_rcnn/false_negative": 0.03769699739194401, "fast_rcnn/fg_cls_accuracy": 0.962303002608056, "iteration": 1779, "loss_box_reg": 0.09833024814724922, "loss_cls": 0.04401624575257301, "loss_rpn_cls": 0.004325072979554534, "loss_rpn_loc": 0.06082310900092125, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.862232074000076, "total_loss": 0.21781846298836172}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 92.21388393069454, "bbox/AP50": 98.9582735663117, "bbox/AP75": 98.91922274208812, "bbox/APl": 92.76017734503245, "bbox/APm": 91.06707513844079, "bbox/APs": NaN, "data_time": 0.013798876500004553, "eta_seconds": 10612.28939699241, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 1799, "loss_box_reg": 0.08888481557369232, "loss_cls": 0.04587249644100666, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.004532726481556892, "loss_rpn_loc": 0.04718616604804993, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8685472174997813, "total_loss": 0.18515282846055925, "validation_loss": 0.19486001614312065}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01440209100019274, "eta_seconds": 10588.782066193326, "fast_rcnn/cls_accuracy": 0.982666015625, "fast_rcnn/false_negative": 0.041015625, "fast_rcnn/fg_cls_accuracy": 0.958984375, "iteration": 1819, "loss_box_reg": 0.09320377558469772, "loss_cls": 0.04454539343714714, "loss_rpn_cls": 0.0031231624307110906, "loss_rpn_loc": 0.04289261996746063, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.878915322499779, "total_loss": 0.1927729855524376}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015858857000239368, "eta_seconds": 10577.49785729241, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0414482792721519, "fast_rcnn/fg_cls_accuracy": 0.9585517207278481, "iteration": 1839, "loss_box_reg": 0.09988433122634888, "loss_cls": 0.045475441962480545, "loss_rpn_cls": 0.0023602014407515526, "loss_rpn_loc": 0.04580887593328953, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 165.875, "rpn/num_pos_anchors": 90.125, "time": 0.8694505869998466, "total_loss": 0.19530457153450698}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011982069999703526, "eta_seconds": 10559.85364616426, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03892780172413793, "fast_rcnn/fg_cls_accuracy": 0.9610721982758621, "iteration": 1859, "loss_box_reg": 0.09175437316298485, "loss_cls": 0.037718771025538445, "loss_rpn_cls": 0.003915468696504831, "loss_rpn_loc": 0.045753927901387215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.125, "rpn/num_pos_anchors": 92.875, "time": 0.8600529149998692, "total_loss": 0.1927445613546297}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013541940000322938, "eta_seconds": 10536.624860383326, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0322265625, "fast_rcnn/fg_cls_accuracy": 0.9677734375, "iteration": 1879, "loss_box_reg": 0.09368035569787025, "loss_cls": 0.03680916503071785, "loss_rpn_cls": 0.004152178764343262, "loss_rpn_loc": 0.051723018288612366, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.5, "rpn/num_pos_anchors": 88.5, "time": 0.8636904879999747, "total_loss": 0.1892381781945005}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015167849000135902, "eta_seconds": 10505.653435268032, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380859375, "fast_rcnn/fg_cls_accuracy": 0.9619140625, "iteration": 1899, "loss_box_reg": 0.07685903087258339, "loss_cls": 0.03890354372560978, "loss_rpn_cls": 0.004574333317577839, "loss_rpn_loc": 0.046656785532832146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8658116014998996, "total_loss": 0.17074766720179468}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013550288500027818, "eta_seconds": 10490.1415308359, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03149801587301587, "fast_rcnn/fg_cls_accuracy": 0.9685019841269842, "iteration": 1919, "loss_box_reg": 0.084226094186306, "loss_cls": 0.03763917088508606, "loss_rpn_cls": 0.0033376823412254453, "loss_rpn_loc": 0.039989013224840164, "lr": 0.005, "roi_head/num_bg_samples": 387.875, "roi_head/num_fg_samples": 124.125, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8777504735003276, "total_loss": 0.1695472338469699}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013637017000291962, "eta_seconds": 10481.158423730092, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.033308006414081145, "fast_rcnn/fg_cls_accuracy": 0.9666919935859188, "iteration": 1939, "loss_box_reg": 0.09387752041220665, "loss_cls": 0.03691721335053444, "loss_rpn_cls": 0.00305631710216403, "loss_rpn_loc": 0.039622073993086815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.625, "rpn/num_pos_anchors": 84.375, "time": 0.8821017150003172, "total_loss": 0.16561688063666224}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01566228149977178, "eta_seconds": 10459.628094786585, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029418103448275862, "fast_rcnn/fg_cls_accuracy": 0.9705818965517241, "iteration": 1959, "loss_box_reg": 0.0838717557489872, "loss_cls": 0.03551844134926796, "loss_rpn_cls": 0.0031498116441071033, "loss_rpn_loc": 0.04677033796906471, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8585874375003186, "total_loss": 0.17996928666252643}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012967388999641116, "eta_seconds": 10442.254740256585, "fast_rcnn/cls_accuracy": 0.98388671875, "fast_rcnn/false_negative": 0.03389473684210526, "fast_rcnn/fg_cls_accuracy": 0.9661052631578948, "iteration": 1979, "loss_box_reg": 0.08219883218407631, "loss_cls": 0.03881074674427509, "loss_rpn_cls": 0.004102814942598343, "loss_rpn_loc": 0.053613780066370964, "lr": 0.005, "roi_head/num_bg_samples": 397.125, "roi_head/num_fg_samples": 114.875, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8684652934998667, "total_loss": 0.1922797355800867}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013859366499673342, "eta_seconds": 10416.72865039066, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 1999, "loss_box_reg": 0.09208154305815697, "loss_cls": 0.03729891777038574, "loss_rpn_cls": 0.004324637353420258, "loss_rpn_loc": 0.049532048404216766, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8454489969999486, "total_loss": 0.18912802496924996}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013589772499926767, "eta_seconds": 10401.473746628071, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0380501003440367, "fast_rcnn/fg_cls_accuracy": 0.9619498996559632, "iteration": 2019, "loss_box_reg": 0.08173145353794098, "loss_cls": 0.0348515585064888, "loss_rpn_cls": 0.0032774244900792837, "loss_rpn_loc": 0.04606715030968189, "lr": 0.005, "roi_head/num_bg_samples": 396.5, "roi_head/num_fg_samples": 115.5, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8827293745002862, "total_loss": 0.17900166858453304}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016258499000286974, "eta_seconds": 10383.14835822894, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03491323851583962, "fast_rcnn/fg_cls_accuracy": 0.9650867614841604, "iteration": 2039, "loss_box_reg": 0.09229341149330139, "loss_cls": 0.037404755130410194, "loss_rpn_cls": 0.0030006606830284, "loss_rpn_loc": 0.04984702169895172, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.863546210000095, "total_loss": 0.18486582313198596}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01584853300028044, "eta_seconds": 10369.857802306824, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037252784178187406, "fast_rcnn/fg_cls_accuracy": 0.9627472158218127, "iteration": 2059, "loss_box_reg": 0.09000474214553833, "loss_cls": 0.03899835981428623, "loss_rpn_cls": 0.0031731631606817245, "loss_rpn_loc": 0.047395261004567146, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.8975476909999998, "total_loss": 0.1849419007776305}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01302835349997622, "eta_seconds": 10358.225833181914, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0361328125, "fast_rcnn/fg_cls_accuracy": 0.9638671875, "iteration": 2079, "loss_box_reg": 0.08724486455321312, "loss_cls": 0.045973993837833405, "loss_rpn_cls": 0.0030110322404652834, "loss_rpn_loc": 0.03779111988842487, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.8679554685004405, "total_loss": 0.19020180380903184}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 89.90068357647002, "bbox/AP50": 98.90752019335251, "bbox/AP75": 98.90147705938551, "bbox/APl": 90.23938380754622, "bbox/APm": 88.88386901962771, "bbox/APs": NaN, "data_time": 0.013675101999979233, "eta_seconds": 10341.815137924052, "fast_rcnn/cls_accuracy": 0.982421875, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2099, "loss_box_reg": 0.0884990505874157, "loss_cls": 0.04107754863798618, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.003416641498915851, "loss_rpn_loc": 0.06242932006716728, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8932269239999187, "total_loss": 0.19365975121036172, "validation_loss": 0.19123022244832846}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0136575635006011, "eta_seconds": 10324.176337227254, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.038356667698019806, "fast_rcnn/fg_cls_accuracy": 0.9616433323019802, "iteration": 2119, "loss_box_reg": 0.08040068298578262, "loss_cls": 0.038239989429712296, "loss_rpn_cls": 0.003759029903449118, "loss_rpn_loc": 0.045844390988349915, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8485069829998793, "total_loss": 0.17594775510951877}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01224396199995681, "eta_seconds": 10307.610909986604, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.03441750101279009, "fast_rcnn/fg_cls_accuracy": 0.9655824989872099, "iteration": 2139, "loss_box_reg": 0.09104080125689507, "loss_cls": 0.03530845418572426, "loss_rpn_cls": 0.0037917372537776828, "loss_rpn_loc": 0.037452591583132744, "lr": 0.005, "roi_head/num_bg_samples": 392.625, "roi_head/num_fg_samples": 119.375, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8768745459997263, "total_loss": 0.17403553624171764}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013991559500027506, "eta_seconds": 10297.328521033947, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.034357063506758004, "fast_rcnn/fg_cls_accuracy": 0.965642936493242, "iteration": 2159, "loss_box_reg": 0.08362606540322304, "loss_cls": 0.03820972703397274, "loss_rpn_cls": 0.0028603734681382775, "loss_rpn_loc": 0.038150036707520485, "lr": 0.005, "roi_head/num_bg_samples": 391.25, "roi_head/num_fg_samples": 120.75, "rpn/num_neg_anchors": 170.125, "rpn/num_pos_anchors": 85.875, "time": 0.8841141164998589, "total_loss": 0.16322252247482538}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013330730500001664, "eta_seconds": 10272.849554586599, "fast_rcnn/cls_accuracy": 0.984130859375, "fast_rcnn/false_negative": 0.03048554157239819, "fast_rcnn/fg_cls_accuracy": 0.9695144584276019, "iteration": 2179, "loss_box_reg": 0.09114638343453407, "loss_cls": 0.03680109232664108, "loss_rpn_cls": 0.002896717400290072, "loss_rpn_loc": 0.04303932003676891, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8548102505001225, "total_loss": 0.1797549540642649}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011985454500518244, "eta_seconds": 10255.468876886596, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.03245170659221902, "fast_rcnn/fg_cls_accuracy": 0.967548293407781, "iteration": 2199, "loss_box_reg": 0.09328019246459007, "loss_cls": 0.039469512179493904, "loss_rpn_cls": 0.0030301783699542284, "loss_rpn_loc": 0.042535314336419106, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.875668800999847, "total_loss": 0.18828994838986546}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013756813499639975, "eta_seconds": 10236.74518285594, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2219, "loss_box_reg": 0.08324635773897171, "loss_cls": 0.03644854947924614, "loss_rpn_cls": 0.003077507601119578, "loss_rpn_loc": 0.04696730896830559, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 151.5, "rpn/num_pos_anchors": 104.5, "time": 0.8660500474998116, "total_loss": 0.17756581807043403}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012775122499988356, "eta_seconds": 10229.34179495411, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.036272321428571425, "fast_rcnn/fg_cls_accuracy": 0.9637276785714286, "iteration": 2239, "loss_box_reg": 0.08963338658213615, "loss_cls": 0.041584597900509834, "loss_rpn_cls": 0.003160484484396875, "loss_rpn_loc": 0.04723039269447327, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8688699244999043, "total_loss": 0.1874701443593949}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015097248999609292, "eta_seconds": 10217.529332700633, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2259, "loss_box_reg": 0.07312063500285149, "loss_cls": 0.03746681474149227, "loss_rpn_cls": 0.0033478353871032596, "loss_rpn_loc": 0.04146379791200161, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.875, "rpn/num_pos_anchors": 86.125, "time": 0.877857135999875, "total_loss": 0.16872154723387212}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.018694472999868594, "eta_seconds": 10209.779635761235, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 2279, "loss_box_reg": 0.08895870670676231, "loss_cls": 0.029577581211924553, "loss_rpn_cls": 0.00313483620993793, "loss_rpn_loc": 0.04437120631337166, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.875047160500344, "total_loss": 0.1661791643127799}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014058729499993206, "eta_seconds": 10192.35829008124, "fast_rcnn/cls_accuracy": 0.985107421875, "fast_rcnn/false_negative": 0.037109375, "fast_rcnn/fg_cls_accuracy": 0.962890625, "iteration": 2299, "loss_box_reg": 0.0840831771492958, "loss_cls": 0.03785872086882591, "loss_rpn_cls": 0.003355022519826889, "loss_rpn_loc": 0.048520974814891815, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8901794160001373, "total_loss": 0.18029032868798822}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014900668499649328, "eta_seconds": 10169.059123611969, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2319, "loss_box_reg": 0.08981714025139809, "loss_cls": 0.034265389665961266, "loss_rpn_cls": 0.0031644627451896667, "loss_rpn_loc": 0.03894554451107979, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.0, "rpn/num_pos_anchors": 101.0, "time": 0.8586659924999367, "total_loss": 0.17702865693718195}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0162080194995724, "eta_seconds": 10151.647841831964, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.033203125, "fast_rcnn/fg_cls_accuracy": 0.966796875, "iteration": 2339, "loss_box_reg": 0.08361848816275597, "loss_cls": 0.0330031830817461, "loss_rpn_cls": 0.002660089638084173, "loss_rpn_loc": 0.036235157400369644, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8543626634996144, "total_loss": 0.15929806616622955}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01537236500007566, "eta_seconds": 10130.504979300576, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029702746350488786, "fast_rcnn/fg_cls_accuracy": 0.9702972536495111, "iteration": 2359, "loss_box_reg": 0.07438933849334717, "loss_cls": 0.03239784575998783, "loss_rpn_cls": 0.0028395807603374124, "loss_rpn_loc": 0.03916883282363415, "lr": 0.005, "roi_head/num_bg_samples": 385.75, "roi_head/num_fg_samples": 126.25, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8654807150005581, "total_loss": 0.15443656395655125}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013455614000122296, "eta_seconds": 10113.100108620565, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 2379, "loss_box_reg": 0.07959544658660889, "loss_cls": 0.03229916840791702, "loss_rpn_cls": 0.0025239757960662246, "loss_rpn_loc": 0.038064660504460335, "lr": 0.005, "roi_head/num_bg_samples": 388.375, "roi_head/num_fg_samples": 123.625, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8699438974995246, "total_loss": 0.15723116433946416}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 90.38046983259721, "bbox/AP50": 98.95554647930321, "bbox/AP75": 98.93429029294731, "bbox/APl": 90.51305711164808, "bbox/APm": 90.37498846524267, "bbox/APs": NaN, "data_time": 0.014254079500460648, "eta_seconds": 10102.240359718868, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 2399, "loss_box_reg": 0.07846162468194962, "loss_cls": 0.03271058388054371, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002632420277222991, "loss_rpn_loc": 0.04105196334421635, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8823002785002245, "total_loss": 0.15162402321584523, "validation_loss": 0.18059760322568635}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013223844500316773, "eta_seconds": 10082.002714711944, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02970393912825651, "fast_rcnn/fg_cls_accuracy": 0.9702960608717435, "iteration": 2419, "loss_box_reg": 0.07463748008012772, "loss_cls": 0.03062492609024048, "loss_rpn_cls": 0.003003168385475874, "loss_rpn_loc": 0.04139695316553116, "lr": 0.005, "roi_head/num_bg_samples": 395.875, "roi_head/num_fg_samples": 116.125, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8846325539998361, "total_loss": 0.15889020101167262}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01342617850013994, "eta_seconds": 10058.791759012625, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03232062055591467, "fast_rcnn/fg_cls_accuracy": 0.9676793794440853, "iteration": 2439, "loss_box_reg": 0.08237595111131668, "loss_cls": 0.03586164303123951, "loss_rpn_cls": 0.0030923092272132635, "loss_rpn_loc": 0.04343203827738762, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.625, "rpn/num_pos_anchors": 94.375, "time": 0.8559531569999308, "total_loss": 0.1755513409152627}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014425377000407025, "eta_seconds": 10049.991896518874, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02795220690133038, "fast_rcnn/fg_cls_accuracy": 0.9720477930986696, "iteration": 2459, "loss_box_reg": 0.07967670261859894, "loss_cls": 0.03273317776620388, "loss_rpn_cls": 0.003336146706715226, "loss_rpn_loc": 0.052099425345659256, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8797186050005621, "total_loss": 0.17592523363418877}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013915394999912678, "eta_seconds": 10023.989261792618, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03218129139072848, "fast_rcnn/fg_cls_accuracy": 0.9678187086092715, "iteration": 2479, "loss_box_reg": 0.08192437514662743, "loss_cls": 0.033937135711312294, "loss_rpn_cls": 0.003456542850472033, "loss_rpn_loc": 0.04651975259184837, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8666510749999361, "total_loss": 0.1762359922286123}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.010985515999891504, "eta_seconds": 9994.220309323966, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2499, "loss_box_reg": 0.08062322810292244, "loss_cls": 0.0348933469504118, "loss_rpn_cls": 0.0027861351845785975, "loss_rpn_loc": 0.038825834169983864, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 155.75, "rpn/num_pos_anchors": 100.25, "time": 0.8623936889998731, "total_loss": 0.16029999474994838}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012925224999435159, "eta_seconds": 9975.52187745336, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.03711904393564357, "fast_rcnn/fg_cls_accuracy": 0.9628809560643564, "iteration": 2519, "loss_box_reg": 0.08054154366254807, "loss_cls": 0.03537464700639248, "loss_rpn_cls": 0.0020838259952142835, "loss_rpn_loc": 0.03704572282731533, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.0, "rpn/num_pos_anchors": 92.0, "time": 0.8709305714996844, "total_loss": 0.1565095882397145}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014001295999605645, "eta_seconds": 9970.222825800769, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024819186681222707, "fast_rcnn/fg_cls_accuracy": 0.9751808133187774, "iteration": 2539, "loss_box_reg": 0.0694175660610199, "loss_cls": 0.028812485747039318, "loss_rpn_cls": 0.002306518144905567, "loss_rpn_loc": 0.034660546109080315, "lr": 0.005, "roi_head/num_bg_samples": 386.625, "roi_head/num_fg_samples": 125.375, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.9114369695003006, "total_loss": 0.14976061368361115}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015146330999868951, "eta_seconds": 9964.491298234194, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 2559, "loss_box_reg": 0.07692543789744377, "loss_cls": 0.031828004866838455, "loss_rpn_cls": 0.003076101769693196, "loss_rpn_loc": 0.039611104875802994, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.882002274000115, "total_loss": 0.15674148977268487}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014400603499780118, "eta_seconds": 9936.9830187426, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.029522579376430207, "fast_rcnn/fg_cls_accuracy": 0.9704774206235698, "iteration": 2579, "loss_box_reg": 0.07119812443852425, "loss_cls": 0.03264463320374489, "loss_rpn_cls": 0.0027976155979558825, "loss_rpn_loc": 0.0388930719345808, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8642328930000076, "total_loss": 0.15167312882840633}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011450261000391038, "eta_seconds": 9935.233353661648, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.032523878905617615, "fast_rcnn/fg_cls_accuracy": 0.9674761210943823, "iteration": 2599, "loss_box_reg": 0.06924661248922348, "loss_cls": 0.028150435537099838, "loss_rpn_cls": 0.0023369272239506245, "loss_rpn_loc": 0.03825339488685131, "lr": 0.005, "roi_head/num_bg_samples": 396.125, "roi_head/num_fg_samples": 115.875, "rpn/num_neg_anchors": 174.625, "rpn/num_pos_anchors": 81.375, "time": 0.8899173999998311, "total_loss": 0.14393403416033834}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015590758999678656, "eta_seconds": 9929.062597158703, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02809597523219814, "fast_rcnn/fg_cls_accuracy": 0.9719040247678019, "iteration": 2619, "loss_box_reg": 0.07244919240474701, "loss_cls": 0.030225475318729877, "loss_rpn_cls": 0.0027918906416743994, "loss_rpn_loc": 0.03854382783174515, "lr": 0.005, "roi_head/num_bg_samples": 384.25, "roi_head/num_fg_samples": 127.75, "rpn/num_neg_anchors": 164.375, "rpn/num_pos_anchors": 91.625, "time": 0.9016381179999371, "total_loss": 0.1531053998041898}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014583123999727832, "eta_seconds": 9908.669780157361, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.029799952651515152, "fast_rcnn/fg_cls_accuracy": 0.9702000473484849, "iteration": 2639, "loss_box_reg": 0.08254137635231018, "loss_cls": 0.03172833938151598, "loss_rpn_cls": 0.0028717368841171265, "loss_rpn_loc": 0.04374443367123604, "lr": 0.005, "roi_head/num_bg_samples": 397.0, "roi_head/num_fg_samples": 115.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8593994910002039, "total_loss": 0.16603078274056315}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011498301999836258, "eta_seconds": 9894.165619398722, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.026568700396825396, "fast_rcnn/fg_cls_accuracy": 0.9734312996031746, "iteration": 2659, "loss_box_reg": 0.07682507485151291, "loss_cls": 0.029614977538585663, "loss_rpn_cls": 0.002964502782560885, "loss_rpn_loc": 0.03749946877360344, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8888799219998873, "total_loss": 0.1592754531884566}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013297670999691036, "eta_seconds": 9873.78316883738, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2679, "loss_box_reg": 0.07238440215587616, "loss_cls": 0.0355693232268095, "loss_rpn_cls": 0.0026111083570867777, "loss_rpn_loc": 0.0347738191485405, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.877020037499733, "total_loss": 0.16674690548097715}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 92.9240043828716, "bbox/AP50": 98.92929606072012, "bbox/AP75": 98.92799052796131, "bbox/APl": 93.68590994988891, "bbox/APm": 91.26409846273341, "bbox/APs": NaN, "data_time": 0.012849886500134744, "eta_seconds": 9856.122737068548, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 2699, "loss_box_reg": 0.0671813078224659, "loss_cls": 0.031869376078248024, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0031945809023454785, "loss_rpn_loc": 0.036566296592354774, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8767406539996045, "total_loss": 0.14776976208668202, "validation_loss": 0.15299182322134222}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011506692000239127, "eta_seconds": 9834.512868088885, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02899722337196468, "fast_rcnn/fg_cls_accuracy": 0.9710027766280354, "iteration": 2719, "loss_box_reg": 0.07861164957284927, "loss_cls": 0.030141491442918777, "loss_rpn_cls": 0.0024106288328766823, "loss_rpn_loc": 0.03943100944161415, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8650525944999572, "total_loss": 0.1521670074434951}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01285303099984958, "eta_seconds": 9817.077334238891, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.02957381063432836, "fast_rcnn/fg_cls_accuracy": 0.9704261893656716, "iteration": 2739, "loss_box_reg": 0.06671890988945961, "loss_cls": 0.03127466607838869, "loss_rpn_cls": 0.0026815730379894376, "loss_rpn_loc": 0.032418686896562576, "lr": 0.005, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.872626844000024, "total_loss": 0.14512363611720502}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012917492500037042, "eta_seconds": 9801.74766123081, "fast_rcnn/cls_accuracy": 0.954833984375, "fast_rcnn/false_negative": 0.09676804011336385, "fast_rcnn/fg_cls_accuracy": 0.9032319598866361, "iteration": 2759, "loss_box_reg": 0.11749137938022614, "loss_cls": 0.10883904993534088, "loss_rpn_cls": 0.01077337609604001, "loss_rpn_loc": 0.058977166190743446, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8778482835000432, "total_loss": 0.3397485390305519}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015244338000229618, "eta_seconds": 9784.308380630808, "fast_rcnn/cls_accuracy": 0.96533203125, "fast_rcnn/false_negative": 0.0766254912525355, "fast_rcnn/fg_cls_accuracy": 0.9233745087474645, "iteration": 2779, "loss_box_reg": 0.129035085439682, "loss_cls": 0.09200597926974297, "loss_rpn_cls": 0.013461795169860125, "loss_rpn_loc": 0.06961438059806824, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8592402270001003, "total_loss": 0.30797872692346573}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014976671999647806, "eta_seconds": 9762.52735721154, "fast_rcnn/cls_accuracy": 0.97265625, "fast_rcnn/false_negative": 0.05617177138594165, "fast_rcnn/fg_cls_accuracy": 0.9438282286140584, "iteration": 2799, "loss_box_reg": 0.12645410001277924, "loss_cls": 0.07380463182926178, "loss_rpn_cls": 0.007109847851097584, "loss_rpn_loc": 0.06993347778916359, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.125, "rpn/num_pos_anchors": 84.875, "time": 0.8461526080000112, "total_loss": 0.290553962578997}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013639475000218226, "eta_seconds": 9745.095829031536, "fast_rcnn/cls_accuracy": 0.98291015625, "fast_rcnn/false_negative": 0.03667033370003667, "fast_rcnn/fg_cls_accuracy": 0.9633296662999633, "iteration": 2819, "loss_box_reg": 0.09371316060423851, "loss_cls": 0.045089706778526306, "loss_rpn_cls": 0.005565444240346551, "loss_rpn_loc": 0.04761535860598087, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8727382074998786, "total_loss": 0.19521310785785317}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01387930500004586, "eta_seconds": 9728.338034612361, "fast_rcnn/cls_accuracy": 0.981689453125, "fast_rcnn/false_negative": 0.04177911931818182, "fast_rcnn/fg_cls_accuracy": 0.9582208806818182, "iteration": 2839, "loss_box_reg": 0.09622959420084953, "loss_cls": 0.04797627404332161, "loss_rpn_cls": 0.005159869324415922, "loss_rpn_loc": 0.04820975102484226, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8819557160004479, "total_loss": 0.20418882521335036}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01400469649979641, "eta_seconds": 9721.238075284942, "fast_rcnn/cls_accuracy": 0.9833984375, "fast_rcnn/false_negative": 0.035701430861929534, "fast_rcnn/fg_cls_accuracy": 0.9642985691380704, "iteration": 2859, "loss_box_reg": 0.08729725331068039, "loss_cls": 0.046435995027422905, "loss_rpn_cls": 0.00510191498324275, "loss_rpn_loc": 0.058035969734191895, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.908507136499793, "total_loss": 0.20082180527970195}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01294949600014661, "eta_seconds": 9702.349646118308, "fast_rcnn/cls_accuracy": 0.984375, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 2879, "loss_box_reg": 0.07738611847162247, "loss_cls": 0.037084782496094704, "loss_rpn_cls": 0.004217830719426274, "loss_rpn_loc": 0.04370034486055374, "lr": 0.005, "roi_head/num_bg_samples": 386.25, "roi_head/num_fg_samples": 125.75, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8611070060001111, "total_loss": 0.16869779070839286}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013615458000003855, "eta_seconds": 9692.134685180317, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.030606273408239702, "fast_rcnn/fg_cls_accuracy": 0.9693937265917603, "iteration": 2899, "loss_box_reg": 0.08812431991100311, "loss_cls": 0.035314807668328285, "loss_rpn_cls": 0.0043608746491372585, "loss_rpn_loc": 0.04997708648443222, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 158.125, "rpn/num_pos_anchors": 97.875, "time": 0.8876654215000599, "total_loss": 0.1825667613884434}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012895140999717114, "eta_seconds": 9674.672952570318, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.0361241703539823, "fast_rcnn/fg_cls_accuracy": 0.9638758296460177, "iteration": 2919, "loss_box_reg": 0.08205550536513329, "loss_cls": 0.03564905747771263, "loss_rpn_cls": 0.003591310582123697, "loss_rpn_loc": 0.05027636140584946, "lr": 0.005, "roi_head/num_bg_samples": 399.875, "roi_head/num_fg_samples": 112.125, "rpn/num_neg_anchors": 163.625, "rpn/num_pos_anchors": 92.375, "time": 0.8845072490003076, "total_loss": 0.17568102467339486}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014998236500105122, "eta_seconds": 9651.432936964971, "fast_rcnn/cls_accuracy": 0.98583984375, "fast_rcnn/false_negative": 0.02536879358071411, "fast_rcnn/fg_cls_accuracy": 0.9746312064192859, "iteration": 2939, "loss_box_reg": 0.08032884448766708, "loss_cls": 0.03405417315661907, "loss_rpn_cls": 0.003540605423040688, "loss_rpn_loc": 0.04676378145813942, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.871404378999614, "total_loss": 0.16514784714672714}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01499920749984085, "eta_seconds": 9640.941865665844, "fast_rcnn/cls_accuracy": 0.985595703125, "fast_rcnn/false_negative": 0.031754032258064516, "fast_rcnn/fg_cls_accuracy": 0.9682459677419355, "iteration": 2959, "loss_box_reg": 0.07666385546326637, "loss_cls": 0.033461492508649826, "loss_rpn_cls": 0.0037930241087451577, "loss_rpn_loc": 0.03955382853746414, "lr": 0.005, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8775624479999351, "total_loss": 0.1578356878599152}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0172871985000711, "eta_seconds": 9625.483712489166, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 2979, "loss_box_reg": 0.0873444713652134, "loss_cls": 0.03711334243416786, "loss_rpn_cls": 0.004567545838654041, "loss_rpn_loc": 0.04251238889992237, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.875, "rpn/num_pos_anchors": 87.125, "time": 0.8813596219997635, "total_loss": 0.17236966197378933}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 93.12233100450966, "bbox/AP50": 98.91209551467809, "bbox/AP75": 98.90815859983685, "bbox/APl": 94.12688557090384, "bbox/APm": 91.41003399932086, "bbox/APs": NaN, "data_time": 0.015606857999955537, "eta_seconds": 9623.082286138271, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.04296875, "fast_rcnn/fg_cls_accuracy": 0.95703125, "iteration": 2999, "loss_box_reg": 0.06720640882849693, "loss_cls": 0.01835676282644272, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.009389291051775217, "loss_rpn_loc": 0.038574906066060066, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.9206664974999512, "total_loss": 0.14024185249581933, "validation_loss": 0.15954915430267325}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011808011999619339, "eta_seconds": 9600.16200263439, "fast_rcnn/cls_accuracy": 0.984619140625, "fast_rcnn/false_negative": 0.0341796875, "fast_rcnn/fg_cls_accuracy": 0.9658203125, "iteration": 3019, "loss_box_reg": 0.08314639329910278, "loss_cls": 0.0376443974673748, "loss_rpn_cls": 0.0030142214382067323, "loss_rpn_loc": 0.03945096954703331, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8562799734995679, "total_loss": 0.1746992077678442}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013189115500154003, "eta_seconds": 9581.05644311135, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 3039, "loss_box_reg": 0.07409685850143433, "loss_cls": 0.03244470991194248, "loss_rpn_cls": 0.0028242692351341248, "loss_rpn_loc": 0.04587041959166527, "lr": 0.005, "roi_head/num_bg_samples": 387.5, "roi_head/num_fg_samples": 124.5, "rpn/num_neg_anchors": 154.375, "rpn/num_pos_anchors": 101.625, "time": 0.8644745054998566, "total_loss": 0.16931998787913471}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013534310999602894, "eta_seconds": 9555.039547035833, "fast_rcnn/cls_accuracy": 0.983642578125, "fast_rcnn/false_negative": 0.0348046875, "fast_rcnn/fg_cls_accuracy": 0.9651953125, "iteration": 3059, "loss_box_reg": 0.08912316337227821, "loss_cls": 0.040720729157328606, "loss_rpn_cls": 0.0033090302022174, "loss_rpn_loc": 0.04025048390030861, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8530120370000986, "total_loss": 0.17787926085293293}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014201820000380394, "eta_seconds": 9543.668527310429, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03196486928104575, "fast_rcnn/fg_cls_accuracy": 0.9680351307189543, "iteration": 3079, "loss_box_reg": 0.0686977356672287, "loss_cls": 0.035015568137168884, "loss_rpn_cls": 0.00279963796492666, "loss_rpn_loc": 0.03855223208665848, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8948249290006061, "total_loss": 0.14674806164111942}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013865771499695256, "eta_seconds": 9517.51735908032, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02321697909933204, "fast_rcnn/fg_cls_accuracy": 0.9767830209006679, "iteration": 3099, "loss_box_reg": 0.07850319519639015, "loss_cls": 0.027558359317481518, "loss_rpn_cls": 0.0027522484306246042, "loss_rpn_loc": 0.03784923441708088, "lr": 0.005, "roi_head/num_bg_samples": 389.875, "roi_head/num_fg_samples": 122.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8595668009998008, "total_loss": 0.14408221002668142}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01446834599983049, "eta_seconds": 9508.71323557044, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.029296875, "fast_rcnn/fg_cls_accuracy": 0.970703125, "iteration": 3119, "loss_box_reg": 0.07208020612597466, "loss_cls": 0.027958947233855724, "loss_rpn_cls": 0.0028214638587087393, "loss_rpn_loc": 0.04015910252928734, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8765667439997742, "total_loss": 0.14485203940421343}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015091185000073892, "eta_seconds": 9483.766832985846, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3139, "loss_box_reg": 0.07660289481282234, "loss_cls": 0.02883316855877638, "loss_rpn_cls": 0.003664590767584741, "loss_rpn_loc": 0.04118155874311924, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8495973095000409, "total_loss": 0.15969278826378286}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013378322499647766, "eta_seconds": 9456.344148523265, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027560763888888888, "fast_rcnn/fg_cls_accuracy": 0.9724392361111112, "iteration": 3159, "loss_box_reg": 0.07904543727636337, "loss_cls": 0.028979639522731304, "loss_rpn_cls": 0.002581986482255161, "loss_rpn_loc": 0.03558463603258133, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8616635454995958, "total_loss": 0.1512664365582168}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013394650000009278, "eta_seconds": 9445.126903894947, "fast_rcnn/cls_accuracy": 0.986083984375, "fast_rcnn/false_negative": 0.032126560069590346, "fast_rcnn/fg_cls_accuracy": 0.9678734399304096, "iteration": 3179, "loss_box_reg": 0.08476627245545387, "loss_cls": 0.0355964619666338, "loss_rpn_cls": 0.003005484351888299, "loss_rpn_loc": 0.039235398173332214, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8727699070004746, "total_loss": 0.17287040723022074}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015970269499575807, "eta_seconds": 9419.84299253093, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.027215893058690745, "fast_rcnn/fg_cls_accuracy": 0.9727841069413092, "iteration": 3199, "loss_box_reg": 0.08042847365140915, "loss_cls": 0.029140799306333065, "loss_rpn_cls": 0.0027483388548716903, "loss_rpn_loc": 0.03704603388905525, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8536831940004959, "total_loss": 0.15336330170975998}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01509946050009603, "eta_seconds": 9401.151297154625, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.0322592626984864, "fast_rcnn/fg_cls_accuracy": 0.9677407373015137, "iteration": 3219, "loss_box_reg": 0.07175835222005844, "loss_cls": 0.03212358430027962, "loss_rpn_cls": 0.0027838735841214657, "loss_rpn_loc": 0.036246467381715775, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8455828644996473, "total_loss": 0.14006751152919605}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013515179500245722, "eta_seconds": 9383.849602200717, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021980676328502417, "fast_rcnn/fg_cls_accuracy": 0.9780193236714976, "iteration": 3239, "loss_box_reg": 0.0661500059068203, "loss_cls": 0.025285215117037296, "loss_rpn_cls": 0.0022180761443451047, "loss_rpn_loc": 0.036850456148386, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8759488749997217, "total_loss": 0.13612847530748695}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013904339499731577, "eta_seconds": 9362.250589532423, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02769993111222445, "fast_rcnn/fg_cls_accuracy": 0.9723000688877755, "iteration": 3259, "loss_box_reg": 0.07065539062023163, "loss_cls": 0.028814840130507946, "loss_rpn_cls": 0.0029595009982585907, "loss_rpn_loc": 0.042885731905698776, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.88494127749982, "total_loss": 0.15331736870575696}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014031905499905406, "eta_seconds": 9348.968644660708, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.023207561461218836, "fast_rcnn/fg_cls_accuracy": 0.9767924385387812, "iteration": 3279, "loss_box_reg": 0.059069978073239326, "loss_cls": 0.025125066749751568, "loss_rpn_cls": 0.003141147317364812, "loss_rpn_loc": 0.038696713745594025, "lr": 0.005, "roi_head/num_bg_samples": 390.625, "roi_head/num_fg_samples": 121.375, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.886954471000081, "total_loss": 0.1338297468610108}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 93.27905094948086, "bbox/AP50": 98.96061968335171, "bbox/AP75": 98.95254082058918, "bbox/APl": 94.22290992711233, "bbox/APm": 91.01193026527187, "bbox/APs": NaN, "data_time": 0.015314491499793803, "eta_seconds": 9331.528165890704, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3299, "loss_box_reg": 0.06118686683475971, "loss_cls": 0.025163940154016018, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.002601873711682856, "loss_rpn_loc": 0.046768760308623314, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8836847110001145, "total_loss": 0.14197535056155175, "validation_loss": 0.17572354030975335}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01657294799997544, "eta_seconds": 9327.826769569449, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.027298709381551364, "fast_rcnn/fg_cls_accuracy": 0.9727012906184487, "iteration": 3319, "loss_box_reg": 0.07321085035800934, "loss_cls": 0.026175927370786667, "loss_rpn_cls": 0.0025562879163771868, "loss_rpn_loc": 0.04157147742807865, "lr": 0.005, "roi_head/num_bg_samples": 396.0, "roi_head/num_fg_samples": 116.0, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8852187219999905, "total_loss": 0.15138369193300605}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013637358500091068, "eta_seconds": 9320.907193381125, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3339, "loss_box_reg": 0.0705733373761177, "loss_cls": 0.029932837933301926, "loss_rpn_cls": 0.002767486381344497, "loss_rpn_loc": 0.04421466588973999, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8811242625001796, "total_loss": 0.1560333016095683}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015893325499746425, "eta_seconds": 9306.525065608244, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02383262761703129, "fast_rcnn/fg_cls_accuracy": 0.9761673723829687, "iteration": 3359, "loss_box_reg": 0.07866281643509865, "loss_cls": 0.03185747377574444, "loss_rpn_cls": 0.003939336049370468, "loss_rpn_loc": 0.04590761289000511, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8784054349998769, "total_loss": 0.15744307718705386}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01445641100008288, "eta_seconds": 9285.935212541124, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 3379, "loss_box_reg": 0.07135868817567825, "loss_cls": 0.03006169479340315, "loss_rpn_cls": 0.0031535130692645907, "loss_rpn_loc": 0.0403817743062973, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.75, "rpn/num_pos_anchors": 97.25, "time": 0.8491240339999422, "total_loss": 0.15564731787890196}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015795905500453955, "eta_seconds": 9261.439326773583, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02752351492961303, "fast_rcnn/fg_cls_accuracy": 0.972476485070387, "iteration": 3399, "loss_box_reg": 0.06518244743347168, "loss_cls": 0.02701749838888645, "loss_rpn_cls": 0.002880784450098872, "loss_rpn_loc": 0.0377532746642828, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8454985644998487, "total_loss": 0.1512888001743704}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01527901799954634, "eta_seconds": 9231.234745578438, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02244012304987915, "fast_rcnn/fg_cls_accuracy": 0.9775598769501208, "iteration": 3419, "loss_box_reg": 0.07252498716115952, "loss_cls": 0.03160363249480724, "loss_rpn_cls": 0.0024293236201629043, "loss_rpn_loc": 0.04073278419673443, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.852150950000123, "total_loss": 0.15422597713768482}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012618986000234145, "eta_seconds": 9217.465740862552, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3439, "loss_box_reg": 0.07212798297405243, "loss_cls": 0.02934582531452179, "loss_rpn_cls": 0.0028162638191133738, "loss_rpn_loc": 0.03634508140385151, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.859679992999645, "total_loss": 0.14720665954519063}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015629582999736158, "eta_seconds": 9209.021030423577, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.030127502792816015, "fast_rcnn/fg_cls_accuracy": 0.9698724972071839, "iteration": 3459, "loss_box_reg": 0.07034417241811752, "loss_cls": 0.026633177883923054, "loss_rpn_cls": 0.003176042577251792, "loss_rpn_loc": 0.0405108705163002, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 165.125, "rpn/num_pos_anchors": 90.875, "time": 0.9005381335000493, "total_loss": 0.15105392935220152}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012076322499979142, "eta_seconds": 9194.057128930923, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.030489864864864866, "fast_rcnn/fg_cls_accuracy": 0.9695101351351352, "iteration": 3479, "loss_box_reg": 0.07114227861166, "loss_cls": 0.026824098080396652, "loss_rpn_cls": 0.002793507184833288, "loss_rpn_loc": 0.03859907202422619, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.125, "rpn/num_pos_anchors": 98.875, "time": 0.8727268464995177, "total_loss": 0.14840750175062567}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014796175999890693, "eta_seconds": 9184.643737424389, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.02636273846810934, "fast_rcnn/fg_cls_accuracy": 0.9736372615318907, "iteration": 3499, "loss_box_reg": 0.07014593109488487, "loss_cls": 0.025068681687116623, "loss_rpn_cls": 0.0022604097612202168, "loss_rpn_loc": 0.04264912009239197, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.893156176499815, "total_loss": 0.15068290615454316}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01170660899970244, "eta_seconds": 9176.90027535572, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.024857474662162163, "fast_rcnn/fg_cls_accuracy": 0.9751425253378379, "iteration": 3519, "loss_box_reg": 0.07261389493942261, "loss_cls": 0.031547232531011105, "loss_rpn_cls": 0.0035334062995389104, "loss_rpn_loc": 0.05682768300175667, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8848085234999417, "total_loss": 0.16874005855061114}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015069052500166435, "eta_seconds": 9149.657950404393, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02318663990825688, "fast_rcnn/fg_cls_accuracy": 0.9768133600917431, "iteration": 3539, "loss_box_reg": 0.06397773697972298, "loss_cls": 0.027955145575106144, "loss_rpn_cls": 0.0029910271987318993, "loss_rpn_loc": 0.035324785858392715, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8772716075000062, "total_loss": 0.14210126956459135}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014824828999735473, "eta_seconds": 9139.718760184218, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.024399182888728672, "fast_rcnn/fg_cls_accuracy": 0.9756008171112713, "iteration": 3559, "loss_box_reg": 0.06688013300299644, "loss_cls": 0.02547728642821312, "loss_rpn_cls": 0.002551792422309518, "loss_rpn_loc": 0.041121695190668106, "lr": 0.005, "roi_head/num_bg_samples": 386.375, "roi_head/num_fg_samples": 125.625, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8910150914994119, "total_loss": 0.137859839014709}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012648733000332868, "eta_seconds": 9122.743446730547, "fast_rcnn/cls_accuracy": 0.98779296875, "fast_rcnn/false_negative": 0.03091551987767584, "fast_rcnn/fg_cls_accuracy": 0.9690844801223242, "iteration": 3579, "loss_box_reg": 0.06596524640917778, "loss_cls": 0.031009403057396412, "loss_rpn_cls": 0.002636650577187538, "loss_rpn_loc": 0.03402801230549812, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8622523320004802, "total_loss": 0.14295857812976465}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 94.51462784052855, "bbox/AP50": 98.93522228080109, "bbox/AP75": 98.93450218404813, "bbox/APl": 95.4269028089368, "bbox/APm": 92.13712530083895, "bbox/APs": NaN, "data_time": 0.016846376500325277, "eta_seconds": 9099.664099978247, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 3599, "loss_box_reg": 0.060619814321398735, "loss_cls": 0.025204936042428017, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002324309549294412, "loss_rpn_loc": 0.029545368626713753, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8770653480000874, "total_loss": 0.12885292759165168, "validation_loss": 0.1466805888295102}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013414248000117368, "eta_seconds": 9073.193813482945, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02580995230643118, "fast_rcnn/fg_cls_accuracy": 0.9741900476935689, "iteration": 3619, "loss_box_reg": 0.07269391417503357, "loss_cls": 0.02648307103663683, "loss_rpn_cls": 0.002976909978315234, "loss_rpn_loc": 0.035148199647665024, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 154.875, "rpn/num_pos_anchors": 101.125, "time": 0.8643609504997585, "total_loss": 0.14119619433768094}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.017480556500231614, "eta_seconds": 9064.668756838248, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021484734934578288, "fast_rcnn/fg_cls_accuracy": 0.9785152650654217, "iteration": 3639, "loss_box_reg": 0.06451242417097092, "loss_cls": 0.025800890289247036, "loss_rpn_cls": 0.003012675791978836, "loss_rpn_loc": 0.03744327463209629, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8850444254994727, "total_loss": 0.13275502575561404}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015173202000369201, "eta_seconds": 9041.131346661121, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 3659, "loss_box_reg": 0.06518324464559555, "loss_cls": 0.028774174861609936, "loss_rpn_cls": 0.0030480388086289167, "loss_rpn_loc": 0.04536570981144905, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8544350470001518, "total_loss": 0.15816591365728527}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015335218500695191, "eta_seconds": 9025.614861067337, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0302734375, "fast_rcnn/fg_cls_accuracy": 0.9697265625, "iteration": 3679, "loss_box_reg": 0.06726354733109474, "loss_cls": 0.024467935785651207, "loss_rpn_cls": 0.0026147140888497233, "loss_rpn_loc": 0.03361096978187561, "lr": 0.005, "roi_head/num_bg_samples": 385.125, "roi_head/num_fg_samples": 126.875, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.8869942110004558, "total_loss": 0.13675730756949633}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016904356500162976, "eta_seconds": 9004.579372686254, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025110662387133182, "fast_rcnn/fg_cls_accuracy": 0.9748893376128669, "iteration": 3699, "loss_box_reg": 0.07380294799804688, "loss_cls": 0.02671107929199934, "loss_rpn_cls": 0.0026282721664756536, "loss_rpn_loc": 0.03765440732240677, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.75, "rpn/num_pos_anchors": 95.25, "time": 0.8669072914990466, "total_loss": 0.15535226103384048}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01588809099939681, "eta_seconds": 8987.096449916258, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.02690737158822265, "fast_rcnn/fg_cls_accuracy": 0.9730926284117773, "iteration": 3719, "loss_box_reg": 0.07514582574367523, "loss_cls": 0.03208179213106632, "loss_rpn_cls": 0.0023227966157719493, "loss_rpn_loc": 0.03262249752879143, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8608530749997954, "total_loss": 0.13813788018887863}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01272802500079706, "eta_seconds": 8962.058414416571, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.023082386363636364, "fast_rcnn/fg_cls_accuracy": 0.9769176136363636, "iteration": 3739, "loss_box_reg": 0.06598043441772461, "loss_cls": 0.02492926735430956, "loss_rpn_cls": 0.002211912884376943, "loss_rpn_loc": 0.035132599994540215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.375, "rpn/num_pos_anchors": 99.625, "time": 0.8425305889995798, "total_loss": 0.14112166687846184}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.017491417498604278, "eta_seconds": 8932.782554465553, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.024274259868421053, "fast_rcnn/fg_cls_accuracy": 0.9757257401315789, "iteration": 3759, "loss_box_reg": 0.0770643837749958, "loss_cls": 0.02429282944649458, "loss_rpn_cls": 0.0028139676433056593, "loss_rpn_loc": 0.03533002734184265, "lr": 0.005, "roi_head/num_bg_samples": 392.125, "roi_head/num_fg_samples": 119.875, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8662025825005912, "total_loss": 0.13814355875365436}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014352537500599283, "eta_seconds": 8915.337417165552, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.025071550123762377, "fast_rcnn/fg_cls_accuracy": 0.9749284498762376, "iteration": 3779, "loss_box_reg": 0.07174495980143547, "loss_cls": 0.024629310704767704, "loss_rpn_cls": 0.002537853899411857, "loss_rpn_loc": 0.032603537663817406, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 172.625, "rpn/num_pos_anchors": 83.375, "time": 0.863006641499851, "total_loss": 0.1404715662356466}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016315409999151598, "eta_seconds": 8902.066019020147, "fast_rcnn/cls_accuracy": 0.987548828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 3799, "loss_box_reg": 0.07169150561094284, "loss_cls": 0.02851510141044855, "loss_rpn_cls": 0.002499441849067807, "loss_rpn_loc": 0.03480919077992439, "lr": 0.005, "roi_head/num_bg_samples": 387.125, "roi_head/num_fg_samples": 124.875, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8698634014999698, "total_loss": 0.1458265830297023}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014548789498803671, "eta_seconds": 8871.673029500389, "fast_rcnn/cls_accuracy": 0.98681640625, "fast_rcnn/false_negative": 0.029305965489839936, "fast_rcnn/fg_cls_accuracy": 0.97069403451016, "iteration": 3819, "loss_box_reg": 0.06981262192130089, "loss_cls": 0.0321883549913764, "loss_rpn_cls": 0.0028753530932590365, "loss_rpn_loc": 0.036025675013661385, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8394459645005554, "total_loss": 0.15315054648090154}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013720603499677964, "eta_seconds": 8853.17420985548, "fast_rcnn/cls_accuracy": 0.987060546875, "fast_rcnn/false_negative": 0.030490451388888888, "fast_rcnn/fg_cls_accuracy": 0.9695095486111112, "iteration": 3839, "loss_box_reg": 0.07815155386924744, "loss_cls": 0.03196221496909857, "loss_rpn_cls": 0.002755100023932755, "loss_rpn_loc": 0.03541838005185127, "lr": 0.005, "roi_head/num_bg_samples": 391.875, "roi_head/num_fg_samples": 120.125, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8787194060005277, "total_loss": 0.1481912493472919}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012579242999890994, "eta_seconds": 8833.573435874765, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.031897189349112426, "fast_rcnn/fg_cls_accuracy": 0.9681028106508875, "iteration": 3859, "loss_box_reg": 0.07044711336493492, "loss_cls": 0.029714887030422688, "loss_rpn_cls": 0.0033130873925983906, "loss_rpn_loc": 0.041767822578549385, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 167.625, "rpn/num_pos_anchors": 88.375, "time": 0.8905400194989852, "total_loss": 0.14567952742800117}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.016821658499793557, "eta_seconds": 8823.220519568787, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02559853830645161, "fast_rcnn/fg_cls_accuracy": 0.9744014616935484, "iteration": 3879, "loss_box_reg": 0.07491979375481606, "loss_cls": 0.027746117673814297, "loss_rpn_cls": 0.0025814230320975184, "loss_rpn_loc": 0.04155806638300419, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 164.75, "rpn/num_pos_anchors": 91.25, "time": 0.8907964480004011, "total_loss": 0.15361196256708354}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 94.94155308690227, "bbox/AP50": 98.96777693067816, "bbox/AP75": 98.96599116280159, "bbox/APl": 95.81155173226301, "bbox/APm": 92.58270316582754, "bbox/APs": NaN, "data_time": 0.0166540754999005, "eta_seconds": 8797.017228219971, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 3899, "loss_box_reg": 0.06790591776371002, "loss_cls": 0.025828268378973007, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0026264950865879655, "loss_rpn_loc": 0.03195084631443024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8543838935001986, "total_loss": 0.13255327357910573, "validation_loss": 0.14792111576303246}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01380043500012107, "eta_seconds": 8781.817470994656, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024719360596192383, "fast_rcnn/fg_cls_accuracy": 0.9752806394038076, "iteration": 3919, "loss_box_reg": 0.06461720168590546, "loss_cls": 0.023319250904023647, "loss_rpn_cls": 0.0020520591642707586, "loss_rpn_loc": 0.03039520513266325, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.8972092889998748, "total_loss": 0.13415113149676472}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014971762999266502, "eta_seconds": 8759.346107136958, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3939, "loss_box_reg": 0.06706715747714043, "loss_cls": 0.027508745901286602, "loss_rpn_cls": 0.0024385941214859486, "loss_rpn_loc": 0.03421283699572086, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.375, "rpn/num_pos_anchors": 93.625, "time": 0.8548483864997252, "total_loss": 0.1354159387992695}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012218220000249858, "eta_seconds": 8741.933631026955, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 3959, "loss_box_reg": 0.06786992028355598, "loss_cls": 0.02666586823761463, "loss_rpn_cls": 0.00215515261515975, "loss_rpn_loc": 0.0341497752815485, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8674180375001015, "total_loss": 0.13773037993814796}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013403915500020958, "eta_seconds": 8723.552189349628, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022183835097254002, "fast_rcnn/fg_cls_accuracy": 0.9778161649027459, "iteration": 3979, "loss_box_reg": 0.06269732862710953, "loss_cls": 0.02577450592070818, "loss_rpn_cls": 0.002212987863458693, "loss_rpn_loc": 0.033453453332185745, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8743991820001611, "total_loss": 0.12669191422173753}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014044588500837563, "eta_seconds": 8699.251158132407, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021779715093818985, "fast_rcnn/fg_cls_accuracy": 0.978220284906181, "iteration": 3999, "loss_box_reg": 0.05749828927218914, "loss_cls": 0.02292787656188011, "loss_rpn_cls": 0.0022763016168028116, "loss_rpn_loc": 0.030527872033417225, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 159.5, "rpn/num_pos_anchors": 96.5, "time": 0.8781595870004821, "total_loss": 0.12036801665090024}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.017877838000458723, "eta_seconds": 8681.47508755295, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.024946263227513227, "fast_rcnn/fg_cls_accuracy": 0.9750537367724867, "iteration": 4019, "loss_box_reg": 0.061806268990039825, "loss_cls": 0.021874409168958664, "loss_rpn_cls": 0.001797958801034838, "loss_rpn_loc": 0.032160378992557526, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.858296216000781, "total_loss": 0.12814085837453604}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.017760669000381313, "eta_seconds": 8664.079084972942, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025957911969496022, "fast_rcnn/fg_cls_accuracy": 0.974042088030504, "iteration": 4039, "loss_box_reg": 0.06829555332660675, "loss_cls": 0.02705319505184889, "loss_rpn_cls": 0.0019355633994564414, "loss_rpn_loc": 0.03182108514010906, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.868489757000134, "total_loss": 0.13258394983131438}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014202485499481554, "eta_seconds": 8653.910020389647, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4059, "loss_box_reg": 0.06874504685401917, "loss_cls": 0.02661903016269207, "loss_rpn_cls": 0.0024593337439000607, "loss_rpn_loc": 0.035074906423687935, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8713963939999303, "total_loss": 0.13849112973548472}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014231688500331074, "eta_seconds": 8633.553868764164, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025265144902234637, "fast_rcnn/fg_cls_accuracy": 0.9747348550977654, "iteration": 4079, "loss_box_reg": 0.06041577830910683, "loss_cls": 0.024997691623866558, "loss_rpn_cls": 0.0023892336757853627, "loss_rpn_loc": 0.033885177224874496, "lr": 0.005, "roi_head/num_bg_samples": 388.5, "roi_head/num_fg_samples": 123.5, "rpn/num_neg_anchors": 172.5, "rpn/num_pos_anchors": 83.5, "time": 0.8808629795003071, "total_loss": 0.1258070394396782}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013304524999512068, "eta_seconds": 8622.8361129201, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0185546875, "fast_rcnn/fg_cls_accuracy": 0.9814453125, "iteration": 4099, "loss_box_reg": 0.05665453523397446, "loss_cls": 0.02086931560188532, "loss_rpn_cls": 0.0020721667679026723, "loss_rpn_loc": 0.032867273315787315, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 166.0, "rpn/num_pos_anchors": 90.0, "time": 0.8957161810003527, "total_loss": 0.12901447108015418}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01389541300068231, "eta_seconds": 8609.213105755536, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021978142556179775, "fast_rcnn/fg_cls_accuracy": 0.9780218574438202, "iteration": 4119, "loss_box_reg": 0.06112395226955414, "loss_cls": 0.0211090799421072, "loss_rpn_cls": 0.002453662804327905, "loss_rpn_loc": 0.03786292113363743, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.375, "rpn/num_pos_anchors": 94.625, "time": 0.8970748760002607, "total_loss": 0.13180671783629805}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013343292500394455, "eta_seconds": 8593.27903537613, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0283203125, "fast_rcnn/fg_cls_accuracy": 0.9716796875, "iteration": 4139, "loss_box_reg": 0.07672134041786194, "loss_cls": 0.028643625788390636, "loss_rpn_cls": 0.0022411660756915808, "loss_rpn_loc": 0.03565843217074871, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8405602805005401, "total_loss": 0.14650720910867676}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.010753457500868535, "eta_seconds": 8575.850216726143, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.021805205331412104, "fast_rcnn/fg_cls_accuracy": 0.9781947946685878, "iteration": 4159, "loss_box_reg": 0.06780307739973068, "loss_cls": 0.027994119562208652, "loss_rpn_cls": 0.00258387578651309, "loss_rpn_loc": 0.033184777945280075, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.0, "rpn/num_pos_anchors": 87.0, "time": 0.8456791519993203, "total_loss": 0.13741438509896398}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01744608349963528, "eta_seconds": 8560.807449318956, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024896364795918367, "fast_rcnn/fg_cls_accuracy": 0.9751036352040816, "iteration": 4179, "loss_box_reg": 0.0685216449201107, "loss_cls": 0.02508564107120037, "loss_rpn_cls": 0.0029065579874441028, "loss_rpn_loc": 0.04283138923346996, "lr": 0.005, "roi_head/num_bg_samples": 393.625, "roi_head/num_fg_samples": 118.375, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.9070378970000093, "total_loss": 0.14319775789044797}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 93.40862195109425, "bbox/AP50": 98.96374346407794, "bbox/AP75": 98.96286729535807, "bbox/APl": 94.03985809640986, "bbox/APm": 91.7385771795752, "bbox/APs": NaN, "data_time": 0.014953972499824886, "eta_seconds": 8544.73683586187, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4199, "loss_box_reg": 0.06535263359546661, "loss_cls": 0.02621511183679104, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0030301553197205067, "loss_rpn_loc": 0.03586420789361, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.86083233249974, "total_loss": 0.14097663236316293, "validation_loss": 0.14196365930424992}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015456654999979946, "eta_seconds": 8526.088662350707, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022115090722165106, "fast_rcnn/fg_cls_accuracy": 0.9778849092778349, "iteration": 4219, "loss_box_reg": 0.054392239078879356, "loss_cls": 0.022306395694613457, "loss_rpn_cls": 0.002272343495860696, "loss_rpn_loc": 0.03396121598780155, "lr": 0.005, "roi_head/num_bg_samples": 385.625, "roi_head/num_fg_samples": 126.375, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8550791284997104, "total_loss": 0.11667074263095856}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014931448999959684, "eta_seconds": 8509.863917441864, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01743958153114187, "fast_rcnn/fg_cls_accuracy": 0.9825604184688581, "iteration": 4239, "loss_box_reg": 0.05129031836986542, "loss_cls": 0.01760159432888031, "loss_rpn_cls": 0.0029446481494233012, "loss_rpn_loc": 0.03069587703794241, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 175.375, "rpn/num_pos_anchors": 80.625, "time": 0.8826235694996285, "total_loss": 0.10483503562863916}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01954176850085787, "eta_seconds": 8496.111869716606, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.020697939712389382, "fast_rcnn/fg_cls_accuracy": 0.9793020602876106, "iteration": 4259, "loss_box_reg": 0.056341201066970825, "loss_cls": 0.02312588132917881, "loss_rpn_cls": 0.0025954004377126694, "loss_rpn_loc": 0.04303659126162529, "lr": 0.005, "roi_head/num_bg_samples": 400.125, "roi_head/num_fg_samples": 111.875, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8868610045010428, "total_loss": 0.1288284579059109}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012749520000397752, "eta_seconds": 8478.667845756609, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.02358640160891089, "fast_rcnn/fg_cls_accuracy": 0.9764135983910891, "iteration": 4279, "loss_box_reg": 0.07378086820244789, "loss_cls": 0.02591687999665737, "loss_rpn_cls": 0.0020061879768036306, "loss_rpn_loc": 0.035794125869870186, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8801597854990177, "total_loss": 0.14331023581326008}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013414688999546343, "eta_seconds": 8454.956621716445, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.025853207236842105, "fast_rcnn/fg_cls_accuracy": 0.974146792763158, "iteration": 4299, "loss_box_reg": 0.08156145364046097, "loss_cls": 0.027444886043667793, "loss_rpn_cls": 0.0019563272362574935, "loss_rpn_loc": 0.036992449313402176, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8439608360004058, "total_loss": 0.15209498221520334}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014210977000402636, "eta_seconds": 8435.753309788897, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.024087717563291138, "fast_rcnn/fg_cls_accuracy": 0.9759122824367088, "iteration": 4319, "loss_box_reg": 0.06321131065487862, "loss_cls": 0.02684237528592348, "loss_rpn_cls": 0.0027903582667931914, "loss_rpn_loc": 0.039607759565114975, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 161.25, "rpn/num_pos_anchors": 94.75, "time": 0.8749667014999432, "total_loss": 0.13853128533810377}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014168770499964012, "eta_seconds": 8418.325867768881, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.02317734089352923, "fast_rcnn/fg_cls_accuracy": 0.9768226591064708, "iteration": 4339, "loss_box_reg": 0.05184036307036877, "loss_cls": 0.0229664733633399, "loss_rpn_cls": 0.002469330560415983, "loss_rpn_loc": 0.03057936020195484, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8862034110006789, "total_loss": 0.11455292662139982}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011720945999513788, "eta_seconds": 8400.027674726469, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02158229590108401, "fast_rcnn/fg_cls_accuracy": 0.9784177040989159, "iteration": 4359, "loss_box_reg": 0.06309510581195354, "loss_cls": 0.02259633969515562, "loss_rpn_cls": 0.002194952219724655, "loss_rpn_loc": 0.03172831051051617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8717078200006654, "total_loss": 0.1274147952790372}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01361429050029983, "eta_seconds": 8383.61604435138, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4379, "loss_box_reg": 0.06567597761750221, "loss_cls": 0.02794388961046934, "loss_rpn_cls": 0.0024444819428026676, "loss_rpn_loc": 0.03958482854068279, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8592332269990948, "total_loss": 0.14897812146227807}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014307960500445915, "eta_seconds": 8366.704392926298, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02046009062391077, "fast_rcnn/fg_cls_accuracy": 0.9795399093760893, "iteration": 4399, "loss_box_reg": 0.06178067624568939, "loss_cls": 0.02468185406178236, "loss_rpn_cls": 0.0023401040816679597, "loss_rpn_loc": 0.037465330213308334, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 158.625, "rpn/num_pos_anchors": 97.375, "time": 0.8559774465002192, "total_loss": 0.13837072649039328}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012621712000509433, "eta_seconds": 8353.963404295257, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4419, "loss_box_reg": 0.06035963259637356, "loss_cls": 0.022992623038589954, "loss_rpn_cls": 0.002158885123208165, "loss_rpn_loc": 0.027208128944039345, "lr": 0.005, "roi_head/num_bg_samples": 384.875, "roi_head/num_fg_samples": 127.125, "rpn/num_neg_anchors": 170.0, "rpn/num_pos_anchors": 86.0, "time": 0.8953435434996209, "total_loss": 0.12231088278349489}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014090943000155676, "eta_seconds": 8335.499325341836, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4439, "loss_box_reg": 0.06730298697948456, "loss_cls": 0.023621671833097935, "loss_rpn_cls": 0.0021845350274816155, "loss_rpn_loc": 0.0352974496781826, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.25, "rpn/num_pos_anchors": 97.75, "time": 0.8675036810000165, "total_loss": 0.13669328414835036}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012706199500826187, "eta_seconds": 8316.448691135098, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01759963518722467, "fast_rcnn/fg_cls_accuracy": 0.9824003648127753, "iteration": 4459, "loss_box_reg": 0.06193057633936405, "loss_cls": 0.021720517426729202, "loss_rpn_cls": 0.0018856043461710215, "loss_rpn_loc": 0.03091004677116871, "lr": 0.005, "roi_head/num_bg_samples": 387.375, "roi_head/num_fg_samples": 124.625, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8937260224993224, "total_loss": 0.1227074918569997}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013523801500014088, "eta_seconds": 8296.77059710459, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4479, "loss_box_reg": 0.0764407068490982, "loss_cls": 0.02567237988114357, "loss_rpn_cls": 0.001991047873161733, "loss_rpn_loc": 0.03321711905300617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.875, "rpn/num_pos_anchors": 91.125, "time": 0.8536981769993872, "total_loss": 0.14464460092131048}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 93.00705134353211, "bbox/AP50": 98.93110542393643, "bbox/AP75": 98.93110542393643, "bbox/APl": 93.71191938022734, "bbox/APm": 91.30748008841427, "bbox/APs": NaN, "data_time": 0.014672981499643356, "eta_seconds": 8276.31107170184, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 4499, "loss_box_reg": 0.06515203043818474, "loss_cls": 0.022937876172363758, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.002306717331521213, "loss_rpn_loc": 0.03413390927016735, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.853352267500668, "total_loss": 0.12754546070937067, "validation_loss": 0.1391322108589738}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015802942000846087, "eta_seconds": 8253.11384120532, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 4519, "loss_box_reg": 0.06294054538011551, "loss_cls": 0.023245316930115223, "loss_rpn_cls": 0.0022322835866361856, "loss_rpn_loc": 0.03262490779161453, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.852351106000242, "total_loss": 0.13475362805183977}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015078195000569394, "eta_seconds": 8230.85458721614, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4539, "loss_box_reg": 0.07160457968711853, "loss_cls": 0.024476973339915276, "loss_rpn_cls": 0.002147287130355835, "loss_rpn_loc": 0.03720744699239731, "lr": 0.005, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8453313475001778, "total_loss": 0.13857831864152104}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01636703949952789, "eta_seconds": 8213.274710050322, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.023623511904761904, "fast_rcnn/fg_cls_accuracy": 0.9763764880952381, "iteration": 4559, "loss_box_reg": 0.05875660479068756, "loss_cls": 0.023611723445355892, "loss_rpn_cls": 0.0022019054740667343, "loss_rpn_loc": 0.0357234925031662, "lr": 0.005, "roi_head/num_bg_samples": 391.625, "roi_head/num_fg_samples": 120.375, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.8867215840000426, "total_loss": 0.12488182925153524}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013644237999869802, "eta_seconds": 8196.326549555364, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.023111155063291138, "fast_rcnn/fg_cls_accuracy": 0.9768888449367088, "iteration": 4579, "loss_box_reg": 0.07077584601938725, "loss_cls": 0.03129696846008301, "loss_rpn_cls": 0.0026352115673944354, "loss_rpn_loc": 0.042789068073034286, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8891512034997504, "total_loss": 0.15943694883026183}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015678855999794905, "eta_seconds": 8178.476384830322, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 4599, "loss_box_reg": 0.06418749317526817, "loss_cls": 0.02551879547536373, "loss_rpn_cls": 0.0027105951448902488, "loss_rpn_loc": 0.03643552586436272, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8658532284998728, "total_loss": 0.13786764186806977}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013482987999850593, "eta_seconds": 8161.526309455352, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 4619, "loss_box_reg": 0.057235922664403915, "loss_cls": 0.027666328474879265, "loss_rpn_cls": 0.0028786591719835997, "loss_rpn_loc": 0.04224038124084473, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8686648815000808, "total_loss": 0.147602929151617}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014154113498989318, "eta_seconds": 8143.856864066196, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.018079134487803218, "fast_rcnn/fg_cls_accuracy": 0.9819208655121967, "iteration": 4639, "loss_box_reg": 0.06335645914077759, "loss_cls": 0.021422572433948517, "loss_rpn_cls": 0.002599337021820247, "loss_rpn_loc": 0.03555195406079292, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8944120790001762, "total_loss": 0.12154645670671016}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014369196500410908, "eta_seconds": 8126.457319436207, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.019082395186335404, "fast_rcnn/fg_cls_accuracy": 0.9809176048136645, "iteration": 4659, "loss_box_reg": 0.06376534700393677, "loss_cls": 0.02196851186454296, "loss_rpn_cls": 0.002237886539660394, "loss_rpn_loc": 0.033371662721037865, "lr": 0.005, "roi_head/num_bg_samples": 390.5, "roi_head/num_fg_samples": 121.5, "rpn/num_neg_anchors": 170.75, "rpn/num_pos_anchors": 85.25, "time": 0.8616984569998749, "total_loss": 0.1318136416375637}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015702468500421674, "eta_seconds": 8108.360181842967, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 4679, "loss_box_reg": 0.07680578529834747, "loss_cls": 0.0263025164604187, "loss_rpn_cls": 0.002300129854120314, "loss_rpn_loc": 0.03531237877905369, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8752102919997924, "total_loss": 0.14133498328737915}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015292086000044947, "eta_seconds": 8090.584890122356, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019212366580787635, "fast_rcnn/fg_cls_accuracy": 0.9807876334192124, "iteration": 4699, "loss_box_reg": 0.0615016333758831, "loss_cls": 0.02258227299898863, "loss_rpn_cls": 0.0023130879271775484, "loss_rpn_loc": 0.03282614052295685, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 163.0, "rpn/num_pos_anchors": 93.0, "time": 0.8670793040009812, "total_loss": 0.1370764736784622}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014544139499776065, "eta_seconds": 8074.003555504269, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025486010174418604, "fast_rcnn/fg_cls_accuracy": 0.9745139898255815, "iteration": 4719, "loss_box_reg": 0.06041738949716091, "loss_cls": 0.02572917565703392, "loss_rpn_cls": 0.0029287008801475167, "loss_rpn_loc": 0.03309382498264313, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.25, "rpn/num_pos_anchors": 86.75, "time": 0.8711159704998863, "total_loss": 0.1269720789277926}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014847834499050805, "eta_seconds": 8059.29771503509, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.025900135869565216, "fast_rcnn/fg_cls_accuracy": 0.9740998641304348, "iteration": 4739, "loss_box_reg": 0.0714801549911499, "loss_cls": 0.027188056148588657, "loss_rpn_cls": 0.0027070617070421576, "loss_rpn_loc": 0.03857620805501938, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8524405455000306, "total_loss": 0.14026663172990084}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01192657099909411, "eta_seconds": 8049.82534613164, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.02163327660891089, "fast_rcnn/fg_cls_accuracy": 0.9783667233910891, "iteration": 4759, "loss_box_reg": 0.06939147785305977, "loss_cls": 0.023606639355421066, "loss_rpn_cls": 0.0027515310794115067, "loss_rpn_loc": 0.03266059421002865, "lr": 0.005, "roi_head/num_bg_samples": 388.875, "roi_head/num_fg_samples": 123.125, "rpn/num_neg_anchors": 159.75, "rpn/num_pos_anchors": 96.25, "time": 0.8984915240007467, "total_loss": 0.1395235169911757}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014523527000164904, "eta_seconds": 8031.938204672058, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024965251150306747, "fast_rcnn/fg_cls_accuracy": 0.9750347488496933, "iteration": 4779, "loss_box_reg": 0.05777068808674812, "loss_cls": 0.023717678152024746, "loss_rpn_cls": 0.0021182504715397954, "loss_rpn_loc": 0.03053051419556141, "lr": 0.005, "roi_head/num_bg_samples": 389.625, "roi_head/num_fg_samples": 122.375, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8574463155000558, "total_loss": 0.12371064920444041}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 92.83870913222127, "bbox/AP50": 98.89921854644973, "bbox/AP75": 98.89912728642817, "bbox/APl": 93.47087851814192, "bbox/APm": 91.12752205685403, "bbox/APs": NaN, "data_time": 0.012065286000506603, "eta_seconds": 8013.493554443942, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 4799, "loss_box_reg": 0.06852671504020691, "loss_cls": 0.024018924683332443, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0019923251820728183, "loss_rpn_loc": 0.031630223616957664, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8492078769995715, "total_loss": 0.12812982744071633, "validation_loss": 0.13883173140969918}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014361648500198498, "eta_seconds": 7997.974128998968, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022432739674118983, "fast_rcnn/fg_cls_accuracy": 0.9775672603258809, "iteration": 4819, "loss_box_reg": 0.06308107823133469, "loss_cls": 0.026020622812211514, "loss_rpn_cls": 0.0019791799131780863, "loss_rpn_loc": 0.028659190982580185, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.8516874639999514, "total_loss": 0.12498592003248632}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01331285400010529, "eta_seconds": 7975.913023215084, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 4839, "loss_box_reg": 0.0646427609026432, "loss_cls": 0.020347592420876026, "loss_rpn_cls": 0.001991485129110515, "loss_rpn_loc": 0.033798862248659134, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.125, "rpn/num_pos_anchors": 94.875, "time": 0.8548326489999454, "total_loss": 0.12101646140217781}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014856578499347961, "eta_seconds": 7952.287270900327, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.022954705056179775, "fast_rcnn/fg_cls_accuracy": 0.9770452949438202, "iteration": 4859, "loss_box_reg": 0.06417588889598846, "loss_cls": 0.024928205646574497, "loss_rpn_cls": 0.0023953185882419348, "loss_rpn_loc": 0.0365652646869421, "lr": 0.005, "roi_head/num_bg_samples": 389.5, "roi_head/num_fg_samples": 122.5, "rpn/num_neg_anchors": 153.75, "rpn/num_pos_anchors": 102.25, "time": 0.8659156755002186, "total_loss": 0.13248549425043166}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015284542999324913, "eta_seconds": 7934.0097605425235, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.026614481409001956, "fast_rcnn/fg_cls_accuracy": 0.9733855185909981, "iteration": 4879, "loss_box_reg": 0.05695581994950771, "loss_cls": 0.026949993334710598, "loss_rpn_cls": 0.0022568139247596264, "loss_rpn_loc": 0.031991198658943176, "lr": 0.005, "roi_head/num_bg_samples": 385.375, "roi_head/num_fg_samples": 126.625, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8785490965001372, "total_loss": 0.13178676005918533}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012375500499729242, "eta_seconds": 7916.612523922542, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 4899, "loss_box_reg": 0.054332148283720016, "loss_cls": 0.025169258937239647, "loss_rpn_cls": 0.0021670913556590676, "loss_rpn_loc": 0.035927778109908104, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8605520105002142, "total_loss": 0.12185906816739589}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014561972000592505, "eta_seconds": 7899.583608123161, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.023943392839564794, "fast_rcnn/fg_cls_accuracy": 0.9760566071604352, "iteration": 4919, "loss_box_reg": 0.06230667047202587, "loss_cls": 0.024050562642514706, "loss_rpn_cls": 0.0027801310643553734, "loss_rpn_loc": 0.041868120431900024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.9079685364995385, "total_loss": 0.1367650660686195}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01624575099958747, "eta_seconds": 7882.62070578202, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.019130335409405175, "fast_rcnn/fg_cls_accuracy": 0.9808696645905948, "iteration": 4939, "loss_box_reg": 0.054358769208192825, "loss_cls": 0.020983748137950897, "loss_rpn_cls": 0.002553392667323351, "loss_rpn_loc": 0.031057841144502163, "lr": 0.005, "roi_head/num_bg_samples": 394.625, "roi_head/num_fg_samples": 117.375, "rpn/num_neg_anchors": 172.125, "rpn/num_pos_anchors": 83.875, "time": 0.8572734889994535, "total_loss": 0.11413180537056178}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01480730749972281, "eta_seconds": 7863.060794523997, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 4959, "loss_box_reg": 0.05059147626161575, "loss_cls": 0.023940959945321083, "loss_rpn_cls": 0.0020585795864462852, "loss_rpn_loc": 0.02574349381029606, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 173.625, "rpn/num_pos_anchors": 82.375, "time": 0.8511550149996765, "total_loss": 0.11159791017416865}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013298474000293936, "eta_seconds": 7845.386798191916, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.020877322635135136, "fast_rcnn/fg_cls_accuracy": 0.9791226773648649, "iteration": 4979, "loss_box_reg": 0.07002099975943565, "loss_cls": 0.023530988954007626, "loss_rpn_cls": 0.002559944987297058, "loss_rpn_loc": 0.03650126792490482, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.865666287500062, "total_loss": 0.12548251438420266}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013746322499173402, "eta_seconds": 7826.405837039674, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021134797199769052, "fast_rcnn/fg_cls_accuracy": 0.9788652028002309, "iteration": 4999, "loss_box_reg": 0.06474976241588593, "loss_cls": 0.021297583356499672, "loss_rpn_cls": 0.002553505590185523, "loss_rpn_loc": 0.03182519692927599, "lr": 0.005, "roi_head/num_bg_samples": 397.75, "roi_head/num_fg_samples": 114.25, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8724677414993494, "total_loss": 0.12312883127015084}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.017712214999846765, "eta_seconds": 7811.00530376116, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01583389037433155, "fast_rcnn/fg_cls_accuracy": 0.9841661096256684, "iteration": 5019, "loss_box_reg": 0.05722466856241226, "loss_cls": 0.02171662263572216, "loss_rpn_cls": 0.002134993555955589, "loss_rpn_loc": 0.029185540974140167, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8960107909997532, "total_loss": 0.12077607901301235}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011359848999745736, "eta_seconds": 7795.350431704812, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 5039, "loss_box_reg": 0.06120045855641365, "loss_cls": 0.022784790955483913, "loss_rpn_cls": 0.0019911217968910933, "loss_rpn_loc": 0.031012319959700108, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.25, "rpn/num_pos_anchors": 89.75, "time": 0.8855154500006392, "total_loss": 0.1210803515277803}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013461599499350996, "eta_seconds": 7777.597656692167, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02298001126126126, "fast_rcnn/fg_cls_accuracy": 0.9770199887387387, "iteration": 5059, "loss_box_reg": 0.05519508570432663, "loss_cls": 0.021881303749978542, "loss_rpn_cls": 0.0015915895928628743, "loss_rpn_loc": 0.028308226726949215, "lr": 0.005, "roi_head/num_bg_samples": 399.375, "roi_head/num_fg_samples": 112.625, "rpn/num_neg_anchors": 168.0, "rpn/num_pos_anchors": 88.0, "time": 0.8794450919995143, "total_loss": 0.11374891316518188}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014579236500139814, "eta_seconds": 7759.600550817865, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01996970663265306, "fast_rcnn/fg_cls_accuracy": 0.9800302933673469, "iteration": 5079, "loss_box_reg": 0.06210821121931076, "loss_cls": 0.021420322358608246, "loss_rpn_cls": 0.002174493740312755, "loss_rpn_loc": 0.03592707775533199, "lr": 0.005, "roi_head/num_bg_samples": 384.125, "roi_head/num_fg_samples": 127.875, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8945027979998486, "total_loss": 0.12663503305520862}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 93.27516183589476, "bbox/AP50": 98.92261668327345, "bbox/AP75": 98.92261668327345, "bbox/APl": 94.44478261656324, "bbox/APm": 91.0697213988469, "bbox/APs": NaN, "data_time": 0.012990881500627438, "eta_seconds": 7742.204293557877, "fast_rcnn/cls_accuracy": 0.9853515625, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5099, "loss_box_reg": 0.06781146675348282, "loss_cls": 0.02289230190217495, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0022374700056388974, "loss_rpn_loc": 0.03365788422524929, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8827287754993449, "total_loss": 0.1412262988742441, "validation_loss": 0.1673684855862346}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015810367000085535, "eta_seconds": 7710.074186440191, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5119, "loss_box_reg": 0.06492654047906399, "loss_cls": 0.022693458944559097, "loss_rpn_cls": 0.0022741026477888227, "loss_rpn_loc": 0.031002508476376534, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8662360599992098, "total_loss": 0.1364175053895451}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012367580000500311, "eta_seconds": 7694.085353412403, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5139, "loss_box_reg": 0.07034502178430557, "loss_cls": 0.024538532830774784, "loss_rpn_cls": 0.0024909517960622907, "loss_rpn_loc": 0.043401483446359634, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8675591125002029, "total_loss": 0.1635031864279881}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01278185899991513, "eta_seconds": 7676.719174982401, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021799902947443932, "fast_rcnn/fg_cls_accuracy": 0.9782000970525561, "iteration": 5159, "loss_box_reg": 0.06870999187231064, "loss_cls": 0.022335607558488846, "loss_rpn_cls": 0.0037398403510451317, "loss_rpn_loc": 0.03882879391312599, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 156.25, "rpn/num_pos_anchors": 99.75, "time": 0.8584405870005867, "total_loss": 0.14448954432737082}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014791360999879544, "eta_seconds": 7654.754357859041, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.021103493480725623, "fast_rcnn/fg_cls_accuracy": 0.9788965065192744, "iteration": 5179, "loss_box_reg": 0.062266405671834946, "loss_cls": 0.020777718164026737, "loss_rpn_cls": 0.0027317109052091837, "loss_rpn_loc": 0.03314981982111931, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.125, "rpn/num_pos_anchors": 96.875, "time": 0.8586420629999338, "total_loss": 0.1260088358540088}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0178490789994612, "eta_seconds": 7639.841349945431, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.020830322300910538, "fast_rcnn/fg_cls_accuracy": 0.9791696776990895, "iteration": 5199, "loss_box_reg": 0.05128978006541729, "loss_cls": 0.020412922836840153, "loss_rpn_cls": 0.00241474446374923, "loss_rpn_loc": 0.032859938219189644, "lr": 0.005, "roi_head/num_bg_samples": 397.875, "roi_head/num_fg_samples": 114.125, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8652067134999015, "total_loss": 0.11148050939664245}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014005898499817704, "eta_seconds": 7625.286419499909, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5219, "loss_box_reg": 0.07316218316555023, "loss_cls": 0.02596404869109392, "loss_rpn_cls": 0.002091426053084433, "loss_rpn_loc": 0.02928838226944208, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.8749200555002972, "total_loss": 0.13676173146814108}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014579200498701539, "eta_seconds": 7606.520547918383, "fast_rcnn/cls_accuracy": 0.988037109375, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 5239, "loss_box_reg": 0.057390253990888596, "loss_cls": 0.025880426168441772, "loss_rpn_cls": 0.0021389470202848315, "loss_rpn_loc": 0.030492116697132587, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.25, "rpn/num_pos_anchors": 98.75, "time": 0.8600255340006697, "total_loss": 0.12460418161936104}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013745038500019291, "eta_seconds": 7588.538982743184, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5259, "loss_box_reg": 0.056663066148757935, "loss_cls": 0.023413637652993202, "loss_rpn_cls": 0.0019466887461021543, "loss_rpn_loc": 0.028949135914444923, "lr": 0.005, "roi_head/num_bg_samples": 385.25, "roi_head/num_fg_samples": 126.75, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8934628930010149, "total_loss": 0.11742609593784437}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013735102999817173, "eta_seconds": 7571.79154187835, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.021936217350746266, "fast_rcnn/fg_cls_accuracy": 0.9780637826492538, "iteration": 5279, "loss_box_reg": 0.053737033158540726, "loss_cls": 0.020394417457282543, "loss_rpn_cls": 0.0022291388595476747, "loss_rpn_loc": 0.03190678358078003, "lr": 0.005, "roi_head/num_bg_samples": 387.0, "roi_head/num_fg_samples": 125.0, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.888264144000459, "total_loss": 0.10988271929090843}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014853118500468554, "eta_seconds": 7555.155925972386, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5299, "loss_box_reg": 0.06301657855510712, "loss_cls": 0.026609317399561405, "loss_rpn_cls": 0.0028848357032984495, "loss_rpn_loc": 0.03864687494933605, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8611808724999719, "total_loss": 0.1402190721128136}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.019291798500489676, "eta_seconds": 7538.447945299933, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5319, "loss_box_reg": 0.05684913694858551, "loss_cls": 0.023610541597008705, "loss_rpn_cls": 0.0021845183800905943, "loss_rpn_loc": 0.036675380542874336, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.883741806499529, "total_loss": 0.12332985328976065}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011460525499387586, "eta_seconds": 7517.054734584882, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5339, "loss_box_reg": 0.05149811878800392, "loss_cls": 0.021740407682955265, "loss_rpn_cls": 0.0019605476409196854, "loss_rpn_loc": 0.025657817721366882, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 175.875, "rpn/num_pos_anchors": 80.125, "time": 0.8436655450004764, "total_loss": 0.1036763918818906}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014291302999481559, "eta_seconds": 7497.301465048081, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01953339629120879, "fast_rcnn/fg_cls_accuracy": 0.9804666037087912, "iteration": 5359, "loss_box_reg": 0.08082463592290878, "loss_cls": 0.025784828700125217, "loss_rpn_cls": 0.0018990978132933378, "loss_rpn_loc": 0.028976663015782833, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.875, "rpn/num_pos_anchors": 94.125, "time": 0.8448055550006757, "total_loss": 0.13354162609903142}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012258945499524998, "eta_seconds": 7480.5243409162, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021518049568965518, "fast_rcnn/fg_cls_accuracy": 0.9784819504310345, "iteration": 5379, "loss_box_reg": 0.05838654190301895, "loss_cls": 0.022231215611100197, "loss_rpn_cls": 0.002136561321094632, "loss_rpn_loc": 0.02987600862979889, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8743206509998345, "total_loss": 0.12518500722944736}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 95.04890968998043, "bbox/AP50": 98.94553151126911, "bbox/AP75": 98.94553151126911, "bbox/APl": 96.15622781452859, "bbox/APm": 92.46222763709739, "bbox/APs": NaN, "data_time": 0.017025694999574625, "eta_seconds": 7462.112617529453, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 5399, "loss_box_reg": 0.06437629461288452, "loss_cls": 0.021576158702373505, "loss_failed_to_get_better_count": 3.0, "loss_rpn_cls": 0.0018772268667817116, "loss_rpn_loc": 0.03226642683148384, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.839295048999702, "total_loss": 0.12637696543242782, "validation_loss": 0.13707834863576526}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014937989500140247, "eta_seconds": 7443.814259008943, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.02089447176395939, "fast_rcnn/fg_cls_accuracy": 0.9791055282360406, "iteration": 5419, "loss_box_reg": 0.0552052017301321, "loss_cls": 0.023376869969069958, "loss_rpn_cls": 0.002138674957677722, "loss_rpn_loc": 0.03407907858490944, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.75, "rpn/num_pos_anchors": 92.25, "time": 0.8698784409998552, "total_loss": 0.1193440561182797}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013423880000118515, "eta_seconds": 7427.8900407680385, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.025390625, "fast_rcnn/fg_cls_accuracy": 0.974609375, "iteration": 5439, "loss_box_reg": 0.05655006691813469, "loss_cls": 0.020559591241180897, "loss_rpn_cls": 0.002320499625056982, "loss_rpn_loc": 0.02890327014029026, "lr": 0.005, "roi_head/num_bg_samples": 391.0, "roi_head/num_fg_samples": 121.0, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.8760674590002964, "total_loss": 0.11336366704199463}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013994625999657728, "eta_seconds": 7409.115206408971, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.02149487567204301, "fast_rcnn/fg_cls_accuracy": 0.978505124327957, "iteration": 5459, "loss_box_reg": 0.07386057823896408, "loss_cls": 0.026604370214045048, "loss_rpn_cls": 0.002588826813735068, "loss_rpn_loc": 0.03413362801074982, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.5, "rpn/num_pos_anchors": 95.5, "time": 0.8716043390004415, "total_loss": 0.13196638779481873}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015597055500620627, "eta_seconds": 7391.041927670588, "fast_rcnn/cls_accuracy": 0.98974609375, "fast_rcnn/false_negative": 0.020091788378455145, "fast_rcnn/fg_cls_accuracy": 0.9799082116215448, "iteration": 5479, "loss_box_reg": 0.07050042226910591, "loss_cls": 0.02474079467356205, "loss_rpn_cls": 0.0021399272372946143, "loss_rpn_loc": 0.03489230014383793, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.625, "rpn/num_pos_anchors": 98.375, "time": 0.8589253799991639, "total_loss": 0.13852309167850763}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013122772500537394, "eta_seconds": 7380.782008658164, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5499, "loss_box_reg": 0.05695950612425804, "loss_cls": 0.02017846144735813, "loss_rpn_cls": 0.0020662585739046335, "loss_rpn_loc": 0.032298844307661057, "lr": 0.005, "roi_head/num_bg_samples": 387.75, "roi_head/num_fg_samples": 124.25, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8999541200000749, "total_loss": 0.12246235285419971}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.0167387419996885, "eta_seconds": 7363.790504257526, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.020821030161507912, "fast_rcnn/fg_cls_accuracy": 0.9791789698384921, "iteration": 5519, "loss_box_reg": 0.058595409616827965, "loss_cls": 0.02239445224404335, "loss_rpn_cls": 0.0017480264650657773, "loss_rpn_loc": 0.027675089426338673, "lr": 0.005, "roi_head/num_bg_samples": 392.75, "roi_head/num_fg_samples": 119.25, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8498236614996131, "total_loss": 0.1146762321004644}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013517774999854737, "eta_seconds": 7351.907261574616, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.025513980263157897, "fast_rcnn/fg_cls_accuracy": 0.9744860197368421, "iteration": 5539, "loss_box_reg": 0.05855027958750725, "loss_cls": 0.02038880344480276, "loss_rpn_cls": 0.0016652494668960571, "loss_rpn_loc": 0.032311808317899704, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 179.25, "rpn/num_pos_anchors": 76.75, "time": 0.8776390135008114, "total_loss": 0.1092486809939146}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.011882913499903225, "eta_seconds": 7331.50439608604, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.027322972074468085, "fast_rcnn/fg_cls_accuracy": 0.9726770279255319, "iteration": 5559, "loss_box_reg": 0.07120954245328903, "loss_cls": 0.02515412401407957, "loss_rpn_cls": 0.002385318512097001, "loss_rpn_loc": 0.05022135563194752, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.5, "rpn/num_pos_anchors": 89.5, "time": 0.8847628325002006, "total_loss": 0.15015550452517346}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014155146999655699, "eta_seconds": 7319.531056854045, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 5579, "loss_box_reg": 0.05726276524364948, "loss_cls": 0.021695980802178383, "loss_rpn_cls": 0.003677344066090882, "loss_rpn_loc": 0.03555099293589592, "lr": 0.005, "roi_head/num_bg_samples": 389.375, "roi_head/num_fg_samples": 122.625, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.889490406000732, "total_loss": 0.1365722599439323}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015677778999815928, "eta_seconds": 7308.0039661134015, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01936768149882904, "fast_rcnn/fg_cls_accuracy": 0.9806323185011709, "iteration": 5599, "loss_box_reg": 0.05844062566757202, "loss_cls": 0.024206336587667465, "loss_rpn_cls": 0.0030458024702966213, "loss_rpn_loc": 0.029629665426909924, "lr": 0.005, "roi_head/num_bg_samples": 385.5, "roi_head/num_fg_samples": 126.5, "rpn/num_neg_anchors": 157.375, "rpn/num_pos_anchors": 98.625, "time": 0.8965334399999847, "total_loss": 0.12030651373788714}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.012024970000311441, "eta_seconds": 7291.668960754016, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0218780449610245, "fast_rcnn/fg_cls_accuracy": 0.9781219550389755, "iteration": 5619, "loss_box_reg": 0.05273590423166752, "loss_cls": 0.022803835570812225, "loss_rpn_cls": 0.002020141459070146, "loss_rpn_loc": 0.03192746266722679, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.375, "rpn/num_pos_anchors": 90.625, "time": 0.8826613595001618, "total_loss": 0.11135749111417681}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01687377500002185, "eta_seconds": 7273.004645558488, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.025233133963598945, "fast_rcnn/fg_cls_accuracy": 0.9747668660364011, "iteration": 5639, "loss_box_reg": 0.05719747394323349, "loss_cls": 0.021588620729744434, "loss_rpn_cls": 0.0022916418965905905, "loss_rpn_loc": 0.03184593468904495, "lr": 0.005, "roi_head/num_bg_samples": 394.125, "roi_head/num_fg_samples": 117.875, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8682225524989917, "total_loss": 0.10914462374057621}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015325386500990135, "eta_seconds": 7258.687283364799, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 5659, "loss_box_reg": 0.06096772849559784, "loss_cls": 0.023034741170704365, "loss_rpn_cls": 0.0021676926407963037, "loss_rpn_loc": 0.034716688096523285, "lr": 0.005, "roi_head/num_bg_samples": 391.5, "roi_head/num_fg_samples": 120.5, "rpn/num_neg_anchors": 169.625, "rpn/num_pos_anchors": 86.375, "time": 0.8767866954995043, "total_loss": 0.12500563205685467}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013309132998983841, "eta_seconds": 7244.426740044826, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.02398894699691992, "fast_rcnn/fg_cls_accuracy": 0.9760110530030801, "iteration": 5679, "loss_box_reg": 0.056637827306985855, "loss_cls": 0.023409683257341385, "loss_rpn_cls": 0.0018303157994523644, "loss_rpn_loc": 0.031725311651825905, "lr": 0.005, "roi_head/num_bg_samples": 389.75, "roi_head/num_fg_samples": 122.25, "rpn/num_neg_anchors": 173.375, "rpn/num_pos_anchors": 82.625, "time": 0.890535961999376, "total_loss": 0.11612003430491313}

[07/29 20:00:10] detectron2 INFO: {"bbox/AP": 94.76483093972008, "bbox/AP50": 98.95816960546958, "bbox/AP75": 98.95816613684278, "bbox/APl": 95.88726467497828, "bbox/APm": 91.9470155575016, "bbox/APs": NaN, "data_time": 0.015500677500313031, "eta_seconds": 7227.014345524829, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 5699, "loss_box_reg": 0.05493253283202648, "loss_cls": 0.023701573722064495, "loss_failed_to_get_better_count": 4.0, "loss_rpn_cls": 0.0020725850481539965, "loss_rpn_loc": 0.02556756976991892, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 136.0, "rpn/num_pos_anchors": 120.0, "time": 0.8545353485005762, "total_loss": 0.11283672647550702, "validation_loss": 0.13626214306693646}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013604358499833324, "eta_seconds": 7392.379508102773, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 5719, "loss_box_reg": 0.05309678427875042, "loss_cls": 0.02268114034086466, "loss_rpn_cls": 0.0021833128994330764, "loss_rpn_loc": 0.02707052417099476, "lr": 0.005, "roi_head/num_bg_samples": 392.0, "roi_head/num_fg_samples": 120.0, "rpn/num_neg_anchors": 159.0, "rpn/num_pos_anchors": 97.0, "time": 0.8926916444997914, "total_loss": 0.11451471340842545}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.015987298999789346, "eta_seconds": 7188.175152442527, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021051465850515462, "fast_rcnn/fg_cls_accuracy": 0.9789485341494846, "iteration": 5739, "loss_box_reg": 0.05951076000928879, "loss_cls": 0.023711984045803547, "loss_rpn_cls": 0.0018305148114450276, "loss_rpn_loc": 0.027630437165498734, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.75, "rpn/num_pos_anchors": 86.25, "time": 0.8554933204995905, "total_loss": 0.12395974970422685}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014905454499967163, "eta_seconds": 7223.277383594634, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.023652985622065727, "fast_rcnn/fg_cls_accuracy": 0.9763470143779343, "iteration": 5759, "loss_box_reg": 0.05654006823897362, "loss_cls": 0.02517478819936514, "loss_rpn_cls": 0.0017927947919815779, "loss_rpn_loc": 0.032787472009658813, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 158.0, "rpn/num_pos_anchors": 98.0, "time": 0.8857991454997318, "total_loss": 0.12138733314350247}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.01699434449983528, "eta_seconds": 7176.641873838028, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.018342648232970542, "fast_rcnn/fg_cls_accuracy": 0.9816573517670295, "iteration": 5779, "loss_box_reg": 0.052232393994927406, "loss_cls": 0.020600381307303905, "loss_rpn_cls": 0.0019608945585787296, "loss_rpn_loc": 0.029133932664990425, "lr": 0.005, "roi_head/num_bg_samples": 386.375, "roi_head/num_fg_samples": 125.625, "rpn/num_neg_anchors": 163.375, "rpn/num_pos_anchors": 92.625, "time": 0.8720199460012736, "total_loss": 0.11441026319516823}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014282724500844779, "eta_seconds": 7172.263874174585, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.01818211500238755, "fast_rcnn/fg_cls_accuracy": 0.9818178849976125, "iteration": 5799, "loss_box_reg": 0.050656866282224655, "loss_cls": 0.021683708764612675, "loss_rpn_cls": 0.001988236152101308, "loss_rpn_loc": 0.027208236046135426, "lr": 0.005, "roi_head/num_bg_samples": 388.25, "roi_head/num_fg_samples": 123.75, "rpn/num_neg_anchors": 172.25, "rpn/num_pos_anchors": 83.75, "time": 0.8796674135010107, "total_loss": 0.10726175655145198}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014862680999613076, "eta_seconds": 7154.77268072458, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.02212482516058067, "fast_rcnn/fg_cls_accuracy": 0.9778751748394193, "iteration": 5819, "loss_box_reg": 0.05587140657007694, "loss_cls": 0.020106347277760506, "loss_rpn_cls": 0.0017604240565560758, "loss_rpn_loc": 0.026038912124931812, "lr": 0.005, "roi_head/num_bg_samples": 390.75, "roi_head/num_fg_samples": 121.25, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8804373979992306, "total_loss": 0.11561050586169586}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.013714960000470455, "eta_seconds": 7188.24583053667, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.022190925442019886, "fast_rcnn/fg_cls_accuracy": 0.9778090745579802, "iteration": 5839, "loss_box_reg": 0.0543832927942276, "loss_cls": 0.02642088010907173, "loss_rpn_cls": 0.0017762843635864556, "loss_rpn_loc": 0.029253208078444004, "lr": 0.005, "roi_head/num_bg_samples": 398.375, "roi_head/num_fg_samples": 113.625, "rpn/num_neg_anchors": 167.25, "rpn/num_pos_anchors": 88.75, "time": 0.901589898498969, "total_loss": 0.11000737629365176}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014273307000621571, "eta_seconds": 7148.773202258569, "fast_rcnn/cls_accuracy": 0.989990234375, "fast_rcnn/false_negative": 0.020225876046025104, "fast_rcnn/fg_cls_accuracy": 0.9797741239539749, "iteration": 5859, "loss_box_reg": 0.05492107383906841, "loss_cls": 0.026652997359633446, "loss_rpn_cls": 0.001970694400370121, "loss_rpn_loc": 0.031418231315910816, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.375, "rpn/num_pos_anchors": 97.625, "time": 0.8625747404994399, "total_loss": 0.12152837449684739}

[07/29 20:00:10] detectron2 INFO: {"data_time": 0.014935713999875588, "eta_seconds": 7108.47582739835, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.026115313914027147, "fast_rcnn/fg_cls_accuracy": 0.9738846860859729, "iteration": 5879, "loss_box_reg": 0.0699341669678688, "loss_cls": 0.024375375360250473, "loss_rpn_cls": 0.0016963491798378527, "loss_rpn_loc": 0.027780428528785706, "lr": 0.005, "roi_head/num_bg_samples": 389.25, "roi_head/num_fg_samples": 122.75, "rpn/num_neg_anchors": 156.875, "rpn/num_pos_anchors": 99.125, "time": 0.8599874094998086, "total_loss": 0.1398009918630123}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01272634949964413, "eta_seconds": 7094.5239020312465, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.018513381201044385, "fast_rcnn/fg_cls_accuracy": 0.9814866187989556, "iteration": 5899, "loss_box_reg": 0.052224522456526756, "loss_cls": 0.021635057404637337, "loss_rpn_cls": 0.0014938156236894429, "loss_rpn_loc": 0.02804888691753149, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.125, "rpn/num_pos_anchors": 86.875, "time": 0.8790305555003215, "total_loss": 0.10612871538614854}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01397136649939057, "eta_seconds": 7073.4630170183555, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.023745036256906077, "fast_rcnn/fg_cls_accuracy": 0.976254963743094, "iteration": 5919, "loss_box_reg": 0.06771134585142136, "loss_cls": 0.023286321200430393, "loss_rpn_cls": 0.0018251707078889012, "loss_rpn_loc": 0.045443398877978325, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.8713549059993966, "total_loss": 0.1399976162938401}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01480343300045206, "eta_seconds": 7049.825520024549, "fast_rcnn/cls_accuracy": 0.9892578125, "fast_rcnn/false_negative": 0.025085979450732522, "fast_rcnn/fg_cls_accuracy": 0.9749140205492675, "iteration": 5939, "loss_box_reg": 0.07155478000640869, "loss_cls": 0.026731438003480434, "loss_rpn_cls": 0.0032286550849676132, "loss_rpn_loc": 0.04414527118206024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.5, "rpn/num_pos_anchors": 99.5, "time": 0.8702210045003085, "total_loss": 0.16418979014270008}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013223967499470746, "eta_seconds": 7041.978360231237, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.022937890239894843, "fast_rcnn/fg_cls_accuracy": 0.9770621097601051, "iteration": 5959, "loss_box_reg": 0.057134365662932396, "loss_cls": 0.021953213959932327, "loss_rpn_cls": 0.0026401764480397105, "loss_rpn_loc": 0.03395148180425167, "lr": 0.005, "roi_head/num_bg_samples": 384.25, "roi_head/num_fg_samples": 127.75, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.87993746849952, "total_loss": 0.12935435096733272}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014921116499863274, "eta_seconds": 7041.422176441053, "fast_rcnn/cls_accuracy": 0.99267578125, "fast_rcnn/false_negative": 0.01686227375565611, "fast_rcnn/fg_cls_accuracy": 0.9831377262443439, "iteration": 5979, "loss_box_reg": 0.05349017307162285, "loss_cls": 0.01890684850513935, "loss_rpn_cls": 0.0023752887500450015, "loss_rpn_loc": 0.027584469877183437, "lr": 0.005, "roi_head/num_bg_samples": 387.25, "roi_head/num_fg_samples": 124.75, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8968227814993952, "total_loss": 0.10581246350193396}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 95.19228479576188, "bbox/AP50": 98.92806630926925, "bbox/AP75": 98.92806630926925, "bbox/APl": 96.07206053241414, "bbox/APm": 92.92068638951731, "bbox/APs": NaN, "data_time": 0.0135852094999791, "eta_seconds": 7032.216957258903, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 5999, "loss_box_reg": 0.049395851790905, "loss_cls": 0.02211830299347639, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0015815189108252525, "loss_rpn_loc": 0.028751162812113762, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8929996484994263, "total_loss": 0.11058734328253195, "validation_loss": 0.1322426888658865}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015625493999323226, "eta_seconds": 7011.330387893551, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 6019, "loss_box_reg": 0.049275556579232216, "loss_cls": 0.02186939585953951, "loss_rpn_cls": 0.0018433970981277525, "loss_rpn_loc": 0.03181485831737518, "lr": 0.005, "roi_head/num_bg_samples": 399.875, "roi_head/num_fg_samples": 112.125, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8742916080000214, "total_loss": 0.10903603065526113}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014978625999901851, "eta_seconds": 6972.03328329294, "fast_rcnn/cls_accuracy": 0.991943359375, "fast_rcnn/false_negative": 0.01899314413265306, "fast_rcnn/fg_cls_accuracy": 0.9810068558673469, "iteration": 6039, "loss_box_reg": 0.05454227700829506, "loss_cls": 0.018847894854843616, "loss_rpn_cls": 0.001931813603732735, "loss_rpn_loc": 0.028401367366313934, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.125, "rpn/num_pos_anchors": 95.875, "time": 0.8621666034996451, "total_loss": 0.11354596598539501}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01676996100013639, "eta_seconds": 6944.878359324519, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.027657888986013984, "fast_rcnn/fg_cls_accuracy": 0.972342111013986, "iteration": 6059, "loss_box_reg": 0.06667781807482243, "loss_cls": 0.02809714339673519, "loss_rpn_cls": 0.0019562828820198774, "loss_rpn_loc": 0.03173425607383251, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.375, "rpn/num_pos_anchors": 86.625, "time": 0.8645538555010717, "total_loss": 0.13416938355658203}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015118689499104221, "eta_seconds": 6927.387165874514, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.02115514664009112, "fast_rcnn/fg_cls_accuracy": 0.9788448533599089, "iteration": 6079, "loss_box_reg": 0.05523286201059818, "loss_cls": 0.02052395697683096, "loss_rpn_cls": 0.0017479712842032313, "loss_rpn_loc": 0.032497186213731766, "lr": 0.005, "roi_head/num_bg_samples": 386.0, "roi_head/num_fg_samples": 126.0, "rpn/num_neg_anchors": 170.5, "rpn/num_pos_anchors": 85.5, "time": 0.8714309904999027, "total_loss": 0.12406343687325716}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.018278170500707347, "eta_seconds": 6915.905370308381, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.023995535714285712, "fast_rcnn/fg_cls_accuracy": 0.9760044642857143, "iteration": 6099, "loss_box_reg": 0.05903386510908604, "loss_cls": 0.023266134783625603, "loss_rpn_cls": 0.0017025229753926396, "loss_rpn_loc": 0.03217700123786926, "lr": 0.005, "roi_head/num_bg_samples": 390.0, "roi_head/num_fg_samples": 122.0, "rpn/num_neg_anchors": 157.0, "rpn/num_pos_anchors": 99.0, "time": 0.879469839000194, "total_loss": 0.12912889057770371}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.017010211500746664, "eta_seconds": 6880.097178893538, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 6119, "loss_box_reg": 0.05237412825226784, "loss_cls": 0.020399908535182476, "loss_rpn_cls": 0.0020592976361513138, "loss_rpn_loc": 0.029436788521707058, "lr": 0.005, "roi_head/num_bg_samples": 384.375, "roi_head/num_fg_samples": 127.625, "rpn/num_neg_anchors": 154.125, "rpn/num_pos_anchors": 101.875, "time": 0.837185313000191, "total_loss": 0.11615267035085708}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012930938500176126, "eta_seconds": 6874.913585524499, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 6139, "loss_box_reg": 0.05683276616036892, "loss_cls": 0.02104164846241474, "loss_rpn_cls": 0.0020721941255033016, "loss_rpn_loc": 0.029407095164060593, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.625, "rpn/num_pos_anchors": 91.375, "time": 0.8974210189999212, "total_loss": 0.11595721798948944}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016569622499446268, "eta_seconds": 6850.17428145244, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.017311789772727272, "fast_rcnn/fg_cls_accuracy": 0.9826882102272727, "iteration": 6159, "loss_box_reg": 0.055456044152379036, "loss_cls": 0.018710097298026085, "loss_rpn_cls": 0.001679211389273405, "loss_rpn_loc": 0.03254169411957264, "lr": 0.005, "roi_head/num_bg_samples": 386.875, "roi_head/num_fg_samples": 125.125, "rpn/num_neg_anchors": 162.0, "rpn/num_pos_anchors": 94.0, "time": 0.8707380764999471, "total_loss": 0.11607761745108292}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015005940499577264, "eta_seconds": 6830.0043709121255, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.015686515748031496, "fast_rcnn/fg_cls_accuracy": 0.9843134842519685, "iteration": 6179, "loss_box_reg": 0.04764791950583458, "loss_cls": 0.017025377601385117, "loss_rpn_cls": 0.0018508544890210032, "loss_rpn_loc": 0.028626682236790657, "lr": 0.005, "roi_head/num_bg_samples": 394.75, "roi_head/num_fg_samples": 117.25, "rpn/num_neg_anchors": 176.625, "rpn/num_pos_anchors": 79.375, "time": 0.8641228555006819, "total_loss": 0.09862243826501071}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013931964500443428, "eta_seconds": 6812.937326239991, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.021109145068486178, "fast_rcnn/fg_cls_accuracy": 0.9788908549315138, "iteration": 6199, "loss_box_reg": 0.05654141679406166, "loss_cls": 0.02161919604986906, "loss_rpn_cls": 0.0022016752045601606, "loss_rpn_loc": 0.036667902022600174, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.875, "rpn/num_pos_anchors": 97.125, "time": 0.88057814900003, "total_loss": 0.12237106007523835}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.011839873000099033, "eta_seconds": 6795.470495509982, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.01964216820987654, "fast_rcnn/fg_cls_accuracy": 0.9803578317901235, "iteration": 6219, "loss_box_reg": 0.06887059658765793, "loss_cls": 0.021709110587835312, "loss_rpn_cls": 0.0025221833493560553, "loss_rpn_loc": 0.037271298468112946, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.5, "rpn/num_pos_anchors": 90.5, "time": 0.871639617499568, "total_loss": 0.13361864490434527}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014282630999332468, "eta_seconds": 6780.587996288222, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.022087413594470046, "fast_rcnn/fg_cls_accuracy": 0.97791258640553, "iteration": 6239, "loss_box_reg": 0.05541381053626537, "loss_cls": 0.019974219612777233, "loss_rpn_cls": 0.00216302543412894, "loss_rpn_loc": 0.026898476295173168, "lr": 0.005, "roi_head/num_bg_samples": 387.5, "roi_head/num_fg_samples": 124.5, "rpn/num_neg_anchors": 161.125, "rpn/num_pos_anchors": 94.875, "time": 0.8848914844993487, "total_loss": 0.11317378387320787}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01233501549995708, "eta_seconds": 6777.5217453201085, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01992822662601626, "fast_rcnn/fg_cls_accuracy": 0.9800717733739837, "iteration": 6259, "loss_box_reg": 0.05655202642083168, "loss_cls": 0.020329666323959827, "loss_rpn_cls": 0.002077600220218301, "loss_rpn_loc": 0.034011151641607285, "lr": 0.005, "roi_head/num_bg_samples": 384.25, "roi_head/num_fg_samples": 127.75, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.9009567404991685, "total_loss": 0.1170605790684931}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015487143999962427, "eta_seconds": 6760.011031600124, "fast_rcnn/cls_accuracy": 0.99267578125, "fast_rcnn/false_negative": 0.01783883625565611, "fast_rcnn/fg_cls_accuracy": 0.9821611637443439, "iteration": 6279, "loss_box_reg": 0.06110784038901329, "loss_cls": 0.019084510393440723, "loss_rpn_cls": 0.002013192046433687, "loss_rpn_loc": 0.040036845952272415, "lr": 0.005, "roi_head/num_bg_samples": 391.375, "roi_head/num_fg_samples": 120.625, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8625256164996244, "total_loss": 0.1288914890610613}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 94.22537154488415, "bbox/AP50": 98.93899295521294, "bbox/AP75": 98.93899136952948, "bbox/APl": 94.83146596663553, "bbox/APm": 92.86128270760844, "bbox/APs": NaN, "data_time": 0.014734892500200658, "eta_seconds": 6740.841318408409, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 6299, "loss_box_reg": 0.05705411545932293, "loss_cls": 0.023300004191696644, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0023050843738019466, "loss_rpn_loc": 0.03066015336662531, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8469320189997234, "total_loss": 0.13309826463228092, "validation_loss": 0.13219967620495188}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014618990499911888, "eta_seconds": 6723.334913218412, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 6319, "loss_box_reg": 0.05873744562268257, "loss_cls": 0.0254747336730361, "loss_rpn_cls": 0.002114918199367821, "loss_rpn_loc": 0.027635056525468826, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.375, "rpn/num_pos_anchors": 99.625, "time": 0.8791650465000203, "total_loss": 0.12082800222560763}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01283031599905371, "eta_seconds": 6694.959854995088, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 6339, "loss_box_reg": 0.05532944202423096, "loss_cls": 0.024121087975800037, "loss_rpn_cls": 0.001745418005157262, "loss_rpn_loc": 0.026461017318069935, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.8533603905007112, "total_loss": 0.12319052708335221}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01371918050062959, "eta_seconds": 6682.510457574443, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0226990405518053, "fast_rcnn/fg_cls_accuracy": 0.9773009594481947, "iteration": 6359, "loss_box_reg": 0.055732209235429764, "loss_cls": 0.022817733697593212, "loss_rpn_cls": 0.0016384006012231112, "loss_rpn_loc": 0.02446154411882162, "lr": 0.005, "roi_head/num_bg_samples": 393.5, "roi_head/num_fg_samples": 118.5, "rpn/num_neg_anchors": 170.0, "rpn/num_pos_anchors": 86.0, "time": 0.8810252579996813, "total_loss": 0.11412515258416533}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014626090999627195, "eta_seconds": 6670.815697648421, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.017916851546653144, "fast_rcnn/fg_cls_accuracy": 0.9820831484533469, "iteration": 6379, "loss_box_reg": 0.04448745958507061, "loss_cls": 0.0188369769603014, "loss_rpn_cls": 0.001600912888534367, "loss_rpn_loc": 0.026133742183446884, "lr": 0.005, "roi_head/num_bg_samples": 390.25, "roi_head/num_fg_samples": 121.75, "rpn/num_neg_anchors": 173.75, "rpn/num_pos_anchors": 82.25, "time": 0.8806934590002129, "total_loss": 0.09125708707142621}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01705686299919762, "eta_seconds": 6639.5368923378455, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.024690448113207548, "fast_rcnn/fg_cls_accuracy": 0.9753095518867925, "iteration": 6399, "loss_box_reg": 0.051529645919799805, "loss_cls": 0.022468061186373234, "loss_rpn_cls": 0.0019075246527791023, "loss_rpn_loc": 0.02886816579848528, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.847174769499361, "total_loss": 0.11922960774973035}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012878170499789121, "eta_seconds": 6621.0996628558205, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.01994662047511312, "fast_rcnn/fg_cls_accuracy": 0.9800533795248869, "iteration": 6419, "loss_box_reg": 0.05979695916175842, "loss_cls": 0.02145303227007389, "loss_rpn_cls": 0.00193554355064407, "loss_rpn_loc": 0.031127401627600193, "lr": 0.005, "roi_head/num_bg_samples": 386.125, "roi_head/num_fg_samples": 125.875, "rpn/num_neg_anchors": 158.375, "rpn/num_pos_anchors": 97.625, "time": 0.8643857984998249, "total_loss": 0.1208072499721311}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015023514501081081, "eta_seconds": 6606.31316659472, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.024908256880733948, "fast_rcnn/fg_cls_accuracy": 0.975091743119266, "iteration": 6439, "loss_box_reg": 0.052849866449832916, "loss_cls": 0.021910293959081173, "loss_rpn_cls": 0.0019252339261583984, "loss_rpn_loc": 0.03759782388806343, "lr": 0.005, "roi_head/num_bg_samples": 387.625, "roi_head/num_fg_samples": 124.375, "rpn/num_neg_anchors": 158.125, "rpn/num_pos_anchors": 97.875, "time": 0.8819548974997815, "total_loss": 0.11728041956666857}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01567981350035552, "eta_seconds": 6594.1101271232465, "fast_rcnn/cls_accuracy": 0.985595703125, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 6459, "loss_box_reg": 0.0768078938126564, "loss_cls": 0.03287750296294689, "loss_rpn_cls": 0.0033377008512616158, "loss_rpn_loc": 0.04305647686123848, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.125, "rpn/num_pos_anchors": 91.875, "time": 0.8854608254996492, "total_loss": 0.1571119965519756}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013847386000634287, "eta_seconds": 6571.363751614719, "fast_rcnn/cls_accuracy": 0.986572265625, "fast_rcnn/false_negative": 0.033542072896355184, "fast_rcnn/fg_cls_accuracy": 0.9664579271036449, "iteration": 6479, "loss_box_reg": 0.0721791498363018, "loss_cls": 0.03316785767674446, "loss_rpn_cls": 0.0026021080557256937, "loss_rpn_loc": 0.03623690456151962, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8673977970001943, "total_loss": 0.14556081301998347}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014217702499990992, "eta_seconds": 6552.235756218219, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.023973651960784312, "fast_rcnn/fg_cls_accuracy": 0.9760263480392157, "iteration": 6499, "loss_box_reg": 0.07163730636239052, "loss_cls": 0.027671386487782, "loss_rpn_cls": 0.0022347900085151196, "loss_rpn_loc": 0.035024408251047134, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.375, "rpn/num_pos_anchors": 96.625, "time": 0.8620334655006445, "total_loss": 0.13719015521928668}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013043641500189551, "eta_seconds": 6539.027977344184, "fast_rcnn/cls_accuracy": 0.989013671875, "fast_rcnn/false_negative": 0.01994892438900204, "fast_rcnn/fg_cls_accuracy": 0.9800510756109979, "iteration": 6519, "loss_box_reg": 0.0659957192838192, "loss_cls": 0.02624594047665596, "loss_rpn_cls": 0.0027155696880072355, "loss_rpn_loc": 0.028650417923927307, "lr": 0.005, "roi_head/num_bg_samples": 394.0, "roi_head/num_fg_samples": 118.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.886916145500436, "total_loss": 0.12901468836935237}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015435432998856413, "eta_seconds": 6520.179542894968, "fast_rcnn/cls_accuracy": 0.98486328125, "fast_rcnn/false_negative": 0.0369403117881549, "fast_rcnn/fg_cls_accuracy": 0.9630596882118452, "iteration": 6539, "loss_box_reg": 0.07102265954017639, "loss_cls": 0.03612443432211876, "loss_rpn_cls": 0.002527082455344498, "loss_rpn_loc": 0.03581857495009899, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.0, "rpn/num_pos_anchors": 96.0, "time": 0.8644901474990547, "total_loss": 0.164027132675983}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013624650999190635, "eta_seconds": 6502.701511684956, "fast_rcnn/cls_accuracy": 0.988525390625, "fast_rcnn/false_negative": 0.028060364208633094, "fast_rcnn/fg_cls_accuracy": 0.9719396357913669, "iteration": 6559, "loss_box_reg": 0.06152721680700779, "loss_cls": 0.028375063091516495, "loss_rpn_cls": 0.0029377650935202837, "loss_rpn_loc": 0.03904414176940918, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 165.625, "rpn/num_pos_anchors": 90.375, "time": 0.8722545929995249, "total_loss": 0.14730404340662062}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015862987999753386, "eta_seconds": 6483.990214164716, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022594504154496216, "fast_rcnn/fg_cls_accuracy": 0.9774054958455038, "iteration": 6579, "loss_box_reg": 0.06503109633922577, "loss_cls": 0.0264692772179842, "loss_rpn_cls": 0.0022856942377984524, "loss_rpn_loc": 0.029249703511595726, "lr": 0.005, "roi_head/num_bg_samples": 385.5, "roi_head/num_fg_samples": 126.5, "rpn/num_neg_anchors": 168.125, "rpn/num_pos_anchors": 87.875, "time": 0.862064561501029, "total_loss": 0.13072057289537042}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 94.9562590465484, "bbox/AP50": 98.95877172059133, "bbox/AP75": 98.95813542865011, "bbox/APl": 95.8868342217098, "bbox/APm": 92.17935929865719, "bbox/APs": NaN, "data_time": 0.014382701499926043, "eta_seconds": 6467.745449264932, "fast_rcnn/cls_accuracy": 0.986328125, "fast_rcnn/false_negative": 0.0390625, "fast_rcnn/fg_cls_accuracy": 0.9609375, "iteration": 6599, "loss_box_reg": 0.06231441721320152, "loss_cls": 0.026907832361757755, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0018049926729872823, "loss_rpn_loc": 0.033430157229304314, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.875773142000071, "total_loss": 0.1222928644856438, "validation_loss": 0.14235861812740216}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012605575500856503, "eta_seconds": 6450.26741805492, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.026088169642857144, "fast_rcnn/fg_cls_accuracy": 0.9739118303571428, "iteration": 6619, "loss_box_reg": 0.061883389949798584, "loss_cls": 0.02560213766992092, "loss_rpn_cls": 0.0019035912118852139, "loss_rpn_loc": 0.03384749963879585, "lr": 0.005, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 170.375, "rpn/num_pos_anchors": 85.625, "time": 0.8795498229992518, "total_loss": 0.12717306416016072}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014409930499823531, "eta_seconds": 6432.789386844908, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.025082699887387386, "fast_rcnn/fg_cls_accuracy": 0.9749173001126126, "iteration": 6639, "loss_box_reg": 0.06173129379749298, "loss_cls": 0.02567881066352129, "loss_rpn_cls": 0.0023221065057441592, "loss_rpn_loc": 0.035043831914663315, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8810986554999545, "total_loss": 0.13390042388346046}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.020091804999538, "eta_seconds": 6419.610002972937, "fast_rcnn/cls_accuracy": 0.98876953125, "fast_rcnn/false_negative": 0.02734375, "fast_rcnn/fg_cls_accuracy": 0.97265625, "iteration": 6659, "loss_box_reg": 0.0618146825581789, "loss_cls": 0.027159880846738815, "loss_rpn_cls": 0.0022271130001172423, "loss_rpn_loc": 0.03378916718065739, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.5, "rpn/num_pos_anchors": 90.5, "time": 0.8846367349997308, "total_loss": 0.13792758737690747}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015157727499172324, "eta_seconds": 6402.120260422949, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 6679, "loss_box_reg": 0.0548263993114233, "loss_cls": 0.024561735801398754, "loss_rpn_cls": 0.002403890946879983, "loss_rpn_loc": 0.03422291949391365, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 152.125, "rpn/num_pos_anchors": 103.875, "time": 0.8728095024998765, "total_loss": 0.117996696382761}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013073234999865235, "eta_seconds": 6386.786798870745, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 6699, "loss_box_reg": 0.05256353318691254, "loss_cls": 0.021600008010864258, "loss_rpn_cls": 0.002038599574007094, "loss_rpn_loc": 0.031905822455883026, "lr": 0.005, "roi_head/num_bg_samples": 384.75, "roi_head/num_fg_samples": 127.25, "rpn/num_neg_anchors": 158.5, "rpn/num_pos_anchors": 97.5, "time": 0.8776138069997614, "total_loss": 0.11126430472359061}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012752826999530953, "eta_seconds": 6364.211028344206, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01919958726415094, "fast_rcnn/fg_cls_accuracy": 0.9808004127358491, "iteration": 6719, "loss_box_reg": 0.05564923211932182, "loss_cls": 0.021156730130314827, "loss_rpn_cls": 0.0016903560608625412, "loss_rpn_loc": 0.026225854642689228, "lr": 0.005, "roi_head/num_bg_samples": 386.375, "roi_head/num_fg_samples": 125.625, "rpn/num_neg_anchors": 166.625, "rpn/num_pos_anchors": 89.375, "time": 0.8662901645002421, "total_loss": 0.11179136030841619}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01485045700064802, "eta_seconds": 6352.662910093502, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.017749201460912946, "fast_rcnn/fg_cls_accuracy": 0.9822507985390871, "iteration": 6739, "loss_box_reg": 0.05542687326669693, "loss_cls": 0.020227202214300632, "loss_rpn_cls": 0.0018803232815116644, "loss_rpn_loc": 0.02792760170996189, "lr": 0.005, "roi_head/num_bg_samples": 397.5, "roi_head/num_fg_samples": 114.5, "rpn/num_neg_anchors": 171.375, "rpn/num_pos_anchors": 84.625, "time": 0.8847517725007492, "total_loss": 0.10613548179389909}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01536179849972541, "eta_seconds": 6326.717846754711, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.023030967194570137, "fast_rcnn/fg_cls_accuracy": 0.9769690328054299, "iteration": 6759, "loss_box_reg": 0.06446316465735435, "loss_cls": 0.029058554209768772, "loss_rpn_cls": 0.0019834351260215044, "loss_rpn_loc": 0.028111737221479416, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.625, "rpn/num_pos_anchors": 87.375, "time": 0.8399926754991611, "total_loss": 0.12769186636433005}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014572782999493938, "eta_seconds": 6306.682583495829, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.02270776098901099, "fast_rcnn/fg_cls_accuracy": 0.977292239010989, "iteration": 6779, "loss_box_reg": 0.05670812539756298, "loss_cls": 0.021627653390169144, "loss_rpn_cls": 0.0020199886057525873, "loss_rpn_loc": 0.031055080704391003, "lr": 0.005, "roi_head/num_bg_samples": 390.125, "roi_head/num_fg_samples": 121.875, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8621393905004879, "total_loss": 0.11590285191778094}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.011766339499445166, "eta_seconds": 6290.18126656811, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021087015086206896, "fast_rcnn/fg_cls_accuracy": 0.9789129849137931, "iteration": 6799, "loss_box_reg": 0.05104033462703228, "loss_cls": 0.021220238879323006, "loss_rpn_cls": 0.002283897716552019, "loss_rpn_loc": 0.03322151582688093, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 156.625, "rpn/num_pos_anchors": 99.375, "time": 0.8869153395007743, "total_loss": 0.12391770258545876}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013396439499956614, "eta_seconds": 6271.74735245583, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.022588315217391304, "fast_rcnn/fg_cls_accuracy": 0.9774116847826086, "iteration": 6819, "loss_box_reg": 0.05209255591034889, "loss_cls": 0.022759691812098026, "loss_rpn_cls": 0.0022549328859895468, "loss_rpn_loc": 0.0321732796728611, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.875, "rpn/num_pos_anchors": 93.125, "time": 0.861487474500791, "total_loss": 0.11631689360365272}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014188019500579685, "eta_seconds": 6250.520731108261, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.020534660145049753, "fast_rcnn/fg_cls_accuracy": 0.9794653398549502, "iteration": 6839, "loss_box_reg": 0.05226993001997471, "loss_cls": 0.019104233011603355, "loss_rpn_cls": 0.0018783194245770574, "loss_rpn_loc": 0.03657216764986515, "lr": 0.005, "roi_head/num_bg_samples": 395.375, "roi_head/num_fg_samples": 116.625, "rpn/num_neg_anchors": 163.875, "rpn/num_pos_anchors": 92.125, "time": 0.875936952000302, "total_loss": 0.11720650788629428}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014136211000732146, "eta_seconds": 6235.586204527216, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.0186714774173028, "fast_rcnn/fg_cls_accuracy": 0.9813285225826972, "iteration": 6859, "loss_box_reg": 0.04512167349457741, "loss_cls": 0.019981680437922478, "loss_rpn_cls": 0.002273837337270379, "loss_rpn_loc": 0.026339181698858738, "lr": 0.005, "roi_head/num_bg_samples": 395.25, "roi_head/num_fg_samples": 116.75, "rpn/num_neg_anchors": 171.0, "rpn/num_pos_anchors": 85.0, "time": 0.8810292574999039, "total_loss": 0.1091772725339979}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014994799999840325, "eta_seconds": 6219.344505895831, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.01968412942989214, "fast_rcnn/fg_cls_accuracy": 0.9803158705701078, "iteration": 6879, "loss_box_reg": 0.054521460086107254, "loss_cls": 0.020207996480166912, "loss_rpn_cls": 0.0016052245046012104, "loss_rpn_loc": 0.02895060647279024, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.625, "rpn/num_pos_anchors": 96.375, "time": 0.8812576004993389, "total_loss": 0.11813614593120292}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 94.66708251879624, "bbox/AP50": 98.93413018179822, "bbox/AP75": 98.93413018179822, "bbox/APl": 95.68590601226974, "bbox/APm": 92.15262690010546, "bbox/APs": NaN, "data_time": 0.011416572499911126, "eta_seconds": 6202.829770018074, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 6899, "loss_box_reg": 0.05503329075872898, "loss_cls": 0.023552196100354195, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0018459889688529074, "loss_rpn_loc": 0.032466087490320206, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.9015055584995935, "total_loss": 0.1210458489949815, "validation_loss": 0.12463941270892047}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01602520650067163, "eta_seconds": 6185.3594707080665, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 6919, "loss_box_reg": 0.05502973683178425, "loss_cls": 0.021586243994534016, "loss_rpn_cls": 0.001669199496973306, "loss_rpn_loc": 0.02993503399193287, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.25, "rpn/num_pos_anchors": 96.75, "time": 0.8651452209987838, "total_loss": 0.1229573346208781}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016300714999488264, "eta_seconds": 6176.839006550655, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.019289434523809525, "fast_rcnn/fg_cls_accuracy": 0.9807105654761905, "iteration": 6939, "loss_box_reg": 0.04956957697868347, "loss_cls": 0.017392382957041264, "loss_rpn_cls": 0.0019999612122774124, "loss_rpn_loc": 0.033464474603533745, "lr": 0.005, "roi_head/num_bg_samples": 386.0, "roi_head/num_fg_samples": 126.0, "rpn/num_neg_anchors": 170.25, "rpn/num_pos_anchors": 85.75, "time": 0.8890343124994615, "total_loss": 0.1092157025123015}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013396671999544196, "eta_seconds": 6149.197758499651, "fast_rcnn/cls_accuracy": 0.993408203125, "fast_rcnn/false_negative": 0.013671875, "fast_rcnn/fg_cls_accuracy": 0.986328125, "iteration": 6959, "loss_box_reg": 0.06223549135029316, "loss_cls": 0.017853529192507267, "loss_rpn_cls": 0.0035032116575166583, "loss_rpn_loc": 0.033988067880272865, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.8428899340005955, "total_loss": 0.12809841241687536}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016037445999245392, "eta_seconds": 6131.730927769642, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.018244179600886916, "fast_rcnn/fg_cls_accuracy": 0.981755820399113, "iteration": 6979, "loss_box_reg": 0.0499701127409935, "loss_cls": 0.019482864066958427, "loss_rpn_cls": 0.0024978923611342907, "loss_rpn_loc": 0.03402288071811199, "lr": 0.005, "roi_head/num_bg_samples": 393.375, "roi_head/num_fg_samples": 118.625, "rpn/num_neg_anchors": 162.375, "rpn/num_pos_anchors": 93.625, "time": 0.8905952250006521, "total_loss": 0.10987895721336827}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015023974499854376, "eta_seconds": 6114.538812775834, "fast_rcnn/cls_accuracy": 0.993408203125, "fast_rcnn/false_negative": 0.015196466244725738, "fast_rcnn/fg_cls_accuracy": 0.9848035337552743, "iteration": 6999, "loss_box_reg": 0.048587968572974205, "loss_cls": 0.016477979719638824, "loss_rpn_cls": 0.0019733799854293466, "loss_rpn_loc": 0.02836640365421772, "lr": 0.005, "roi_head/num_bg_samples": 399.625, "roi_head/num_fg_samples": 112.375, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8927671865003504, "total_loss": 0.10202060884330422}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015838512000300398, "eta_seconds": 6097.296149509731, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.016712382308395626, "fast_rcnn/fg_cls_accuracy": 0.9832876176916043, "iteration": 7019, "loss_box_reg": 0.0628610160201788, "loss_cls": 0.021100723184645176, "loss_rpn_cls": 0.002964264713227749, "loss_rpn_loc": 0.04107403941452503, "lr": 0.005, "roi_head/num_bg_samples": 386.0, "roi_head/num_fg_samples": 126.0, "rpn/num_neg_anchors": 164.75, "rpn/num_pos_anchors": 91.25, "time": 0.8788984384991636, "total_loss": 0.14136789133772254}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01898924099987198, "eta_seconds": 6082.071941894703, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.020817754250629723, "fast_rcnn/fg_cls_accuracy": 0.9791822457493703, "iteration": 7039, "loss_box_reg": 0.06653235107660294, "loss_cls": 0.02267918549478054, "loss_rpn_cls": 0.0029921847162768245, "loss_rpn_loc": 0.03446303494274616, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.5, "rpn/num_pos_anchors": 92.5, "time": 0.8491171999994549, "total_loss": 0.1262317990185693}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014512686000671238, "eta_seconds": 6071.8651103906095, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01604295267489712, "fast_rcnn/fg_cls_accuracy": 0.9839570473251029, "iteration": 7059, "loss_box_reg": 0.04288184456527233, "loss_cls": 0.017938420176506042, "loss_rpn_cls": 0.0023474862100556493, "loss_rpn_loc": 0.03456450439989567, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 166.375, "rpn/num_pos_anchors": 89.625, "time": 0.8669519580007545, "total_loss": 0.10656910395482555}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013586177499746555, "eta_seconds": 6054.369461030602, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.0166015625, "fast_rcnn/fg_cls_accuracy": 0.9833984375, "iteration": 7079, "loss_box_reg": 0.04876520112156868, "loss_cls": 0.018414081074297428, "loss_rpn_cls": 0.002153786947019398, "loss_rpn_loc": 0.02889126632362604, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 170.125, "rpn/num_pos_anchors": 85.875, "time": 0.8649011799998334, "total_loss": 0.10122425947338343}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014008332500452525, "eta_seconds": 6029.647819424701, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.019823182711198428, "fast_rcnn/fg_cls_accuracy": 0.9801768172888016, "iteration": 7099, "loss_box_reg": 0.05340917408466339, "loss_cls": 0.021333858370780945, "loss_rpn_cls": 0.001923296949826181, "loss_rpn_loc": 0.03045716416090727, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.0, "rpn/num_pos_anchors": 98.0, "time": 0.8626306449996264, "total_loss": 0.12130474066361785}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01411774050029635, "eta_seconds": 6022.338051979991, "fast_rcnn/cls_accuracy": 0.9931640625, "fast_rcnn/false_negative": 0.016625065685759326, "fast_rcnn/fg_cls_accuracy": 0.9833749343142406, "iteration": 7119, "loss_box_reg": 0.046084122732281685, "loss_cls": 0.01684429356828332, "loss_rpn_cls": 0.0017503713024780154, "loss_rpn_loc": 0.023188669234514236, "lr": 0.005, "roi_head/num_bg_samples": 396.75, "roi_head/num_fg_samples": 115.25, "rpn/num_neg_anchors": 172.125, "rpn/num_pos_anchors": 83.875, "time": 0.8843301269998847, "total_loss": 0.0870730938622728}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012397534500451002, "eta_seconds": 6001.882512950579, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.015990070093457945, "fast_rcnn/fg_cls_accuracy": 0.9840099299065421, "iteration": 7139, "loss_box_reg": 0.05146109126508236, "loss_cls": 0.021715672686696053, "loss_rpn_cls": 0.001895830500870943, "loss_rpn_loc": 0.024251848459243774, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.0, "rpn/num_pos_anchors": 91.0, "time": 0.878446251999776, "total_loss": 0.09842654832755215}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01571464550033852, "eta_seconds": 5982.366439223248, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.01885653409090909, "fast_rcnn/fg_cls_accuracy": 0.981143465909091, "iteration": 7159, "loss_box_reg": 0.05243951082229614, "loss_cls": 0.01870021130889654, "loss_rpn_cls": 0.0017099158139899373, "loss_rpn_loc": 0.03165219444781542, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 163.375, "rpn/num_pos_anchors": 92.625, "time": 0.8619860220005648, "total_loss": 0.11414473690092564}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014070289499613864, "eta_seconds": 5966.891214230564, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01822302476415094, "fast_rcnn/fg_cls_accuracy": 0.9817769752358491, "iteration": 7179, "loss_box_reg": 0.06937815621495247, "loss_cls": 0.021689988672733307, "loss_rpn_cls": 0.0014827366103418171, "loss_rpn_loc": 0.022349629551172256, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 176.25, "rpn/num_pos_anchors": 79.75, "time": 0.8709076529994491, "total_loss": 0.11922502220841125}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 95.69144176618912, "bbox/AP50": 98.95596854277446, "bbox/AP75": 98.95596854277446, "bbox/APl": 96.81231705031111, "bbox/APm": 92.870701932472, "bbox/APs": NaN, "data_time": 0.01257977099976415, "eta_seconds": 5949.395564870557, "fast_rcnn/cls_accuracy": 0.9873046875, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 7199, "loss_box_reg": 0.053020041435956955, "loss_cls": 0.01941721700131893, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0016969991265796125, "loss_rpn_loc": 0.027602078393101692, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8754610290006895, "total_loss": 0.1167496123816818, "validation_loss": 0.1243649768240706}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013608519999252167, "eta_seconds": 5929.7946082588305, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.02072180029880478, "fast_rcnn/fg_cls_accuracy": 0.9792781997011952, "iteration": 7219, "loss_box_reg": 0.06226574257016182, "loss_cls": 0.02169592957943678, "loss_rpn_cls": 0.0017612884985283017, "loss_rpn_loc": 0.0260829646140337, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.75, "rpn/num_pos_anchors": 98.25, "time": 0.8328381484998317, "total_loss": 0.12098417524248362}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012699216499640897, "eta_seconds": 5907.324866994697, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.01956834082958521, "fast_rcnn/fg_cls_accuracy": 0.9804316591704147, "iteration": 7239, "loss_box_reg": 0.06467296555638313, "loss_cls": 0.02034750021994114, "loss_rpn_cls": 0.0020107371965423226, "loss_rpn_loc": 0.03597464598715305, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8571788409999499, "total_loss": 0.1286593013210222}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01284250649950991, "eta_seconds": 5882.304725634806, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.024677713282937365, "fast_rcnn/fg_cls_accuracy": 0.9753222867170626, "iteration": 7259, "loss_box_reg": 0.0720156729221344, "loss_cls": 0.022196623496711254, "loss_rpn_cls": 0.0018438987317495048, "loss_rpn_loc": 0.031188867054879665, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 157.875, "rpn/num_pos_anchors": 98.125, "time": 0.8674613134999163, "total_loss": 0.12712689390173182}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014570132500011823, "eta_seconds": 5865.785934930372, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.018763054305912595, "fast_rcnn/fg_cls_accuracy": 0.9812369456940875, "iteration": 7279, "loss_box_reg": 0.04827803559601307, "loss_cls": 0.020532450638711452, "loss_rpn_cls": 0.0015400242991745472, "loss_rpn_loc": 0.02864967193454504, "lr": 0.005, "roi_head/num_bg_samples": 386.25, "roi_head/num_fg_samples": 125.75, "rpn/num_neg_anchors": 158.75, "rpn/num_pos_anchors": 97.25, "time": 0.8788310344998536, "total_loss": 0.10269807942677289}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013882872000067437, "eta_seconds": 5848.330836180393, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.0263671875, "fast_rcnn/fg_cls_accuracy": 0.9736328125, "iteration": 7299, "loss_box_reg": 0.051617180928587914, "loss_cls": 0.020978190936148167, "loss_rpn_cls": 0.0015868920600041747, "loss_rpn_loc": 0.028855151496827602, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.125, "rpn/num_pos_anchors": 93.875, "time": 0.8696121389994005, "total_loss": 0.10899316717404872}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01823433999925328, "eta_seconds": 5826.770593642605, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.0185546875, "fast_rcnn/fg_cls_accuracy": 0.9814453125, "iteration": 7319, "loss_box_reg": 0.04670894891023636, "loss_cls": 0.02008939068764448, "loss_rpn_cls": 0.001690313161816448, "loss_rpn_loc": 0.024166589602828026, "lr": 0.005, "roi_head/num_bg_samples": 393.0, "roi_head/num_fg_samples": 119.0, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8584915315004764, "total_loss": 0.10035329079255462}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013606152499960444, "eta_seconds": 5811.654994095692, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.02015523538961039, "fast_rcnn/fg_cls_accuracy": 0.9798447646103896, "iteration": 7339, "loss_box_reg": 0.05617460422217846, "loss_cls": 0.019655038602650166, "loss_rpn_cls": 0.0017812781734392047, "loss_rpn_loc": 0.03028799779713154, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8650371065004947, "total_loss": 0.11179283005185425}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01654477400097676, "eta_seconds": 5797.351938335737, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.018208675985624888, "fast_rcnn/fg_cls_accuracy": 0.9817913240143752, "iteration": 7359, "loss_box_reg": 0.05178121663630009, "loss_cls": 0.02289044577628374, "loss_rpn_cls": 0.0019484899821691215, "loss_rpn_loc": 0.029796052724123, "lr": 0.005, "roi_head/num_bg_samples": 400.5, "roi_head/num_fg_samples": 111.5, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.894350011500137, "total_loss": 0.12097213335800916}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014486491500065313, "eta_seconds": 5776.755399475691, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0201015423126615, "fast_rcnn/fg_cls_accuracy": 0.9798984576873385, "iteration": 7379, "loss_box_reg": 0.05161883495748043, "loss_cls": 0.023404487408697605, "loss_rpn_cls": 0.0018291088053956628, "loss_rpn_loc": 0.0326540544629097, "lr": 0.005, "roi_head/num_bg_samples": 388.0, "roi_head/num_fg_samples": 124.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8471367880001708, "total_loss": 0.1109586552483961}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01340743750006368, "eta_seconds": 5760.138480034914, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.015010324420980926, "fast_rcnn/fg_cls_accuracy": 0.9849896755790191, "iteration": 7399, "loss_box_reg": 0.049768973141908646, "loss_cls": 0.017597020603716373, "loss_rpn_cls": 0.00155812461161986, "loss_rpn_loc": 0.025679418817162514, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8551858899991203, "total_loss": 0.09669047716306522}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016769089499575784, "eta_seconds": 5754.900208959057, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.022989241803278687, "fast_rcnn/fg_cls_accuracy": 0.9770107581967213, "iteration": 7419, "loss_box_reg": 0.049483148381114006, "loss_cls": 0.019421977922320366, "loss_rpn_cls": 0.0018465452594682574, "loss_rpn_loc": 0.029479497112333775, "lr": 0.005, "roi_head/num_bg_samples": 395.125, "roi_head/num_fg_samples": 116.875, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8925235475007867, "total_loss": 0.1083731577382423}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013835832499353273, "eta_seconds": 5733.49554476578, "fast_rcnn/cls_accuracy": 0.99365234375, "fast_rcnn/false_negative": 0.017735384567594433, "fast_rcnn/fg_cls_accuracy": 0.9822646154324055, "iteration": 7439, "loss_box_reg": 0.04750760644674301, "loss_cls": 0.018322253599762917, "loss_rpn_cls": 0.00187357870163396, "loss_rpn_loc": 0.028015609830617905, "lr": 0.005, "roi_head/num_bg_samples": 395.875, "roi_head/num_fg_samples": 116.125, "rpn/num_neg_anchors": 167.375, "rpn/num_pos_anchors": 88.625, "time": 0.8779634015008924, "total_loss": 0.10411607014248148}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014283146499110444, "eta_seconds": 5713.617737967517, "fast_rcnn/cls_accuracy": 0.9921875, "fast_rcnn/false_negative": 0.019475458184116286, "fast_rcnn/fg_cls_accuracy": 0.9805245418158837, "iteration": 7459, "loss_box_reg": 0.0450739748775959, "loss_cls": 0.019201557151973248, "loss_rpn_cls": 0.001890198327600956, "loss_rpn_loc": 0.03183344379067421, "lr": 0.005, "roi_head/num_bg_samples": 400.25, "roi_head/num_fg_samples": 111.75, "rpn/num_neg_anchors": 161.0, "rpn/num_pos_anchors": 95.0, "time": 0.8824331019995952, "total_loss": 0.09897971549071372}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015928300497762393, "eta_seconds": 5704.17634797147, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 7479, "loss_box_reg": 0.05527053028345108, "loss_cls": 0.021953875198960304, "loss_rpn_cls": 0.002334843738935888, "loss_rpn_loc": 0.03144662640988827, "lr": 0.005, "roi_head/num_bg_samples": 389.125, "roi_head/num_fg_samples": 122.875, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8909603450010763, "total_loss": 0.11746551666874439}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 96.21934828582303, "bbox/AP50": 98.9608631992604, "bbox/AP75": 98.9608631992604, "bbox/APl": 97.27118236299066, "bbox/APm": 93.37260189247664, "bbox/APs": NaN, "data_time": 0.014301499499197234, "eta_seconds": 5685.220630277824, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.0234375, "fast_rcnn/fg_cls_accuracy": 0.9765625, "iteration": 7499, "loss_box_reg": 0.07357211783528328, "loss_cls": 0.022736448794603348, "loss_failed_to_get_better_count": 0.0, "loss_rpn_cls": 0.0017640800215303898, "loss_rpn_loc": 0.02801152691245079, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8605794425002387, "total_loss": 0.13347878819331527, "validation_loss": 0.11919471451081007}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01179910300015763, "eta_seconds": 5663.372633281542, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 7519, "loss_box_reg": 0.049876436591148376, "loss_cls": 0.020631234161555767, "loss_rpn_cls": 0.0013032370479777455, "loss_rpn_loc": 0.021559851244091988, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 173.0, "rpn/num_pos_anchors": 83.0, "time": 0.8649646844987728, "total_loss": 0.0957154332427308}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.011217225999644143, "eta_seconds": 5649.236396761082, "fast_rcnn/cls_accuracy": 0.991943359375, "fast_rcnn/false_negative": 0.016150235241521725, "fast_rcnn/fg_cls_accuracy": 0.9838497647584783, "iteration": 7539, "loss_box_reg": 0.05538935400545597, "loss_cls": 0.01830381155014038, "loss_rpn_cls": 0.001497010700404644, "loss_rpn_loc": 0.028712766245007515, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.625, "rpn/num_pos_anchors": 95.375, "time": 0.8754558674972941, "total_loss": 0.11777710961177945}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.018795421501636156, "eta_seconds": 5632.885451717711, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.01717480673480084, "fast_rcnn/fg_cls_accuracy": 0.9828251932651992, "iteration": 7559, "loss_box_reg": 0.05194895341992378, "loss_cls": 0.0185650996863842, "loss_rpn_cls": 0.001581700169481337, "loss_rpn_loc": 0.03180212527513504, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8853708139995433, "total_loss": 0.11031307530356571}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.011884691501109046, "eta_seconds": 5614.262018821066, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.024331741968218825, "fast_rcnn/fg_cls_accuracy": 0.9756682580317811, "iteration": 7579, "loss_box_reg": 0.051438743248581886, "loss_cls": 0.020901663228869438, "loss_rpn_cls": 0.0020188859198242426, "loss_rpn_loc": 0.028017614036798477, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 158.125, "rpn/num_pos_anchors": 97.875, "time": 0.8517040420010744, "total_loss": 0.10727354709524661}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013072560999717098, "eta_seconds": 5596.361853330327, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.01912242058891723, "fast_rcnn/fg_cls_accuracy": 0.9808775794110828, "iteration": 7599, "loss_box_reg": 0.048440081998705864, "loss_cls": 0.018383423797786236, "loss_rpn_cls": 0.001521524682175368, "loss_rpn_loc": 0.027573653496801853, "lr": 0.005, "roi_head/num_bg_samples": 398.25, "roi_head/num_fg_samples": 113.75, "rpn/num_neg_anchors": 171.25, "rpn/num_pos_anchors": 84.75, "time": 0.8580761204993905, "total_loss": 0.09585496393265203}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01348634049827524, "eta_seconds": 5578.314589424075, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 7619, "loss_box_reg": 0.061940738931298256, "loss_cls": 0.02248190902173519, "loss_rpn_cls": 0.001508655899669975, "loss_rpn_loc": 0.02699714433401823, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8625641514991003, "total_loss": 0.11347140942234546}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01415413150061795, "eta_seconds": 5561.662246459047, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.0201015423126615, "fast_rcnn/fg_cls_accuracy": 0.9798984576873385, "iteration": 7639, "loss_box_reg": 0.051636192947626114, "loss_cls": 0.021555948071181774, "loss_rpn_cls": 0.0019678825046867132, "loss_rpn_loc": 0.025903808884322643, "lr": 0.005, "roi_head/num_bg_samples": 399.875, "roi_head/num_fg_samples": 112.125, "rpn/num_neg_anchors": 174.125, "rpn/num_pos_anchors": 81.875, "time": 0.8790859274995455, "total_loss": 0.10436546814162284}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015115008998691337, "eta_seconds": 5538.916079567654, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.024723145071982283, "fast_rcnn/fg_cls_accuracy": 0.9752768549280177, "iteration": 7659, "loss_box_reg": 0.049845632165670395, "loss_cls": 0.0228011691942811, "loss_rpn_cls": 0.0016330097569152713, "loss_rpn_loc": 0.02708000596612692, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 166.75, "rpn/num_pos_anchors": 89.25, "time": 0.8625402485013183, "total_loss": 0.11272072332212701}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016743381498599774, "eta_seconds": 5521.445913727668, "fast_rcnn/cls_accuracy": 0.99365234375, "fast_rcnn/false_negative": 0.015625, "fast_rcnn/fg_cls_accuracy": 0.984375, "iteration": 7679, "loss_box_reg": 0.046569833531975746, "loss_cls": 0.018352416343986988, "loss_rpn_cls": 0.0020798699697479606, "loss_rpn_loc": 0.023393699899315834, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.5, "rpn/num_pos_anchors": 90.5, "time": 0.8776937974998873, "total_loss": 0.09464371600188315}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015121779500987031, "eta_seconds": 5506.081000201666, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.0185546875, "fast_rcnn/fg_cls_accuracy": 0.9814453125, "iteration": 7699, "loss_box_reg": 0.04934992641210556, "loss_cls": 0.02163449488580227, "loss_rpn_cls": 0.0014464679406955838, "loss_rpn_loc": 0.02355844434350729, "lr": 0.005, "roi_head/num_bg_samples": 384.625, "roi_head/num_fg_samples": 127.375, "rpn/num_neg_anchors": 158.0, "rpn/num_pos_anchors": 98.0, "time": 0.8809332519995223, "total_loss": 0.10276674962369725}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01534776650078129, "eta_seconds": 5490.893893774113, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.020899212075682665, "fast_rcnn/fg_cls_accuracy": 0.9791007879243173, "iteration": 7719, "loss_box_reg": 0.053785618394613266, "loss_cls": 0.020242595113813877, "loss_rpn_cls": 0.0013825257774442434, "loss_rpn_loc": 0.02883803378790617, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.875, "rpn/num_pos_anchors": 95.125, "time": 0.8781067395011632, "total_loss": 0.11355409701354802}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014503922500807676, "eta_seconds": 5473.960562990342, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.016201909856760743, "fast_rcnn/fg_cls_accuracy": 0.9837980901432393, "iteration": 7739, "loss_box_reg": 0.04810282588005066, "loss_cls": 0.018945994786918163, "loss_rpn_cls": 0.0018574876012280583, "loss_rpn_loc": 0.03325879015028477, "lr": 0.005, "roi_head/num_bg_samples": 400.75, "roi_head/num_fg_samples": 111.25, "rpn/num_neg_anchors": 168.375, "rpn/num_pos_anchors": 87.625, "time": 0.9032452700012072, "total_loss": 0.10094459902029485}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012756513500789879, "eta_seconds": 5457.978280417673, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.0163110835694051, "fast_rcnn/fg_cls_accuracy": 0.9836889164305949, "iteration": 7759, "loss_box_reg": 0.0493440255522728, "loss_cls": 0.01765440870076418, "loss_rpn_cls": 0.0016573205357417464, "loss_rpn_loc": 0.025600917637348175, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 159.875, "rpn/num_pos_anchors": 96.125, "time": 0.8548254950001137, "total_loss": 0.10102644638391212}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.015997997499653138, "eta_seconds": 5444.001308504272, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01941369542266403, "fast_rcnn/fg_cls_accuracy": 0.980586304577336, "iteration": 7779, "loss_box_reg": 0.046886932104825974, "loss_cls": 0.018901430070400238, "loss_rpn_cls": 0.0013884668587706983, "loss_rpn_loc": 0.02591781225055456, "lr": 0.005, "roi_head/num_bg_samples": 399.625, "roi_head/num_fg_samples": 112.375, "rpn/num_neg_anchors": 167.0, "rpn/num_pos_anchors": 89.0, "time": 0.8821833439997135, "total_loss": 0.1049433239386417}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 95.68655817912666, "bbox/AP50": 98.96435657106313, "bbox/AP75": 98.96435657106313, "bbox/APl": 96.72578885504431, "bbox/APm": 92.89288986634034, "bbox/APs": NaN, "data_time": 0.016342072000043117, "eta_seconds": 5421.902940150978, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.03515625, "fast_rcnn/fg_cls_accuracy": 0.96484375, "iteration": 7799, "loss_box_reg": 0.05112138204276562, "loss_cls": 0.018858631141483784, "loss_failed_to_get_better_count": 1.0, "loss_rpn_cls": 0.0010724971070885658, "loss_rpn_loc": 0.02232340630143881, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8612313405010354, "total_loss": 0.10297125618671998, "validation_loss": 0.12011129697123998}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.011730454500138876, "eta_seconds": 5403.473198124151, "fast_rcnn/cls_accuracy": 0.991943359375, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 7819, "loss_box_reg": 0.053983498364686966, "loss_cls": 0.02011057734489441, "loss_rpn_cls": 0.001365833217278123, "loss_rpn_loc": 0.02544844150543213, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.25, "rpn/num_pos_anchors": 93.75, "time": 0.8432734960006201, "total_loss": 0.10274368093814701}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016452391999337124, "eta_seconds": 5383.239303034399, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.021275530636764118, "fast_rcnn/fg_cls_accuracy": 0.9787244693632359, "iteration": 7839, "loss_box_reg": 0.05305344797670841, "loss_cls": 0.02312098816037178, "loss_rpn_cls": 0.001441100612282753, "loss_rpn_loc": 0.028775377199053764, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.0, "rpn/num_pos_anchors": 96.0, "time": 0.862696734500787, "total_loss": 0.11571720871143043}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014619007501096348, "eta_seconds": 5363.29456999743, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.015911145550820096, "fast_rcnn/fg_cls_accuracy": 0.9840888544491799, "iteration": 7859, "loss_box_reg": 0.05628446862101555, "loss_cls": 0.019572083838284016, "loss_rpn_cls": 0.001553082198370248, "loss_rpn_loc": 0.026774986647069454, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.375, "rpn/num_pos_anchors": 95.625, "time": 0.8636195795006643, "total_loss": 0.10001697565894574}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016345352501957677, "eta_seconds": 5351.020780734174, "fast_rcnn/cls_accuracy": 0.990478515625, "fast_rcnn/false_negative": 0.020558661548731642, "fast_rcnn/fg_cls_accuracy": 0.9794413384512684, "iteration": 7879, "loss_box_reg": 0.05067255347967148, "loss_cls": 0.02192289847880602, "loss_rpn_cls": 0.0018132300465367734, "loss_rpn_loc": 0.037854064255952835, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 153.875, "rpn/num_pos_anchors": 102.125, "time": 0.8944126024998695, "total_loss": 0.11420665605692193}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016072067001005053, "eta_seconds": 5334.0733740303585, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.020098829090127834, "fast_rcnn/fg_cls_accuracy": 0.9799011709098722, "iteration": 7899, "loss_box_reg": 0.05551023781299591, "loss_cls": 0.01713454443961382, "loss_rpn_cls": 0.002370442496612668, "loss_rpn_loc": 0.03798461705446243, "lr": 0.005, "roi_head/num_bg_samples": 397.375, "roi_head/num_fg_samples": 114.625, "rpn/num_neg_anchors": 162.625, "rpn/num_pos_anchors": 93.375, "time": 0.8870166354990943, "total_loss": 0.1185140116722323}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013708807999137207, "eta_seconds": 5316.847684439155, "fast_rcnn/cls_accuracy": 0.991943359375, "fast_rcnn/false_negative": 0.016777078692966543, "fast_rcnn/fg_cls_accuracy": 0.9832229213070335, "iteration": 7919, "loss_box_reg": 0.055097946897149086, "loss_cls": 0.020458589307963848, "loss_rpn_cls": 0.002235392341390252, "loss_rpn_loc": 0.028814736753702164, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.875, "rpn/num_pos_anchors": 88.125, "time": 0.8668826225002704, "total_loss": 0.10888918163254857}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012617529000635841, "eta_seconds": 5298.420577981307, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.02090020104401806, "fast_rcnn/fg_cls_accuracy": 0.979099798955982, "iteration": 7939, "loss_box_reg": 0.04596417397260666, "loss_cls": 0.018329892307519913, "loss_rpn_cls": 0.0016781507292762399, "loss_rpn_loc": 0.02640154305845499, "lr": 0.005, "roi_head/num_bg_samples": 392.125, "roi_head/num_fg_samples": 119.875, "rpn/num_neg_anchors": 166.875, "rpn/num_pos_anchors": 89.125, "time": 0.8765777589997015, "total_loss": 0.12047229649033397}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016494737998073106, "eta_seconds": 5284.131485842012, "fast_rcnn/cls_accuracy": 0.99267578125, "fast_rcnn/false_negative": 0.016816585435779817, "fast_rcnn/fg_cls_accuracy": 0.9831834145642202, "iteration": 7959, "loss_box_reg": 0.045716214925050735, "loss_cls": 0.017989978194236755, "loss_rpn_cls": 0.0014603693271055818, "loss_rpn_loc": 0.02558711264282465, "lr": 0.005, "roi_head/num_bg_samples": 396.875, "roi_head/num_fg_samples": 115.125, "rpn/num_neg_anchors": 168.5, "rpn/num_pos_anchors": 87.5, "time": 0.8894763815005717, "total_loss": 0.09603367856470868}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012589419000505586, "eta_seconds": 5264.518239420906, "fast_rcnn/cls_accuracy": 0.99365234375, "fast_rcnn/false_negative": 0.017578125, "fast_rcnn/fg_cls_accuracy": 0.982421875, "iteration": 7979, "loss_box_reg": 0.052839675918221474, "loss_cls": 0.017138169147074223, "loss_rpn_cls": 0.0013360435841605067, "loss_rpn_loc": 0.0247696191072464, "lr": 0.005, "roi_head/num_bg_samples": 390.0, "roi_head/num_fg_samples": 122.0, "rpn/num_neg_anchors": 166.125, "rpn/num_pos_anchors": 89.875, "time": 0.8554169765011466, "total_loss": 0.10476362868212163}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016870392000782886, "eta_seconds": 5241.137528352834, "fast_rcnn/cls_accuracy": 0.9912109375, "fast_rcnn/false_negative": 0.0244140625, "fast_rcnn/fg_cls_accuracy": 0.9755859375, "iteration": 7999, "loss_box_reg": 0.06060771085321903, "loss_cls": 0.020199289545416832, "loss_rpn_cls": 0.0015191991697065532, "loss_rpn_loc": 0.0269966721534729, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.5, "rpn/num_pos_anchors": 90.5, "time": 0.8683639074988605, "total_loss": 0.1146252378821373}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01559488549901289, "eta_seconds": 5222.866233473875, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.015625, "fast_rcnn/fg_cls_accuracy": 0.984375, "iteration": 8019, "loss_box_reg": 0.04935472086071968, "loss_cls": 0.01813394296914339, "loss_rpn_cls": 0.0013296054676175117, "loss_rpn_loc": 0.024004868231713772, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.75, "rpn/num_pos_anchors": 90.25, "time": 0.8771486899986485, "total_loss": 0.0909225320792757}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014117939999778173, "eta_seconds": 5206.202434012872, "fast_rcnn/cls_accuracy": 0.992919921875, "fast_rcnn/false_negative": 0.01546923676012461, "fast_rcnn/fg_cls_accuracy": 0.9845307632398754, "iteration": 8039, "loss_box_reg": 0.045122936367988586, "loss_cls": 0.017393415793776512, "loss_rpn_cls": 0.0015075791161507368, "loss_rpn_loc": 0.02392749208956957, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 165.25, "rpn/num_pos_anchors": 90.75, "time": 0.8738078145015606, "total_loss": 0.09722110372968018}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.0152574644980632, "eta_seconds": 5191.907921480426, "fast_rcnn/cls_accuracy": 0.9931640625, "fast_rcnn/false_negative": 0.013671875, "fast_rcnn/fg_cls_accuracy": 0.986328125, "iteration": 8059, "loss_box_reg": 0.053040990605950356, "loss_cls": 0.016852840781211853, "loss_rpn_cls": 0.0013420722680166364, "loss_rpn_loc": 0.02533198520541191, "lr": 0.005, "roi_head/num_bg_samples": 384.5, "roi_head/num_fg_samples": 127.5, "rpn/num_neg_anchors": 160.125, "rpn/num_pos_anchors": 95.875, "time": 0.8911803480004892, "total_loss": 0.10159351915353909}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013825973497660016, "eta_seconds": 5176.7002864503775, "fast_rcnn/cls_accuracy": 0.9931640625, "fast_rcnn/false_negative": 0.016009221311475412, "fast_rcnn/fg_cls_accuracy": 0.9839907786885246, "iteration": 8079, "loss_box_reg": 0.044290004298090935, "loss_cls": 0.01627215463668108, "loss_rpn_cls": 0.0017925999127328396, "loss_rpn_loc": 0.02455282211303711, "lr": 0.005, "roi_head/num_bg_samples": 397.0, "roi_head/num_fg_samples": 115.0, "rpn/num_neg_anchors": 166.5, "rpn/num_pos_anchors": 89.5, "time": 0.8976417124995351, "total_loss": 0.08798047993332148}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 93.36132822438438, "bbox/AP50": 98.95593832299676, "bbox/AP75": 98.95591560653713, "bbox/APl": 93.67529123770963, "bbox/APm": 92.5871482585533, "bbox/APs": NaN, "data_time": 0.014762112499738578, "eta_seconds": 5159.466894569225, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.01953125, "fast_rcnn/fg_cls_accuracy": 0.98046875, "iteration": 8099, "loss_box_reg": 0.044338082894682884, "loss_cls": 0.017844361253082752, "loss_failed_to_get_better_count": 2.0, "loss_rpn_cls": 0.0014103215071372688, "loss_rpn_loc": 0.026714591309428215, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8644773205014644, "total_loss": 0.09708715754095465, "validation_loss": 0.12541096546489525}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012016883001706447, "eta_seconds": 5142.10791663085, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.021351745510892355, "fast_rcnn/fg_cls_accuracy": 0.9786482544891076, "iteration": 8119, "loss_box_reg": 0.04896181635558605, "loss_cls": 0.020847185514867306, "loss_rpn_cls": 0.0016443960485048592, "loss_rpn_loc": 0.03228556923568249, "lr": 0.005, "roi_head/num_bg_samples": 393.25, "roi_head/num_fg_samples": 118.75, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.8887349484994047, "total_loss": 0.10797564510721713}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01440560000082769, "eta_seconds": 5124.242590590384, "fast_rcnn/cls_accuracy": 0.991943359375, "fast_rcnn/false_negative": 0.020067114093959733, "fast_rcnn/fg_cls_accuracy": 0.9799328859060403, "iteration": 8139, "loss_box_reg": 0.046304844319820404, "loss_cls": 0.020504938438534737, "loss_rpn_cls": 0.0018486655317246914, "loss_rpn_loc": 0.027364308945834637, "lr": 0.005, "roi_head/num_bg_samples": 393.625, "roi_head/num_fg_samples": 118.375, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.8702475780009991, "total_loss": 0.10256953095085919}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013681623500815476, "eta_seconds": 5106.100411811387, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.015625, "fast_rcnn/fg_cls_accuracy": 0.984375, "iteration": 8159, "loss_box_reg": 0.05704467184841633, "loss_cls": 0.019173207692801952, "loss_rpn_cls": 0.0014318713219836354, "loss_rpn_loc": 0.027249728329479694, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 161.5, "rpn/num_pos_anchors": 94.5, "time": 0.8471450755005208, "total_loss": 0.11110173224005848}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.016407008000896894, "eta_seconds": 5089.646349720826, "fast_rcnn/cls_accuracy": 0.991943359375, "fast_rcnn/false_negative": 0.01829068241469816, "fast_rcnn/fg_cls_accuracy": 0.9817093175853018, "iteration": 8179, "loss_box_reg": 0.05056499317288399, "loss_cls": 0.01928581390529871, "loss_rpn_cls": 0.001634021697100252, "loss_rpn_loc": 0.027583950199186802, "lr": 0.005, "roi_head/num_bg_samples": 398.875, "roi_head/num_fg_samples": 113.125, "rpn/num_neg_anchors": 168.75, "rpn/num_pos_anchors": 87.25, "time": 0.9013684595011, "total_loss": 0.10347910015843809}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.012828322500354261, "eta_seconds": 5071.643448947496, "fast_rcnn/cls_accuracy": 0.99169921875, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 8199, "loss_box_reg": 0.04663527384400368, "loss_cls": 0.020602039992809296, "loss_rpn_cls": 0.0016837873845361173, "loss_rpn_loc": 0.028076298534870148, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 164.25, "rpn/num_pos_anchors": 91.75, "time": 0.8652169835004315, "total_loss": 0.10265467304270715}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01598586199907004, "eta_seconds": 5055.607447429826, "fast_rcnn/cls_accuracy": 0.994140625, "fast_rcnn/false_negative": 0.015686515748031496, "fast_rcnn/fg_cls_accuracy": 0.9843134842519685, "iteration": 8219, "loss_box_reg": 0.04792248457670212, "loss_cls": 0.016436945647001266, "loss_rpn_cls": 0.001548041997011751, "loss_rpn_loc": 0.024031376466155052, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.5, "rpn/num_pos_anchors": 93.5, "time": 0.8859784335018048, "total_loss": 0.09161088854307309}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013283883501571836, "eta_seconds": 5040.161765148482, "fast_rcnn/cls_accuracy": 0.992431640625, "fast_rcnn/false_negative": 0.014435996870428954, "fast_rcnn/fg_cls_accuracy": 0.985564003129571, "iteration": 8239, "loss_box_reg": 0.050815703347325325, "loss_cls": 0.017690694890916348, "loss_rpn_cls": 0.0017643110477365553, "loss_rpn_loc": 0.024874779395759106, "lr": 0.005, "roi_head/num_bg_samples": 386.5, "roi_head/num_fg_samples": 125.5, "rpn/num_neg_anchors": 169.375, "rpn/num_pos_anchors": 86.625, "time": 0.8784323599993513, "total_loss": 0.0947606423869729}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01250100399920484, "eta_seconds": 5025.7099048891, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.015625, "fast_rcnn/fg_cls_accuracy": 0.984375, "iteration": 8259, "loss_box_reg": 0.05064737796783447, "loss_cls": 0.019156383350491524, "loss_rpn_cls": 0.001358380657620728, "loss_rpn_loc": 0.030479496344923973, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.75, "rpn/num_pos_anchors": 93.25, "time": 0.8949627125002735, "total_loss": 0.10279775026720017}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.017409477497494663, "eta_seconds": 5007.026794631449, "fast_rcnn/cls_accuracy": 0.99072265625, "fast_rcnn/false_negative": 0.018959862979141495, "fast_rcnn/fg_cls_accuracy": 0.9810401370208586, "iteration": 8279, "loss_box_reg": 0.0538361482322216, "loss_cls": 0.020928706042468548, "loss_rpn_cls": 0.0016404159250669181, "loss_rpn_loc": 0.03133236989378929, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 167.125, "rpn/num_pos_anchors": 88.875, "time": 0.8702230520011653, "total_loss": 0.11261005635606125}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014753025001482456, "eta_seconds": 4993.177334259975, "fast_rcnn/cls_accuracy": 0.99267578125, "fast_rcnn/false_negative": 0.018590407177363696, "fast_rcnn/fg_cls_accuracy": 0.9814095928226363, "iteration": 8299, "loss_box_reg": 0.053017258644104004, "loss_cls": 0.018425303511321545, "loss_rpn_cls": 0.0014737389283254743, "loss_rpn_loc": 0.03368846885859966, "lr": 0.005, "roi_head/num_bg_samples": 390.5, "roi_head/num_fg_samples": 121.5, "rpn/num_neg_anchors": 169.5, "rpn/num_pos_anchors": 86.5, "time": 0.8908823585006758, "total_loss": 0.11143438157159835}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.014433063999604201, "eta_seconds": 4976.133438700388, "fast_rcnn/cls_accuracy": 0.990234375, "fast_rcnn/false_negative": 0.0224609375, "fast_rcnn/fg_cls_accuracy": 0.9775390625, "iteration": 8319, "loss_box_reg": 0.05757828243076801, "loss_cls": 0.021811693906784058, "loss_rpn_cls": 0.0016469656256958842, "loss_rpn_loc": 0.04038182832300663, "lr": 0.005, "roi_head/num_bg_samples": 385.875, "roi_head/num_fg_samples": 126.125, "rpn/num_neg_anchors": 170.625, "rpn/num_pos_anchors": 85.375, "time": 0.8820963875004963, "total_loss": 0.13336871174396947}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013084162499580998, "eta_seconds": 4958.614926330381, "fast_rcnn/cls_accuracy": 0.989501953125, "fast_rcnn/false_negative": 0.020972366528132995, "fast_rcnn/fg_cls_accuracy": 0.979027633471867, "iteration": 8339, "loss_box_reg": 0.06678087636828423, "loss_cls": 0.024433151818811893, "loss_rpn_cls": 0.0022847423097118735, "loss_rpn_loc": 0.031165906228125095, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 162.375, "rpn/num_pos_anchors": 93.625, "time": 0.8402769764979894, "total_loss": 0.12364779727067798}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.013231681999968714, "eta_seconds": 4939.5131939773055, "fast_rcnn/cls_accuracy": 0.990966796875, "fast_rcnn/false_negative": 0.021484375, "fast_rcnn/fg_cls_accuracy": 0.978515625, "iteration": 8359, "loss_box_reg": 0.0616126898676157, "loss_cls": 0.02001752983778715, "loss_rpn_cls": 0.0021335993660613894, "loss_rpn_loc": 0.034669000655412674, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 160.25, "rpn/num_pos_anchors": 95.75, "time": 0.8655506765007885, "total_loss": 0.11665456363698468}

[07/29 20:00:11] detectron2 INFO: {"data_time": 0.01350823799839418, "eta_seconds": 4923.109944900074, "fast_rcnn/cls_accuracy": 0.991455078125, "fast_rcnn/false_negative": 0.014672877082949027, "fast_rcnn/fg_cls_accuracy": 0.985327122917051, "iteration": 8379, "loss_box_reg": 0.05280671641230583, "loss_cls": 0.02037559449672699, "loss_rpn_cls": 0.0018354437197558582, "loss_rpn_loc": 0.028106155805289745, "lr": 0.005, "roi_head/num_bg_samples": 385.625, "roi_head/num_fg_samples": 126.375, "rpn/num_neg_anchors": 161.75, "rpn/num_pos_anchors": 94.25, "time": 0.882374107499345, "total_loss": 0.10878993012011051}

[07/29 20:00:11] detectron2 INFO: {"bbox/AP": 96.38099321561468, "bbox/AP50": 98.96030282951774, "bbox/AP75": 98.96030282951774, "bbox/APl": 97.50203530887782, "bbox/APm": 93.45062068369458, "bbox/APs": NaN, "data_time": 0.012432472500222502, "eta_seconds": 4905.825236601388, "fast_rcnn/cls_accuracy": 0.98828125, "fast_rcnn/false_negative": 0.03125, "fast_rcnn/fg_cls_accuracy": 0.96875, "iteration": 8399, "loss_box_reg": 0.05753114074468613, "loss_cls": 0.017762476578354836, "loss_failed_to_get_better_count": 3.0, "loss_rpn_cls": 0.001827242609579116, "loss_rpn_loc": 0.02730878535658121, "lr": 0.005, "roi_head/num_bg_samples": 384.0, "roi_head/num_fg_samples": 128.0, "rpn/num_neg_anchors": 130.5, "rpn/num_pos_anchors": 125.5, "time": 0.8491263994983456, "total_loss": 0.11265504953917116, "validation_loss": 0.12359663528626659}
[07/29 20:00:11] detectron2 INFO: found existing models
[07/29 20:00:11] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360
[07/29 20:00:11] detectron2 INFO: best_loss=0.11919471451081007
[07/29 20:00:11] detectron2 INFO: loss_failed_to_get_better_count=3.0
[07/29 20:00:11] detectron2 INFO: saved_model_names=model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth
[07/29 20:00:47] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 20:00:47] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 20:00:47] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 20:00:47] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 20:00:47] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:00:47] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 20:00:47] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:00:47] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:00:47] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 20:00:47] detectron2 INFO: found existing models
[07/29 20:00:47] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360
[07/29 20:00:47] detectron2 INFO: best_loss=0.11919471451081007
[07/29 20:00:47] detectron2 INFO: loss_failed_to_get_better_count=3.0
[07/29 20:00:47] detectron2 INFO: saved_model_names=model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth
[07/29 20:01:00] d2.engine.train_loop INFO: Starting training from iteration 8400
[07/29 20:01:18] d2.utils.events INFO:  eta: 1:21:13  iter: 8419  total_loss: 0.120  loss_cls: 0.018  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8576  data_time: 0.0712  lr: 0.005000  max_mem: 7076M
[07/29 20:01:35] d2.utils.events INFO:  eta: 1:21:27  iter: 8439  total_loss: 0.118  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  time: 0.8638  data_time: 0.0154  lr: 0.005000  max_mem: 7325M
[07/29 20:01:53] d2.utils.events INFO:  eta: 1:21:10  iter: 8459  total_loss: 0.123  loss_cls: 0.020  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  time: 0.8641  data_time: 0.0166  lr: 0.005000  max_mem: 7325M
[07/29 20:02:10] d2.utils.events INFO:  eta: 1:20:41  iter: 8479  total_loss: 0.110  loss_cls: 0.021  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  time: 0.8657  data_time: 0.0163  lr: 0.005000  max_mem: 7325M
[07/29 20:02:27] d2.utils.events INFO:  eta: 1:19:52  iter: 8499  total_loss: 0.120  loss_cls: 0.024  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8629  data_time: 0.0188  lr: 0.005000  max_mem: 7325M
[07/29 20:02:45] d2.utils.events INFO:  eta: 1:19:48  iter: 8519  total_loss: 0.090  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  time: 0.8648  data_time: 0.0142  lr: 0.005000  max_mem: 7325M
[07/29 20:03:02] d2.utils.events INFO:  eta: 1:19:34  iter: 8539  total_loss: 0.101  loss_cls: 0.020  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8641  data_time: 0.0158  lr: 0.005000  max_mem: 7325M
[07/29 20:03:19] d2.utils.events INFO:  eta: 1:19:24  iter: 8559  total_loss: 0.099  loss_cls: 0.019  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8655  data_time: 0.0132  lr: 0.005000  max_mem: 7325M
[07/29 20:03:37] d2.utils.events INFO:  eta: 1:18:48  iter: 8579  total_loss: 0.096  loss_cls: 0.020  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  time: 0.8646  data_time: 0.0131  lr: 0.005000  max_mem: 7325M
[07/29 20:03:53] d2.utils.events INFO:  eta: 1:18:02  iter: 8599  total_loss: 0.110  loss_cls: 0.018  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8612  data_time: 0.0153  lr: 0.005000  max_mem: 7325M
[07/29 20:04:11] d2.utils.events INFO:  eta: 1:17:52  iter: 8619  total_loss: 0.099  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  time: 0.8622  data_time: 0.0154  lr: 0.005000  max_mem: 7325M
[07/29 20:04:28] d2.utils.events INFO:  eta: 1:17:37  iter: 8639  total_loss: 0.105  loss_cls: 0.018  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8630  data_time: 0.0157  lr: 0.005000  max_mem: 7325M
[07/29 20:04:45] d2.utils.events INFO:  eta: 1:17:16  iter: 8659  total_loss: 0.106  loss_cls: 0.020  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  time: 0.8629  data_time: 0.0163  lr: 0.005000  max_mem: 7325M
[07/29 20:05:03] d2.utils.events INFO:  eta: 1:17:00  iter: 8679  total_loss: 0.090  loss_cls: 0.016  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8639  data_time: 0.0152  lr: 0.005000  max_mem: 7325M
[07/29 20:05:22] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 20:05:22] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:05:22] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 20:05:22] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 20:05:22] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 20:05:25] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1056 s / img. ETA=0:00:50
[07/29 20:05:30] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1033 s / img. ETA=0:00:50
[07/29 20:05:35] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1032 s / img. ETA=0:00:48
[07/29 20:05:40] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1016 s / img. ETA=0:00:42
[07/29 20:05:45] d2.evaluation.evaluator INFO: Inference done 171/468. 0.1023 s / img. ETA=0:00:37
[07/29 20:05:50] d2.evaluation.evaluator INFO: Inference done 212/468. 0.1028 s / img. ETA=0:00:32
[07/29 20:05:55] d2.evaluation.evaluator INFO: Inference done 254/468. 0.1032 s / img. ETA=0:00:26
[07/29 20:06:00] d2.evaluation.evaluator INFO: Inference done 301/468. 0.1021 s / img. ETA=0:00:20
[07/29 20:06:05] d2.evaluation.evaluator INFO: Inference done 355/468. 0.1004 s / img. ETA=0:00:13
[07/29 20:06:10] d2.evaluation.evaluator INFO: Inference done 409/468. 0.0992 s / img. ETA=0:00:06
[07/29 20:06:15] d2.evaluation.evaluator INFO: Inference done 463/468. 0.0983 s / img. ETA=0:00:00
[07/29 20:06:16] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.879148 (0.112050 s / img per device, on 1 devices)
[07/29 20:06:16] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098247 s / img per device, on 1 devices)
[07/29 20:06:16] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 20:06:16] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 20:06:16] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 20:06:17] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 96.284 | 98.957 | 98.957 |  nan  | 92.946 | 97.530 |
[07/29 20:06:17] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 20:06:17] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 20:06:17] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 20:06:17] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 20:06:17] d2.evaluation.testing INFO: copypaste: 96.2844,98.9567,98.9567,nan,92.9461,97.5295
[07/29 20:06:19] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 20:06:24] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 20:06:29] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 20:06:34] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 20:06:39] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 20:06:44] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 20:06:49] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:30
[07/29 20:06:55] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:24
[07/29 20:07:00] detectron2 INFO: Loss on Validation  done 327/468. 0.0001 s / img. ETA=0:00:18
[07/29 20:07:05] detectron2 INFO: Loss on Validation  done 374/468. 0.0001 s / img. ETA=0:00:11
[07/29 20:07:10] detectron2 INFO: Loss on Validation  done 423/468. 0.0001 s / img. ETA=0:00:05
[07/29 20:07:14] detectron2 INFO: mean_loss=0.12551206811835244, best_loss=0.11919471451081007
[07/29 20:07:14] detectron2 INFO: could not find a better loss with mean_loss=0.12551206811835244 best_loss=0.11919471451081007 and failed count=4.0
[07/29 20:07:14] detectron2 INFO: saving model to: model_0008699.pth, saved_model_names=model_0007199.pth, model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 20:07:14] detectron2 INFO: exeeded model save threshold - removing model_0007199.pth
[07/29 20:07:15] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 20:07:15] d2.utils.events INFO:  eta: 1:16:42  iter: 8699  total_loss: 0.085  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8644  data_time: 0.0152  lr: 0.005000  max_mem: 7325M
[07/29 20:07:32] d2.utils.events INFO:  eta: 1:16:29  iter: 8719  total_loss: 0.119  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.041  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8655  data_time: 0.0169  lr: 0.005000  max_mem: 7325M
[07/29 20:07:49] d2.utils.events INFO:  eta: 1:16:17  iter: 8739  total_loss: 0.115  loss_cls: 0.018  loss_box_reg: 0.045  loss_rpn_cls: 0.003  loss_rpn_loc: 0.033  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8652  data_time: 0.0144  lr: 0.005000  max_mem: 7325M
[07/29 20:08:07] d2.utils.events INFO:  eta: 1:16:12  iter: 8759  total_loss: 0.117  loss_cls: 0.020  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8663  data_time: 0.0146  lr: 0.005000  max_mem: 7325M
[07/29 20:08:24] d2.utils.events INFO:  eta: 1:15:51  iter: 8779  total_loss: 0.120  loss_cls: 0.022  loss_box_reg: 0.066  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8654  data_time: 0.0162  lr: 0.005000  max_mem: 7325M
[07/29 20:08:41] d2.utils.events INFO:  eta: 1:15:37  iter: 8799  total_loss: 0.099  loss_cls: 0.019  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8656  data_time: 0.0157  lr: 0.005000  max_mem: 7325M
[07/29 20:08:59] d2.utils.events INFO:  eta: 1:15:14  iter: 8819  total_loss: 0.106  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8652  data_time: 0.0143  lr: 0.005000  max_mem: 7325M
[07/29 20:09:16] d2.utils.events INFO:  eta: 1:15:06  iter: 8839  total_loss: 0.087  loss_cls: 0.015  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8664  data_time: 0.0157  lr: 0.005000  max_mem: 7325M
[07/29 20:09:33] d2.utils.events INFO:  eta: 1:14:41  iter: 8859  total_loss: 0.120  loss_cls: 0.023  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8654  data_time: 0.0139  lr: 0.005000  max_mem: 7325M
[07/29 20:09:51] d2.utils.events INFO:  eta: 1:14:24  iter: 8879  total_loss: 0.106  loss_cls: 0.019  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8657  data_time: 0.0149  lr: 0.005000  max_mem: 7325M
[07/29 20:10:08] d2.utils.events INFO:  eta: 1:13:53  iter: 8899  total_loss: 0.107  loss_cls: 0.015  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8653  data_time: 0.0177  lr: 0.005000  max_mem: 7325M
[07/29 20:10:25] d2.utils.events INFO:  eta: 1:13:35  iter: 8919  total_loss: 0.114  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8651  data_time: 0.0137  lr: 0.005000  max_mem: 7325M
[07/29 20:10:42] d2.utils.events INFO:  eta: 1:13:18  iter: 8939  total_loss: 0.104  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8650  data_time: 0.0148  lr: 0.005000  max_mem: 7325M
[07/29 20:11:00] d2.utils.events INFO:  eta: 1:13:01  iter: 8959  total_loss: 0.092  loss_cls: 0.015  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8653  data_time: 0.0164  lr: 0.005000  max_mem: 7325M
[07/29 20:11:17] d2.utils.events INFO:  eta: 1:12:44  iter: 8979  total_loss: 0.098  loss_cls: 0.020  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.126  loss_failed_to_get_better_count: 4.000  time: 0.8654  data_time: 0.0156  lr: 0.005000  max_mem: 7325M
[07/29 20:11:38] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:11:38] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 20:11:38] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 20:11:38] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 20:11:40] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0975 s / img. ETA=0:00:45
[07/29 20:11:45] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1019 s / img. ETA=0:00:49
[07/29 20:11:50] d2.evaluation.evaluator INFO: Inference done 88/468. 0.1036 s / img. ETA=0:00:48
[07/29 20:11:55] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1028 s / img. ETA=0:00:43
[07/29 20:12:00] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1029 s / img. ETA=0:00:37
[07/29 20:12:06] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1037 s / img. ETA=0:00:32
[07/29 20:12:11] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1032 s / img. ETA=0:00:27
[07/29 20:12:16] d2.evaluation.evaluator INFO: Inference done 298/468. 0.1019 s / img. ETA=0:00:20
[07/29 20:12:21] d2.evaluation.evaluator INFO: Inference done 352/468. 0.1002 s / img. ETA=0:00:13
[07/29 20:12:26] d2.evaluation.evaluator INFO: Inference done 406/468. 0.0991 s / img. ETA=0:00:07
[07/29 20:12:31] d2.evaluation.evaluator INFO: Inference done 460/468. 0.0981 s / img. ETA=0:00:00
[07/29 20:12:32] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.084078 (0.112493 s / img per device, on 1 devices)
[07/29 20:12:32] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098046 s / img per device, on 1 devices)
[07/29 20:12:32] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 20:12:32] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 20:12:32] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 20:12:32] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 96.145 | 98.946 | 98.946 |  nan  | 93.861 | 96.987 |
[07/29 20:12:32] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 20:12:32] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 20:12:32] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 20:12:32] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 20:12:32] d2.evaluation.testing INFO: copypaste: 96.1447,98.9463,98.9463,nan,93.8608,96.9874
[07/29 20:12:35] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 20:12:40] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 20:12:45] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:49
[07/29 20:12:50] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 20:12:55] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:39
[07/29 20:13:00] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:34
[07/29 20:13:05] detectron2 INFO: Loss on Validation  done 240/468. 0.0001 s / img. ETA=0:00:29
[07/29 20:13:10] detectron2 INFO: Loss on Validation  done 280/468. 0.0001 s / img. ETA=0:00:24
[07/29 20:13:15] detectron2 INFO: Loss on Validation  done 328/468. 0.0001 s / img. ETA=0:00:17
[07/29 20:13:20] detectron2 INFO: Loss on Validation  done 375/468. 0.0001 s / img. ETA=0:00:11
[07/29 20:13:25] detectron2 INFO: Loss on Validation  done 423/468. 0.0001 s / img. ETA=0:00:05
[07/29 20:13:30] detectron2 INFO: mean_loss=0.11544641257252639, best_loss=0.11919471451081007
[07/29 20:13:30] detectron2 INFO: could not find a better loss with mean_loss=0.11544641257252639 best_loss=0.11919471451081007 and failed count=5.0
[07/29 20:13:30] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 131, in train
    self.after_step()
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 152, in after_step
    h.after_step()
  File "<ipython-input-25-10eea686a08d>", line 142, in after_step
    raise Exception("Could not compute a better loss - training stopped as a result")
Exception: Could not compute a better loss - training stopped as a result
[07/29 20:13:30] d2.engine.hooks INFO: Overall training speed: 597 iterations in 0:08:37 (0.8671 s / it)
[07/29 20:13:30] d2.engine.hooks INFO: Total training time: 0:12:27 (0:03:49 on hooks)
[07/29 20:15:28] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 20:15:28] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 20:15:28] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 20:15:28] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 20:15:28] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:15:28] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 20:15:28] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:15:28] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:15:28] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 20:17:57] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 20:17:57] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 20:17:57] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 20:17:57] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 20:18:02] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 20:18:02] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 20:18:02] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 20:18:02] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 20:18:02] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 20:18:02] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:18:02] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 20:18:03] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:18:03] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 20:18:03] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:18:03] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 20:18:04] detectron2 INFO: found existing models
[07/29 20:18:04] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 20:18:04] detectron2 INFO: best_loss=0.11919471451081007
[07/29 20:18:04] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 20:18:04] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 20:18:09] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 20:18:27] d2.utils.events INFO:  eta: 1:17:49  iter: 8719  total_loss: 0.127  loss_cls: 0.021  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  time: 0.8752  data_time: 0.0540  lr: 0.005000  max_mem: 6855M
[07/29 20:18:44] d2.utils.events INFO:  eta: 1:17:04  iter: 8739  total_loss: 0.092  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8714  data_time: 0.0146  lr: 0.005000  max_mem: 6855M
[07/29 20:19:02] d2.utils.events INFO:  eta: 1:16:11  iter: 8759  total_loss: 0.094  loss_cls: 0.015  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8721  data_time: 0.0150  lr: 0.005000  max_mem: 6855M
[07/29 20:19:19] d2.utils.events INFO:  eta: 1:15:29  iter: 8779  total_loss: 0.114  loss_cls: 0.018  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  time: 0.8671  data_time: 0.0150  lr: 0.005000  max_mem: 6855M
[07/29 20:19:36] d2.utils.events INFO:  eta: 1:14:59  iter: 8799  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8638  data_time: 0.0159  lr: 0.005000  max_mem: 6855M
[07/29 20:19:53] d2.utils.events INFO:  eta: 1:14:46  iter: 8819  total_loss: 0.109  loss_cls: 0.022  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8636  data_time: 0.0136  lr: 0.005000  max_mem: 6855M
[07/29 20:20:10] d2.utils.events INFO:  eta: 1:14:24  iter: 8839  total_loss: 0.100  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8628  data_time: 0.0148  lr: 0.005000  max_mem: 6855M
[07/29 20:20:28] d2.utils.events INFO:  eta: 1:14:12  iter: 8859  total_loss: 0.116  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8643  data_time: 0.0156  lr: 0.005000  max_mem: 6855M
[07/29 20:20:45] d2.utils.events INFO:  eta: 1:13:51  iter: 8879  total_loss: 0.094  loss_cls: 0.019  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8655  data_time: 0.0168  lr: 0.005000  max_mem: 6855M
[07/29 20:21:03] d2.utils.events INFO:  eta: 1:13:38  iter: 8899  total_loss: 0.099  loss_cls: 0.019  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8676  data_time: 0.0156  lr: 0.005000  max_mem: 6855M
[07/29 20:21:20] d2.utils.events INFO:  eta: 1:13:21  iter: 8919  total_loss: 0.105  loss_cls: 0.019  loss_box_reg: 0.063  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  time: 0.8665  data_time: 0.0176  lr: 0.005000  max_mem: 6855M
[07/29 20:21:37] d2.utils.events INFO:  eta: 1:13:04  iter: 8939  total_loss: 0.100  loss_cls: 0.020  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8658  data_time: 0.0146  lr: 0.005000  max_mem: 6855M
[07/29 20:21:55] d2.utils.events INFO:  eta: 1:12:46  iter: 8959  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  time: 0.8660  data_time: 0.0182  lr: 0.005000  max_mem: 6855M
[07/29 20:22:11] d2.utils.events INFO:  eta: 1:12:28  iter: 8979  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8646  data_time: 0.0161  lr: 0.005000  max_mem: 6855M
[07/29 20:22:30] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 20:22:30] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:22:30] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 20:22:30] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 20:22:31] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 20:22:34] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1046 s / img. ETA=0:00:59
[07/29 20:22:39] d2.evaluation.evaluator INFO: Inference done 54/468. 0.1007 s / img. ETA=0:00:49
[07/29 20:22:44] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1050 s / img. ETA=0:00:48
[07/29 20:22:49] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1036 s / img. ETA=0:00:42
[07/29 20:22:54] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1038 s / img. ETA=0:00:37
[07/29 20:22:59] d2.evaluation.evaluator INFO: Inference done 214/468. 0.1036 s / img. ETA=0:00:31
[07/29 20:23:04] d2.evaluation.evaluator INFO: Inference done 256/468. 0.1033 s / img. ETA=0:00:26
[07/29 20:23:10] d2.evaluation.evaluator INFO: Inference done 304/468. 0.1018 s / img. ETA=0:00:19
[07/29 20:23:15] d2.evaluation.evaluator INFO: Inference done 358/468. 0.1002 s / img. ETA=0:00:12
[07/29 20:23:20] d2.evaluation.evaluator INFO: Inference done 412/468. 0.0990 s / img. ETA=0:00:06
[07/29 20:23:25] d2.evaluation.evaluator INFO: Inference done 466/468. 0.0981 s / img. ETA=0:00:00
[07/29 20:23:25] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.687506 (0.111636 s / img per device, on 1 devices)
[07/29 20:23:25] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098108 s / img per device, on 1 devices)
[07/29 20:23:25] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 20:23:25] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 20:23:25] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 20:23:25] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.509 | 98.924 | 98.924 |  nan  | 90.492 | 94.633 |
[07/29 20:23:25] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 20:23:25] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 20:23:25] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 20:23:25] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 20:23:25] d2.evaluation.testing INFO: copypaste: 93.5087,98.9243,98.9243,nan,90.4916,94.6327
[07/29 20:23:28] detectron2 INFO: Loss on Validation  done 11/468. 0.0000 s / img. ETA=0:00:48
[07/29 20:23:33] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 20:23:38] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 20:23:43] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 20:23:48] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 20:23:53] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 20:23:58] detectron2 INFO: Loss on Validation  done 243/468. 0.0001 s / img. ETA=0:00:29
[07/29 20:24:03] detectron2 INFO: Loss on Validation  done 284/468. 0.0001 s / img. ETA=0:00:23
[07/29 20:24:08] detectron2 INFO: Loss on Validation  done 335/468. 0.0001 s / img. ETA=0:00:16
[07/29 20:24:13] detectron2 INFO: Loss on Validation  done 384/468. 0.0001 s / img. ETA=0:00:10
[07/29 20:24:19] detectron2 INFO: Loss on Validation  done 431/468. 0.0001 s / img. ETA=0:00:04
[07/29 20:24:23] detectron2 INFO: mean_loss=0.12663323790702408, best_loss=0.11919471451081007
[07/29 20:24:23] detectron2 INFO: could not find a better loss with mean_loss=0.12663323790702408 best_loss=0.11919471451081007 and failed count=5.0
[07/29 20:24:23] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 20:24:23] detectron2 INFO: saving model to: model_0008999.pth, saved_model_names=model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 20:24:23] d2.utils.events INFO:  eta: 1:12:08  iter: 8999  total_loss: 0.102  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.127  loss_failed_to_get_better_count: 0.000  time: 0.8637  data_time: 0.0144  lr: 0.005000  max_mem: 6855M
[07/29 20:24:40] d2.utils.events INFO:  eta: 1:11:50  iter: 9019  total_loss: 0.097  loss_cls: 0.018  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.028  validation_loss: 0.127  loss_failed_to_get_better_count: 0.000  time: 0.8629  data_time: 0.0147  lr: 0.005000  max_mem: 6855M
[07/29 20:24:57] d2.utils.events INFO:  eta: 1:11:42  iter: 9039  total_loss: 0.095  loss_cls: 0.016  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.127  loss_failed_to_get_better_count: 0.000  time: 0.8635  data_time: 0.0130  lr: 0.005000  max_mem: 6855M
[07/29 20:25:14] d2.utils.events INFO:  eta: 1:11:16  iter: 9059  total_loss: 0.110  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.127  loss_failed_to_get_better_count: 0.000  time: 0.8623  data_time: 0.0144  lr: 0.005000  max_mem: 6855M
[07/29 20:25:31] d2.utils.events INFO:  eta: 1:10:59  iter: 9079  total_loss: 0.129  loss_cls: 0.022  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.127  loss_failed_to_get_better_count: 0.000  time: 0.8626  data_time: 0.0151  lr: 0.005000  max_mem: 6855M
[07/29 20:25:49] d2.utils.events INFO:  eta: 1:10:42  iter: 9099  total_loss: 0.113  loss_cls: 0.017  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.127  loss_failed_to_get_better_count: 0.000  time: 0.8629  data_time: 0.0167  lr: 0.005000  max_mem: 6855M
[07/29 20:25:50] d2.engine.hooks INFO: Overall training speed: 399 iterations in 0:05:44 (0.8638 s / it)
[07/29 20:25:50] d2.engine.hooks INFO: Total training time: 0:07:39 (0:01:54 on hooks)
[07/29 20:47:09] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 20:47:09] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 20:47:09] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 20:47:09] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 20:47:09] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:47:09] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 20:47:09] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:47:09] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:47:09] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 20:48:18] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 20:48:18] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 20:48:19] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 20:48:19] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 20:48:19] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:48:19] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 20:48:19] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 20:48:19] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:48:19] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 20:48:19] detectron2 INFO: found existing models
[07/29 20:48:19] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 20:48:19] detectron2 INFO: best_loss=0.11919471451081007
[07/29 20:48:19] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 20:48:19] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 20:48:38] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 20:48:56] d2.utils.events INFO:  eta: 1:14:22  iter: 8719  total_loss: 0.112  loss_cls: 0.020  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  time: 0.8474  data_time: 0.0530  lr: 0.005000  max_mem: 12349M
[07/29 20:49:13] d2.utils.events INFO:  eta: 1:16:07  iter: 8739  total_loss: 0.109  loss_cls: 0.018  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8601  data_time: 0.0152  lr: 0.005000  max_mem: 12349M
[07/29 20:49:30] d2.utils.events INFO:  eta: 1:15:36  iter: 8759  total_loss: 0.118  loss_cls: 0.020  loss_box_reg: 0.063  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  time: 0.8604  data_time: 0.0150  lr: 0.005000  max_mem: 12349M
[07/29 20:49:48] d2.utils.events INFO:  eta: 1:15:32  iter: 8779  total_loss: 0.122  loss_cls: 0.023  loss_box_reg: 0.063  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8612  data_time: 0.0142  lr: 0.005000  max_mem: 12349M
[07/29 20:50:05] d2.utils.events INFO:  eta: 1:15:10  iter: 8799  total_loss: 0.092  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8609  data_time: 0.0143  lr: 0.005000  max_mem: 12349M
[07/29 20:50:22] d2.utils.events INFO:  eta: 1:14:52  iter: 8819  total_loss: 0.107  loss_cls: 0.020  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8622  data_time: 0.0139  lr: 0.005000  max_mem: 12349M
[07/29 20:50:39] d2.utils.events INFO:  eta: 1:14:35  iter: 8839  total_loss: 0.115  loss_cls: 0.020  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8607  data_time: 0.0132  lr: 0.005000  max_mem: 12349M
[07/29 20:50:57] d2.utils.events INFO:  eta: 1:14:25  iter: 8859  total_loss: 0.083  loss_cls: 0.016  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  time: 0.8630  data_time: 0.0151  lr: 0.005000  max_mem: 12349M
[07/29 20:51:14] d2.utils.events INFO:  eta: 1:14:08  iter: 8879  total_loss: 0.094  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  time: 0.8642  data_time: 0.0147  lr: 0.005000  max_mem: 12349M
[07/29 20:51:32] d2.utils.events INFO:  eta: 1:13:51  iter: 8899  total_loss: 0.105  loss_cls: 0.021  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  time: 0.8653  data_time: 0.0127  lr: 0.005000  max_mem: 12349M
[07/29 20:51:49] d2.utils.events INFO:  eta: 1:13:29  iter: 8919  total_loss: 0.130  loss_cls: 0.021  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  time: 0.8633  data_time: 0.0187  lr: 0.005000  max_mem: 12349M
[07/29 20:52:07] d2.utils.events INFO:  eta: 1:13:24  iter: 8939  total_loss: 0.097  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  time: 0.8663  data_time: 0.0139  lr: 0.005000  max_mem: 12349M
[07/29 20:52:24] d2.utils.events INFO:  eta: 1:13:05  iter: 8959  total_loss: 0.100  loss_cls: 0.020  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8659  data_time: 0.0145  lr: 0.005000  max_mem: 12349M
[07/29 20:52:41] d2.utils.events INFO:  eta: 1:12:43  iter: 8979  total_loss: 0.114  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8646  data_time: 0.0155  lr: 0.005000  max_mem: 12349M
[07/29 20:53:00] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 20:53:00] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 20:53:00] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 20:53:00] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 20:53:03] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1148 s / img. ETA=0:00:57
[07/29 20:53:08] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1070 s / img. ETA=0:00:50
[07/29 20:53:13] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1050 s / img. ETA=0:00:48
[07/29 20:53:18] d2.evaluation.evaluator INFO: Inference done 129/468. 0.1048 s / img. ETA=0:00:43
[07/29 20:53:23] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1052 s / img. ETA=0:00:37
[07/29 20:53:28] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1047 s / img. ETA=0:00:33
[07/29 20:53:33] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1039 s / img. ETA=0:00:27
[07/29 20:53:38] d2.evaluation.evaluator INFO: Inference done 295/468. 0.1029 s / img. ETA=0:00:21
[07/29 20:53:43] d2.evaluation.evaluator INFO: Inference done 349/468. 0.1011 s / img. ETA=0:00:14
[07/29 20:53:48] d2.evaluation.evaluator INFO: Inference done 403/468. 0.0998 s / img. ETA=0:00:07
[07/29 20:53:53] d2.evaluation.evaluator INFO: Inference done 457/468. 0.0988 s / img. ETA=0:00:01
[07/29 20:53:55] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.488476 (0.113366 s / img per device, on 1 devices)
[07/29 20:53:55] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098654 s / img per device, on 1 devices)
[07/29 20:53:55] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 20:53:55] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 20:53:55] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 20:53:55] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.836 | 98.932 | 98.932 |  nan  | 92.754 | 97.025 |
[07/29 20:53:55] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 20:53:55] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 20:53:55] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 20:53:55] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 20:53:55] d2.evaluation.testing INFO: copypaste: 95.8361,98.9321,98.9321,nan,92.7535,97.0248
[07/29 20:53:58] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:56
[07/29 20:54:03] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 20:54:08] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 20:54:13] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:45
[07/29 20:54:18] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 20:54:23] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 20:54:28] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 20:54:33] detectron2 INFO: Loss on Validation  done 279/468. 0.0001 s / img. ETA=0:00:25
[07/29 20:54:38] detectron2 INFO: Loss on Validation  done 329/468. 0.0001 s / img. ETA=0:00:17
[07/29 20:54:44] detectron2 INFO: Loss on Validation  done 379/468. 0.0001 s / img. ETA=0:00:11
[07/29 20:54:49] detectron2 INFO: Loss on Validation  done 425/468. 0.0001 s / img. ETA=0:00:05
[07/29 20:54:53] detectron2 INFO: mean_loss=0.12213569949686855, best_loss=0.11919471451081007
[07/29 20:54:53] detectron2 INFO: could not find a better loss with mean_loss=0.12213569949686855 best_loss=0.11919471451081007 and failed count=5.0
[07/29 20:54:53] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 20:54:53] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 131, in train
    self.after_step()
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 152, in after_step
    h.after_step()
  File "<ipython-input-28-f412288d2d86>", line 147, in after_step
    self._scheduler = build_lr_scheduler(self._cfg, self._optimizer)
  File "/usr/local/lib/python3.6/dist-packages/detectron2/solver/build.py", line 154, in build_lr_scheduler
    warmup_method=cfg.SOLVER.WARMUP_METHOD,
  File "/usr/local/lib/python3.6/dist-packages/detectron2/solver/lr_scheduler.py", line 29, in __init__
    "Milestones should be a list of" " increasing integers. Got {}", milestones
ValueError: ('Milestones should be a list of increasing integers. Got {}', (210000, 250000, 9000))
[07/29 20:54:53] d2.engine.hooks INFO: Overall training speed: 297 iterations in 0:04:17 (0.8669 s / it)
[07/29 20:54:53] d2.engine.hooks INFO: Total training time: 0:06:12 (0:01:55 on hooks)
[07/29 21:00:13] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:00:13] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:00:13] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:00:13] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:00:13] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:00:13] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:00:13] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:00:13] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:00:13] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:00:13] detectron2 INFO: found existing models
[07/29 21:00:13] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:00:13] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:00:13] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:00:13] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:00:20] d2.engine.train_loop INFO: Starting training from iteration 7500
[07/29 21:00:23] d2.engine.hooks INFO: Overall training speed: 1 iterations in 0:00:00 (0.9695 s / it)
[07/29 21:00:23] d2.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[07/29 21:00:54] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:00:55] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:00:55] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:00:55] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:00:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:00:55] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:00:55] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:00:55] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:00:55] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:00:55] detectron2 INFO: found existing models
[07/29 21:00:55] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:00:55] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:00:55] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:00:55] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 21:00:59] d2.engine.train_loop INFO: Starting training from iteration 7500
[07/29 21:01:02] d2.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[07/29 21:01:53] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:01:53] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:01:53] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:01:53] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:01:59] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:01:59] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:01:59] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 21:01:59] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:01:59] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:01:59] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:01:59] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:02:01] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:02:01] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 21:02:01] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:02:01] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:02:01] detectron2 INFO: found existing models
[07/29 21:02:01] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:02:01] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:02:01] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:02:01] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 21:02:02] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 21:02:20] d2.utils.events INFO:  eta: 1:16:07  iter: 8719  total_loss: 0.107  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.032  time: 0.8692  data_time: 0.0537  lr: 0.005000  max_mem: 6853M
[07/29 21:02:38] d2.utils.events INFO:  eta: 1:16:50  iter: 8739  total_loss: 0.103  loss_cls: 0.019  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8698  data_time: 0.0143  lr: 0.005000  max_mem: 6853M
[07/29 21:02:55] d2.utils.events INFO:  eta: 1:16:13  iter: 8759  total_loss: 0.120  loss_cls: 0.016  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8704  data_time: 0.0168  lr: 0.005000  max_mem: 6853M
[07/29 21:03:13] d2.utils.events INFO:  eta: 1:15:32  iter: 8779  total_loss: 0.104  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8700  data_time: 0.0139  lr: 0.005000  max_mem: 6853M
[07/29 21:03:30] d2.utils.events INFO:  eta: 1:15:23  iter: 8799  total_loss: 0.094  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  time: 0.8698  data_time: 0.0158  lr: 0.005000  max_mem: 6853M
[07/29 21:03:47] d2.utils.events INFO:  eta: 1:14:44  iter: 8819  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8660  data_time: 0.0159  lr: 0.005000  max_mem: 6853M
[07/29 21:04:04] d2.utils.events INFO:  eta: 1:14:33  iter: 8839  total_loss: 0.105  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8665  data_time: 0.0153  lr: 0.005000  max_mem: 6853M
[07/29 21:04:22] d2.utils.events INFO:  eta: 1:14:20  iter: 8859  total_loss: 0.093  loss_cls: 0.020  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  time: 0.8658  data_time: 0.0177  lr: 0.005000  max_mem: 6853M
[07/29 21:04:39] d2.utils.events INFO:  eta: 1:13:56  iter: 8879  total_loss: 0.107  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8647  data_time: 0.0162  lr: 0.005000  max_mem: 6853M
[07/29 21:04:56] d2.utils.events INFO:  eta: 1:13:38  iter: 8899  total_loss: 0.118  loss_cls: 0.023  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8634  data_time: 0.0174  lr: 0.005000  max_mem: 6853M
[07/29 21:05:14] d2.utils.events INFO:  eta: 1:13:25  iter: 8919  total_loss: 0.087  loss_cls: 0.018  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  time: 0.8655  data_time: 0.0155  lr: 0.005000  max_mem: 6853M
[07/29 21:05:31] d2.utils.events INFO:  eta: 1:13:07  iter: 8939  total_loss: 0.097  loss_cls: 0.020  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  time: 0.8653  data_time: 0.0139  lr: 0.005000  max_mem: 6853M
[07/29 21:05:48] d2.utils.events INFO:  eta: 1:12:57  iter: 8959  total_loss: 0.108  loss_cls: 0.020  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  time: 0.8661  data_time: 0.0146  lr: 0.005000  max_mem: 6853M
[07/29 21:06:06] d2.utils.events INFO:  eta: 1:12:59  iter: 8979  total_loss: 0.110  loss_cls: 0.017  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8677  data_time: 0.0167  lr: 0.005000  max_mem: 6853M
[07/29 21:06:25] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 21:06:25] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:06:25] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 21:06:25] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 21:06:25] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 21:06:28] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1045 s / img. ETA=0:00:50
[07/29 21:06:33] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1035 s / img. ETA=0:00:51
[07/29 21:06:38] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1019 s / img. ETA=0:00:49
[07/29 21:06:43] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1007 s / img. ETA=0:00:43
[07/29 21:06:48] d2.evaluation.evaluator INFO: Inference done 170/468. 0.1016 s / img. ETA=0:00:37
[07/29 21:06:53] d2.evaluation.evaluator INFO: Inference done 210/468. 0.1021 s / img. ETA=0:00:32
[07/29 21:06:58] d2.evaluation.evaluator INFO: Inference done 252/468. 0.1023 s / img. ETA=0:00:27
[07/29 21:07:03] d2.evaluation.evaluator INFO: Inference done 299/468. 0.1015 s / img. ETA=0:00:20
[07/29 21:07:08] d2.evaluation.evaluator INFO: Inference done 353/468. 0.0999 s / img. ETA=0:00:13
[07/29 21:07:13] d2.evaluation.evaluator INFO: Inference done 407/468. 0.0987 s / img. ETA=0:00:07
[07/29 21:07:18] d2.evaluation.evaluator INFO: Inference done 461/468. 0.0979 s / img. ETA=0:00:00
[07/29 21:07:19] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.952845 (0.112209 s / img per device, on 1 devices)
[07/29 21:07:19] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097777 s / img per device, on 1 devices)
[07/29 21:07:19] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 21:07:19] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 21:07:19] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 21:07:19] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.452 | 98.928 | 98.928 |  nan  | 92.990 | 96.412 |
[07/29 21:07:19] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 21:07:19] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 21:07:19] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 21:07:19] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 21:07:19] d2.evaluation.testing INFO: copypaste: 95.4516,98.9281,98.9281,nan,92.9901,96.4123
[07/29 21:07:22] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 21:07:27] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 21:07:32] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 21:07:37] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 21:07:42] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 21:07:47] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 21:07:52] detectron2 INFO: Loss on Validation  done 241/468. 0.0001 s / img. ETA=0:00:29
[07/29 21:07:57] detectron2 INFO: Loss on Validation  done 281/468. 0.0001 s / img. ETA=0:00:24
[07/29 21:08:02] detectron2 INFO: Loss on Validation  done 331/468. 0.0001 s / img. ETA=0:00:17
[07/29 21:08:07] detectron2 INFO: Loss on Validation  done 380/468. 0.0001 s / img. ETA=0:00:10
[07/29 21:08:12] detectron2 INFO: Loss on Validation  done 427/468. 0.0001 s / img. ETA=0:00:04
[07/29 21:08:17] detectron2 INFO: mean_loss=0.11802891810799711, best_loss=0.11919471451081007
[07/29 21:08:17] detectron2 INFO: could not find a better loss with mean_loss=0.11802891810799711 best_loss=0.11919471451081007 and failed count=5.0
[07/29 21:08:17] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 21:08:17] detectron2 INFO: (9000,)
[07/29 21:08:17] detectron2 INFO: saving model to: model_0008999.pth, saved_model_names=model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:08:17] d2.utils.events INFO:  eta: 1:12:36  iter: 8999  total_loss: 0.100  loss_cls: 0.019  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 0.000  time: 0.8669  data_time: 0.0142  lr: 0.005000  max_mem: 6853M
[07/29 21:08:34] d2.utils.events INFO:  eta: 1:12:11  iter: 9019  total_loss: 0.104  loss_cls: 0.021  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.118  loss_failed_to_get_better_count: 0.000  time: 0.8673  data_time: 0.0136  lr: 0.005000  max_mem: 6853M
[07/29 21:08:38] d2.engine.hooks INFO: Overall training speed: 322 iterations in 0:04:39 (0.8683 s / it)
[07/29 21:08:38] d2.engine.hooks INFO: Total training time: 0:06:33 (0:01:53 on hooks)
[07/29 21:23:36] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:23:36] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:23:36] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:23:36] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:23:36] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:23:36] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:23:36] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:23:36] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:23:36] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:23:36] detectron2 INFO: found existing models
[07/29 21:23:36] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.11803
[07/29 21:23:36] detectron2 INFO: best_loss=0.11802891810799711
[07/29 21:23:36] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 21:23:36] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:23:51] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:23:51] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:23:51] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:23:51] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:23:51] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:23:51] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:23:51] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:23:51] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:23:51] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:23:51] detectron2 INFO: found existing models
[07/29 21:23:51] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.11803
[07/29 21:23:51] detectron2 INFO: best_loss=0.11802891810799711
[07/29 21:23:51] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 21:23:51] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:24:57] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:24:57] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:24:57] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:24:57] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:25:02] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:25:02] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:25:02] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 21:25:02] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:25:02] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:25:02] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:25:02] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:25:03] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:25:03] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 21:25:03] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:25:03] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:25:03] detectron2 INFO: found existing models
[07/29 21:25:03] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.11803
[07/29 21:25:03] detectron2 INFO: best_loss=0.11802891810799711
[07/29 21:25:03] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 21:25:03] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:39:46] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:39:46] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:39:46] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:39:46] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:39:46] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:39:46] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:39:46] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:39:46] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:39:46] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:39:46] detectron2 INFO: found existing models
[07/29 21:39:46] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.11803
[07/29 21:39:46] detectron2 INFO: best_loss=0.11802891810799711
[07/29 21:39:46] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 21:39:46] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:40:46] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:40:46] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:40:46] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:40:46] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:40:46] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:40:46] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:40:46] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:40:46] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:40:46] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:40:46] detectron2 INFO: found existing models
[07/29 21:40:46] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.11803
[07/29 21:40:46] detectron2 INFO: best_loss=0.11802891810799711
[07/29 21:40:46] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 21:40:46] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:41:07] d2.engine.train_loop INFO: Starting training from iteration 7500
[07/29 21:41:12] d2.engine.hooks INFO: Overall training speed: 2 iterations in 0:00:02 (1.1517 s / it)
[07/29 21:41:12] d2.engine.hooks INFO: Total training time: 0:00:02 (0:00:00 on hooks)
[07/29 21:41:53] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:41:53] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:41:53] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:41:53] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:41:58] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:41:58] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:41:59] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 21:41:59] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:41:59] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:41:59] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:41:59] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:42:00] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:42:00] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 21:42:00] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:42:00] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:42:00] detectron2 INFO: found existing models
[07/29 21:42:00] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.11803
[07/29 21:42:00] detectron2 INFO: best_loss=0.11802891810799711
[07/29 21:42:00] detectron2 INFO: loss_failed_to_get_better_count=0.0
[07/29 21:42:00] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 21:42:04] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 21:42:08] d2.engine.hooks INFO: Overall training speed: 1 iterations in 0:00:01 (1.6197 s / it)
[07/29 21:42:08] d2.engine.hooks INFO: Total training time: 0:00:01 (0:00:00 on hooks)
[07/29 21:43:12] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:43:12] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:43:12] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:43:12] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:43:12] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:43:12] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:43:12] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:43:12] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:43:12] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:43:13] detectron2 INFO: found existing models
[07/29 21:43:13] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:43:13] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:43:13] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:43:13] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 21:43:24] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:43:24] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:43:24] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:43:24] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:43:24] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:43:24] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:43:24] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:43:24] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:43:24] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:43:24] detectron2 INFO: found existing models
[07/29 21:43:24] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:43:24] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:43:24] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:43:24] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 21:43:27] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 21:43:46] d2.utils.events INFO:  eta: 1:17:39  iter: 8719  total_loss: 0.102  loss_cls: 0.018  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  time: 0.8916  data_time: 0.0715  lr: 0.005000  max_mem: 8011M
[07/29 21:44:03] d2.utils.events INFO:  eta: 1:16:45  iter: 8739  total_loss: 0.091  loss_cls: 0.018  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  time: 0.8719  data_time: 0.0134  lr: 0.005000  max_mem: 8011M
[07/29 21:44:20] d2.utils.events INFO:  eta: 1:16:27  iter: 8759  total_loss: 0.098  loss_cls: 0.015  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8748  data_time: 0.0155  lr: 0.005000  max_mem: 8011M
[07/29 21:44:38] d2.utils.events INFO:  eta: 1:15:55  iter: 8779  total_loss: 0.109  loss_cls: 0.019  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  time: 0.8729  data_time: 0.0179  lr: 0.005000  max_mem: 8011M
[07/29 21:44:55] d2.utils.events INFO:  eta: 1:15:18  iter: 8799  total_loss: 0.098  loss_cls: 0.017  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  time: 0.8714  data_time: 0.0155  lr: 0.005000  max_mem: 8011M
[07/29 21:45:13] d2.utils.events INFO:  eta: 1:15:21  iter: 8819  total_loss: 0.112  loss_cls: 0.023  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  time: 0.8708  data_time: 0.0139  lr: 0.005000  max_mem: 8011M
[07/29 21:45:30] d2.utils.events INFO:  eta: 1:15:03  iter: 8839  total_loss: 0.114  loss_cls: 0.021  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  time: 0.8705  data_time: 0.0160  lr: 0.005000  max_mem: 8011M
[07/29 21:45:47] d2.utils.events INFO:  eta: 1:14:52  iter: 8859  total_loss: 0.121  loss_cls: 0.024  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8706  data_time: 0.0131  lr: 0.005000  max_mem: 8011M
[07/29 21:46:04] d2.utils.events INFO:  eta: 1:14:21  iter: 8879  total_loss: 0.104  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8688  data_time: 0.0158  lr: 0.005000  max_mem: 8011M
[07/29 21:46:22] d2.utils.events INFO:  eta: 1:14:18  iter: 8899  total_loss: 0.110  loss_cls: 0.020  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  time: 0.8703  data_time: 0.0134  lr: 0.005000  max_mem: 8011M
[07/29 21:46:40] d2.utils.events INFO:  eta: 1:14:07  iter: 8919  total_loss: 0.095  loss_cls: 0.016  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8713  data_time: 0.0177  lr: 0.005000  max_mem: 8011M
[07/29 21:46:57] d2.utils.events INFO:  eta: 1:13:51  iter: 8939  total_loss: 0.118  loss_cls: 0.016  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.039  time: 0.8720  data_time: 0.0154  lr: 0.005000  max_mem: 8011M
[07/29 21:47:15] d2.utils.events INFO:  eta: 1:13:37  iter: 8959  total_loss: 0.126  loss_cls: 0.021  loss_box_reg: 0.061  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  time: 0.8725  data_time: 0.0174  lr: 0.005000  max_mem: 8011M
[07/29 21:47:32] d2.utils.events INFO:  eta: 1:13:24  iter: 8979  total_loss: 0.122  loss_cls: 0.019  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.038  time: 0.8726  data_time: 0.0129  lr: 0.005000  max_mem: 8011M
[07/29 21:47:52] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 21:47:52] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:47:52] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 21:47:52] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 21:47:52] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 21:47:54] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0969 s / img. ETA=0:01:00
[07/29 21:47:59] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1009 s / img. ETA=0:00:50
[07/29 21:48:05] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1063 s / img. ETA=0:00:49
[07/29 21:48:10] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1040 s / img. ETA=0:00:42
[07/29 21:48:15] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1039 s / img. ETA=0:00:37
[07/29 21:48:20] d2.evaluation.evaluator INFO: Inference done 213/468. 0.1041 s / img. ETA=0:00:32
[07/29 21:48:25] d2.evaluation.evaluator INFO: Inference done 255/468. 0.1042 s / img. ETA=0:00:26
[07/29 21:48:30] d2.evaluation.evaluator INFO: Inference done 302/468. 0.1030 s / img. ETA=0:00:20
[07/29 21:48:35] d2.evaluation.evaluator INFO: Inference done 356/468. 0.1011 s / img. ETA=0:00:13
[07/29 21:48:40] d2.evaluation.evaluator INFO: Inference done 410/468. 0.0999 s / img. ETA=0:00:06
[07/29 21:48:45] d2.evaluation.evaluator INFO: Inference done 464/468. 0.0989 s / img. ETA=0:00:00
[07/29 21:48:45] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.808852 (0.111898 s / img per device, on 1 devices)
[07/29 21:48:45] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098832 s / img per device, on 1 devices)
[07/29 21:48:46] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 21:48:46] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 21:48:46] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 21:48:46] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.373 | 98.961 | 98.961 |  nan  | 92.972 | 94.912 |
[07/29 21:48:46] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 21:48:46] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 21:48:46] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 21:48:46] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 21:48:46] d2.evaluation.testing INFO: copypaste: 94.3725,98.9612,98.9612,nan,92.9721,94.9120
[07/29 21:48:49] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:53
[07/29 21:48:54] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 21:48:59] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 21:49:04] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 21:49:09] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 21:49:14] detectron2 INFO: Loss on Validation  done 203/468. 0.0001 s / img. ETA=0:00:34
[07/29 21:49:19] detectron2 INFO: Loss on Validation  done 241/468. 0.0001 s / img. ETA=0:00:29
[07/29 21:49:24] detectron2 INFO: Loss on Validation  done 280/468. 0.0001 s / img. ETA=0:00:24
[07/29 21:49:29] detectron2 INFO: Loss on Validation  done 330/468. 0.0001 s / img. ETA=0:00:17
[07/29 21:49:34] detectron2 INFO: Loss on Validation  done 378/468. 0.0001 s / img. ETA=0:00:11
[07/29 21:49:39] detectron2 INFO: Loss on Validation  done 424/468. 0.0001 s / img. ETA=0:00:05
[07/29 21:49:44] detectron2 INFO: mean_loss=0.12605138876466648, best_loss=0.11919471451081007
[07/29 21:49:44] detectron2 INFO: could not find a better loss with mean_loss=0.12605138876466648 best_loss=0.11919471451081007 and failed count=5.0
[07/29 21:49:44] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 21:49:44] detectron2 INFO: saving model to: model_0008999.pth, saved_model_names=model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:49:44] d2.utils.events INFO:  eta: 1:13:00  iter: 8999  total_loss: 0.104  loss_cls: 0.021  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.126  loss_failed_to_get_better_count: 0.000  time: 0.8724  data_time: 0.0166  lr: 0.005000  max_mem: 8011M
[07/29 21:50:01] d2.utils.events INFO:  eta: 1:12:43  iter: 9019  total_loss: 0.103  loss_cls: 0.023  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.126  loss_failed_to_get_better_count: 0.000  time: 0.8715  data_time: 0.0139  lr: 0.005000  max_mem: 8011M
[07/29 21:50:09] d2.engine.hooks INFO: Overall training speed: 326 iterations in 0:04:44 (0.8740 s / it)
[07/29 21:50:09] d2.engine.hooks INFO: Total training time: 0:06:39 (0:01:54 on hooks)
[07/29 21:51:36] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:51:36] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:51:36] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:51:36] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:51:36] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:51:36] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:51:36] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:51:36] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:51:36] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:52:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:52:14] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:52:14] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:52:14] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:52:14] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:52:14] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:52:14] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:52:14] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:52:14] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:54:33] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:54:33] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:54:33] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:54:33] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:54:37] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:54:37] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:54:37] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 21:54:37] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:54:37] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:54:37] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:54:37] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:54:39] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:54:39] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 21:54:39] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:54:39] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:54:39] detectron2 INFO: found existing models
[07/29 21:54:39] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:54:39] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:54:39] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:54:39] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:54:44] d2.engine.train_loop INFO: Starting training from iteration 7500
[07/29 21:54:48] d2.engine.hooks INFO: Overall training speed: 2 iterations in 0:00:02 (1.1087 s / it)
[07/29 21:54:48] d2.engine.hooks INFO: Total training time: 0:00:02 (0:00:00 on hooks)
[07/29 21:55:13] d2.engine.train_loop INFO: Starting training from iteration 7500
[07/29 21:55:13] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py", line 761, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/usr/lib/python3.6/multiprocessing/queues.py", line 113, in get
    return _ForkingPickler.loads(res)
  File "/usr/local/lib/python3.6/dist-packages/torch/multiprocessing/reductions.py", line 294, in rebuild_storage_fd
    fd = df.detach()
  File "/usr/lib/python3.6/multiprocessing/resource_sharer.py", line 57, in detach
    with _resource_sharer.get_connection(self._id) as conn:
  File "/usr/lib/python3.6/multiprocessing/resource_sharer.py", line 87, in get_connection
    c = Client(address, authkey=process.current_process().authkey)
  File "/usr/lib/python3.6/multiprocessing/connection.py", line 487, in Client
    c = SocketClient(address)
  File "/usr/lib/python3.6/multiprocessing/connection.py", line 614, in SocketClient
    s.connect(address)
FileNotFoundError: [Errno 2] No such file or directory

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 130, in train
    self.run_step()
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 210, in run_step
    data = next(self._data_loader_iter)
  File "/usr/local/lib/python3.6/dist-packages/detectron2/data/common.py", line 142, in __iter__
    for d in self.dataset:
  File "/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py", line 345, in __next__
    data = self._next_data()
  File "/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py", line 841, in _next_data
    idx, data = self._get_data()
  File "/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py", line 808, in _get_data
    success, data = self._try_get_data()
  File "/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py", line 774, in _try_get_data
    raise RuntimeError('DataLoader worker (pid(s) {}) exited unexpectedly'.format(pids_str))
RuntimeError: DataLoader worker (pid(s) 10237, 10238, 10239, 10240) exited unexpectedly
[07/29 21:55:13] d2.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[07/29 21:55:24] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:55:24] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:55:24] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:55:24] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:55:24] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:55:24] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:55:24] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:55:24] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:55:24] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:55:24] detectron2 INFO: found existing models
[07/29 21:55:24] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:55:24] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:55:24] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:55:24] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 21:55:31] d2.engine.train_loop INFO: Starting training from iteration 7500
[07/29 21:55:34] d2.engine.hooks INFO: Total training time: 0:00:00 (0:00:00 on hooks)
[07/29 21:56:15] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:56:15] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:56:15] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 21:56:15] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 21:56:20] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 21:56:20] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 21:56:21] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 21:56:21] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 21:56:21] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 21:56:21] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:56:21] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 21:56:22] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 21:56:22] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 21:56:22] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 21:56:22] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 21:56:22] detectron2 INFO: found existing models
[07/29 21:56:22] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 21:56:22] detectron2 INFO: best_loss=0.11919471451081007
[07/29 21:56:22] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 21:56:22] detectron2 INFO: saved_model_names=model_0007499.pth, model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 21:56:25] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 21:56:43] d2.utils.events INFO:  eta: 1:18:09  iter: 8719  total_loss: 0.108  loss_cls: 0.016  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  time: 0.8749  data_time: 0.0622  lr: 0.005000  max_mem: 6863M
[07/29 21:57:01] d2.utils.events INFO:  eta: 1:17:42  iter: 8739  total_loss: 0.112  loss_cls: 0.018  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  time: 0.8785  data_time: 0.0152  lr: 0.005000  max_mem: 6863M
[07/29 21:57:18] d2.utils.events INFO:  eta: 1:17:13  iter: 8759  total_loss: 0.125  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  time: 0.8727  data_time: 0.0144  lr: 0.005000  max_mem: 6864M
[07/29 21:57:35] d2.utils.events INFO:  eta: 1:16:29  iter: 8779  total_loss: 0.104  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.003  loss_rpn_loc: 0.030  time: 0.8727  data_time: 0.0138  lr: 0.005000  max_mem: 6864M
[07/29 21:57:53] d2.utils.events INFO:  eta: 1:16:27  iter: 8799  total_loss: 0.122  loss_cls: 0.020  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8725  data_time: 0.0164  lr: 0.005000  max_mem: 6864M
[07/29 21:58:10] d2.utils.events INFO:  eta: 1:15:47  iter: 8819  total_loss: 0.095  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8711  data_time: 0.0161  lr: 0.005000  max_mem: 6864M
[07/29 21:58:28] d2.utils.events INFO:  eta: 1:15:52  iter: 8839  total_loss: 0.104  loss_cls: 0.017  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8742  data_time: 0.0164  lr: 0.005000  max_mem: 6864M
[07/29 21:58:45] d2.utils.events INFO:  eta: 1:15:26  iter: 8859  total_loss: 0.103  loss_cls: 0.020  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  time: 0.8725  data_time: 0.0141  lr: 0.005000  max_mem: 6864M
[07/29 21:59:02] d2.utils.events INFO:  eta: 1:14:45  iter: 8879  total_loss: 0.096  loss_cls: 0.021  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  time: 0.8711  data_time: 0.0127  lr: 0.005000  max_mem: 6864M
[07/29 21:59:19] d2.utils.events INFO:  eta: 1:14:30  iter: 8899  total_loss: 0.090  loss_cls: 0.020  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  time: 0.8698  data_time: 0.0135  lr: 0.005000  max_mem: 6864M
[07/29 21:59:37] d2.utils.events INFO:  eta: 1:14:19  iter: 8919  total_loss: 0.101  loss_cls: 0.015  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  time: 0.8713  data_time: 0.0161  lr: 0.005000  max_mem: 6864M
[07/29 21:59:55] d2.utils.events INFO:  eta: 1:13:55  iter: 8939  total_loss: 0.102  loss_cls: 0.020  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8707  data_time: 0.0173  lr: 0.005000  max_mem: 6864M
[07/29 22:00:12] d2.utils.events INFO:  eta: 1:13:37  iter: 8959  total_loss: 0.113  loss_cls: 0.020  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8704  data_time: 0.0135  lr: 0.005000  max_mem: 6864M
[07/29 22:00:29] d2.utils.events INFO:  eta: 1:13:19  iter: 8979  total_loss: 0.104  loss_cls: 0.022  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  time: 0.8704  data_time: 0.0156  lr: 0.005000  max_mem: 6864M
[07/29 22:00:48] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 22:00:48] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:00:48] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:00:48] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:00:49] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:00:52] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1029 s / img. ETA=0:00:49
[07/29 22:00:57] d2.evaluation.evaluator INFO: Inference done 54/468. 0.1033 s / img. ETA=0:00:48
[07/29 22:01:02] d2.evaluation.evaluator INFO: Inference done 91/468. 0.1049 s / img. ETA=0:00:47
[07/29 22:01:07] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1042 s / img. ETA=0:00:42
[07/29 22:01:12] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1043 s / img. ETA=0:00:37
[07/29 22:01:17] d2.evaluation.evaluator INFO: Inference done 213/468. 0.1046 s / img. ETA=0:00:31
[07/29 22:01:22] d2.evaluation.evaluator INFO: Inference done 254/468. 0.1045 s / img. ETA=0:00:26
[07/29 22:01:27] d2.evaluation.evaluator INFO: Inference done 302/468. 0.1031 s / img. ETA=0:00:20
[07/29 22:01:32] d2.evaluation.evaluator INFO: Inference done 356/468. 0.1013 s / img. ETA=0:00:13
[07/29 22:01:37] d2.evaluation.evaluator INFO: Inference done 410/468. 0.1000 s / img. ETA=0:00:06
[07/29 22:01:42] d2.evaluation.evaluator INFO: Inference done 464/468. 0.0990 s / img. ETA=0:00:00
[07/29 22:01:43] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.782799 (0.111842 s / img per device, on 1 devices)
[07/29 22:01:43] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098929 s / img per device, on 1 devices)
[07/29 22:01:43] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:01:43] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:01:43] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:01:43] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.918 | 98.943 | 98.943 |  nan  | 92.543 | 95.916 |
[07/29 22:01:43] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:01:43] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:01:43] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:01:43] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:01:43] d2.evaluation.testing INFO: copypaste: 94.9184,98.9429,98.9429,nan,92.5434,95.9159
[07/29 22:01:46] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:47
[07/29 22:01:51] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 22:01:56] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 22:02:01] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 22:02:06] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 22:02:11] detectron2 INFO: Loss on Validation  done 201/468. 0.0001 s / img. ETA=0:00:35
[07/29 22:02:16] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 22:02:21] detectron2 INFO: Loss on Validation  done 278/468. 0.0001 s / img. ETA=0:00:25
[07/29 22:02:26] detectron2 INFO: Loss on Validation  done 325/468. 0.0001 s / img. ETA=0:00:18
[07/29 22:02:31] detectron2 INFO: Loss on Validation  done 375/468. 0.0001 s / img. ETA=0:00:11
[07/29 22:02:36] detectron2 INFO: Loss on Validation  done 423/468. 0.0001 s / img. ETA=0:00:05
[07/29 22:02:41] detectron2 INFO: mean_loss=0.12533483516909152, best_loss=0.11919471451081007
[07/29 22:02:41] detectron2 INFO: could not find a better loss with mean_loss=0.12533483516909152 best_loss=0.11919471451081007 and failed count=5.0
[07/29 22:02:41] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 22:02:41] detectron2 INFO: saving model to: model_0008999.pth, saved_model_names=model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 22:02:41] d2.utils.events INFO:  eta: 1:13:01  iter: 8999  total_loss: 0.098  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8712  data_time: 0.0128  lr: 0.005000  max_mem: 6864M
[07/29 22:02:58] d2.utils.events INFO:  eta: 1:12:30  iter: 9019  total_loss: 0.109  loss_cls: 0.017  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8693  data_time: 0.0129  lr: 0.004000  max_mem: 6864M
[07/29 22:03:15] d2.utils.events INFO:  eta: 1:12:11  iter: 9039  total_loss: 0.094  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8689  data_time: 0.0153  lr: 0.004000  max_mem: 6864M
[07/29 22:03:33] d2.utils.events INFO:  eta: 1:12:03  iter: 9059  total_loss: 0.099  loss_cls: 0.021  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0141  lr: 0.004000  max_mem: 6864M
[07/29 22:03:50] d2.utils.events INFO:  eta: 1:11:45  iter: 9079  total_loss: 0.103  loss_cls: 0.022  loss_box_reg: 0.050  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8697  data_time: 0.0147  lr: 0.004000  max_mem: 6864M
[07/29 22:04:08] d2.utils.events INFO:  eta: 1:11:28  iter: 9099  total_loss: 0.114  loss_cls: 0.017  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8696  data_time: 0.0152  lr: 0.004000  max_mem: 6864M
[07/29 22:04:26] d2.utils.events INFO:  eta: 1:11:16  iter: 9119  total_loss: 0.101  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8707  data_time: 0.0132  lr: 0.004000  max_mem: 6864M
[07/29 22:04:43] d2.utils.events INFO:  eta: 1:10:53  iter: 9139  total_loss: 0.089  loss_cls: 0.019  loss_box_reg: 0.039  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8698  data_time: 0.0147  lr: 0.004000  max_mem: 6864M
[07/29 22:05:00] d2.utils.events INFO:  eta: 1:10:39  iter: 9159  total_loss: 0.103  loss_cls: 0.021  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8704  data_time: 0.0158  lr: 0.004000  max_mem: 6864M
[07/29 22:05:18] d2.utils.events INFO:  eta: 1:10:21  iter: 9179  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8703  data_time: 0.0158  lr: 0.004000  max_mem: 6864M
[07/29 22:05:35] d2.utils.events INFO:  eta: 1:10:04  iter: 9199  total_loss: 0.098  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8707  data_time: 0.0142  lr: 0.004000  max_mem: 6864M
[07/29 22:05:53] d2.utils.events INFO:  eta: 1:09:45  iter: 9219  total_loss: 0.092  loss_cls: 0.018  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8705  data_time: 0.0165  lr: 0.004000  max_mem: 6864M
[07/29 22:06:10] d2.utils.events INFO:  eta: 1:09:26  iter: 9239  total_loss: 0.111  loss_cls: 0.021  loss_box_reg: 0.052  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8706  data_time: 0.0158  lr: 0.004000  max_mem: 6864M
[07/29 22:06:27] d2.utils.events INFO:  eta: 1:09:07  iter: 9259  total_loss: 0.100  loss_cls: 0.023  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8703  data_time: 0.0124  lr: 0.004000  max_mem: 6864M
[07/29 22:06:45] d2.utils.events INFO:  eta: 1:08:48  iter: 9279  total_loss: 0.109  loss_cls: 0.019  loss_box_reg: 0.063  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.125  loss_failed_to_get_better_count: 0.000  time: 0.8702  data_time: 0.0145  lr: 0.004000  max_mem: 6864M
[07/29 22:07:04] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:07:04] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:07:04] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:07:04] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:07:07] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1005 s / img. ETA=0:00:46
[07/29 22:07:12] d2.evaluation.evaluator INFO: Inference done 48/468. 0.1031 s / img. ETA=0:00:54
[07/29 22:07:17] d2.evaluation.evaluator INFO: Inference done 87/468. 0.1058 s / img. ETA=0:00:49
[07/29 22:07:22] d2.evaluation.evaluator INFO: Inference done 129/468. 0.1041 s / img. ETA=0:00:42
[07/29 22:07:27] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1036 s / img. ETA=0:00:37
[07/29 22:07:32] d2.evaluation.evaluator INFO: Inference done 209/468. 0.1039 s / img. ETA=0:00:32
[07/29 22:07:37] d2.evaluation.evaluator INFO: Inference done 251/468. 0.1037 s / img. ETA=0:00:27
[07/29 22:07:42] d2.evaluation.evaluator INFO: Inference done 300/468. 0.1027 s / img. ETA=0:00:20
[07/29 22:07:47] d2.evaluation.evaluator INFO: Inference done 354/468. 0.1009 s / img. ETA=0:00:13
[07/29 22:07:52] d2.evaluation.evaluator INFO: Inference done 408/468. 0.0996 s / img. ETA=0:00:06
[07/29 22:07:57] d2.evaluation.evaluator INFO: Inference done 460/468. 0.0991 s / img. ETA=0:00:00
[07/29 22:07:58] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.898513 (0.112092 s / img per device, on 1 devices)
[07/29 22:07:58] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098958 s / img per device, on 1 devices)
[07/29 22:07:58] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:07:58] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:07:58] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:07:58] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.905 | 98.945 | 98.945 |  nan  | 93.036 | 96.978 |
[07/29 22:07:58] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:07:58] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:07:58] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:07:58] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:07:58] d2.evaluation.testing INFO: copypaste: 95.9051,98.9452,98.9452,nan,93.0361,96.9783
[07/29 22:08:01] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:55
[07/29 22:08:06] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 22:08:11] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 22:08:16] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 22:08:21] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 22:08:26] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 22:08:31] detectron2 INFO: Loss on Validation  done 242/468. 0.0001 s / img. ETA=0:00:29
[07/29 22:08:36] detectron2 INFO: Loss on Validation  done 281/468. 0.0001 s / img. ETA=0:00:24
[07/29 22:08:41] detectron2 INFO: Loss on Validation  done 329/468. 0.0001 s / img. ETA=0:00:17
[07/29 22:08:46] detectron2 INFO: Loss on Validation  done 378/468. 0.0001 s / img. ETA=0:00:11
[07/29 22:08:52] detectron2 INFO: Loss on Validation  done 426/468. 0.0001 s / img. ETA=0:00:05
[07/29 22:08:56] detectron2 INFO: mean_loss=0.11923820744458849, best_loss=0.11919471451081007
[07/29 22:08:56] detectron2 INFO: could not find a better loss with mean_loss=0.11923820744458849 best_loss=0.11919471451081007 and failed count=1
[07/29 22:08:56] detectron2 INFO: saving model to: model_0009299.pth, saved_model_names=model_0007799.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth, model_0009299.pth
[07/29 22:08:56] detectron2 INFO: exeeded model save threshold - removing model_0007799.pth
[07/29 22:08:56] detectron2 INFO: saved_model_names=model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth, model_0009299.pth
[07/29 22:08:56] d2.utils.events INFO:  eta: 1:08:32  iter: 9299  total_loss: 0.121  loss_cls: 0.020  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.122  loss_failed_to_get_better_count: 0.500  time: 0.8703  data_time: 0.0170  lr: 0.004000  max_mem: 6864M
[07/29 22:09:13] d2.utils.events INFO:  eta: 1:08:10  iter: 9319  total_loss: 0.101  loss_cls: 0.018  loss_box_reg: 0.050  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.122  loss_failed_to_get_better_count: 0.500  time: 0.8699  data_time: 0.0140  lr: 0.004000  max_mem: 6864M
[07/29 22:09:30] d2.utils.events INFO:  eta: 1:07:55  iter: 9339  total_loss: 0.097  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.122  loss_failed_to_get_better_count: 0.500  time: 0.8693  data_time: 0.0150  lr: 0.004000  max_mem: 6864M
[07/29 22:09:48] d2.utils.events INFO:  eta: 1:07:40  iter: 9359  total_loss: 0.091  loss_cls: 0.017  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.122  loss_failed_to_get_better_count: 0.500  time: 0.8693  data_time: 0.0151  lr: 0.004000  max_mem: 6864M
[07/29 22:09:53] d2.engine.hooks INFO: Overall training speed: 663 iterations in 0:09:36 (0.8700 s / it)
[07/29 22:09:53] d2.engine.hooks INFO: Total training time: 0:13:25 (0:03:48 on hooks)
[07/29 22:19:38] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 22:19:38] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 22:19:38] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/29 22:19:38] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/29 22:19:44] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/29 22:19:44] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/29 22:19:44] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/29 22:19:44] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/29 22:19:44] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/29 22:19:44] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 22:19:44] d2.data.build INFO: Using training sampler TrainingSampler
[07/29 22:19:46] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/29 22:19:46] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/29 22:19:46] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:19:46] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/29 22:19:46] detectron2 INFO: found existing models
[07/29 22:19:46] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551
[07/29 22:19:46] detectron2 INFO: best_loss=0.11919471451081007
[07/29 22:19:46] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/29 22:19:46] detectron2 INFO: saved_model_names=model_0007499.pth, model_0008099.pth, model_0008399.pth, model_0008699.pth
[07/29 22:19:55] d2.engine.train_loop INFO: Starting training from iteration 8700
[07/29 22:20:13] d2.utils.events INFO:  eta: 1:15:41  iter: 8719  total_loss: 0.119  loss_cls: 0.021  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8617  data_time: 0.0615  lr: 0.005000  max_mem: 6856M
[07/29 22:20:31] d2.utils.events INFO:  eta: 1:16:09  iter: 8739  total_loss: 0.104  loss_cls: 0.020  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8731  data_time: 0.0142  lr: 0.005000  max_mem: 6856M
[07/29 22:20:48] d2.utils.events INFO:  eta: 1:15:35  iter: 8759  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  time: 0.8676  data_time: 0.0168  lr: 0.005000  max_mem: 6856M
[07/29 22:21:05] d2.utils.events INFO:  eta: 1:15:45  iter: 8779  total_loss: 0.101  loss_cls: 0.020  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  time: 0.8677  data_time: 0.0133  lr: 0.005000  max_mem: 6856M
[07/29 22:21:22] d2.utils.events INFO:  eta: 1:15:00  iter: 8799  total_loss: 0.117  loss_cls: 0.023  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  time: 0.8611  data_time: 0.0141  lr: 0.005000  max_mem: 6856M
[07/29 22:21:40] d2.utils.events INFO:  eta: 1:15:05  iter: 8819  total_loss: 0.106  loss_cls: 0.016  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  time: 0.8659  data_time: 0.0139  lr: 0.005000  max_mem: 6856M
[07/29 22:21:57] d2.utils.events INFO:  eta: 1:14:53  iter: 8839  total_loss: 0.086  loss_cls: 0.017  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  time: 0.8662  data_time: 0.0139  lr: 0.005000  max_mem: 6856M
[07/29 22:22:14] d2.utils.events INFO:  eta: 1:14:06  iter: 8859  total_loss: 0.114  loss_cls: 0.018  loss_box_reg: 0.062  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  time: 0.8622  data_time: 0.0145  lr: 0.005000  max_mem: 6856M
[07/29 22:22:31] d2.utils.events INFO:  eta: 1:13:36  iter: 8879  total_loss: 0.104  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8608  data_time: 0.0154  lr: 0.005000  max_mem: 6856M
[07/29 22:22:49] d2.utils.events INFO:  eta: 1:13:34  iter: 8899  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  time: 0.8624  data_time: 0.0165  lr: 0.005000  max_mem: 6856M
[07/29 22:23:06] d2.utils.events INFO:  eta: 1:13:12  iter: 8919  total_loss: 0.111  loss_cls: 0.020  loss_box_reg: 0.061  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  time: 0.8611  data_time: 0.0170  lr: 0.005000  max_mem: 6856M
[07/29 22:23:23] d2.utils.events INFO:  eta: 1:12:57  iter: 8939  total_loss: 0.084  loss_cls: 0.016  loss_box_reg: 0.039  loss_rpn_cls: 0.001  loss_rpn_loc: 0.019  time: 0.8605  data_time: 0.0150  lr: 0.005000  max_mem: 6856M
[07/29 22:23:40] d2.utils.events INFO:  eta: 1:12:32  iter: 8959  total_loss: 0.085  loss_cls: 0.015  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  time: 0.8605  data_time: 0.0138  lr: 0.005000  max_mem: 6856M
[07/29 22:23:57] d2.utils.events INFO:  eta: 1:12:15  iter: 8979  total_loss: 0.104  loss_cls: 0.018  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  time: 0.8602  data_time: 0.0163  lr: 0.005000  max_mem: 6856M
[07/29 22:24:16] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10616        |
|               |              |[0m
[07/29 22:24:16] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:24:16] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:24:16] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:24:16] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:24:19] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0962 s / img. ETA=0:00:59
[07/29 22:24:24] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1055 s / img. ETA=0:00:51
[07/29 22:24:29] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1048 s / img. ETA=0:00:48
[07/29 22:24:34] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1034 s / img. ETA=0:00:42
[07/29 22:24:39] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1031 s / img. ETA=0:00:37
[07/29 22:24:44] d2.evaluation.evaluator INFO: Inference done 212/468. 0.1033 s / img. ETA=0:00:32
[07/29 22:24:49] d2.evaluation.evaluator INFO: Inference done 253/468. 0.1033 s / img. ETA=0:00:27
[07/29 22:24:54] d2.evaluation.evaluator INFO: Inference done 300/468. 0.1021 s / img. ETA=0:00:20
[07/29 22:24:59] d2.evaluation.evaluator INFO: Inference done 354/468. 0.1005 s / img. ETA=0:00:13
[07/29 22:25:04] d2.evaluation.evaluator INFO: Inference done 408/468. 0.0993 s / img. ETA=0:00:06
[07/29 22:25:09] d2.evaluation.evaluator INFO: Inference done 462/468. 0.0983 s / img. ETA=0:00:00
[07/29 22:25:10] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.062433 (0.112446 s / img per device, on 1 devices)
[07/29 22:25:10] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098248 s / img per device, on 1 devices)
[07/29 22:25:10] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:25:10] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:25:10] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:25:10] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.479 | 98.937 | 98.937 |  nan  | 92.979 | 96.496 |
[07/29 22:25:10] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:25:10] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:25:10] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:25:10] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:25:10] d2.evaluation.testing INFO: copypaste: 95.4790,98.9370,98.9370,nan,92.9795,96.4960
[07/29 22:25:13] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:53
[07/29 22:25:18] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:55
[07/29 22:25:23] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 22:25:28] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 22:25:33] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 22:25:38] detectron2 INFO: Loss on Validation  done 203/468. 0.0001 s / img. ETA=0:00:34
[07/29 22:25:43] detectron2 INFO: Loss on Validation  done 241/468. 0.0001 s / img. ETA=0:00:29
[07/29 22:25:48] detectron2 INFO: Loss on Validation  done 281/468. 0.0001 s / img. ETA=0:00:24
[07/29 22:25:53] detectron2 INFO: Loss on Validation  done 330/468. 0.0001 s / img. ETA=0:00:17
[07/29 22:25:58] detectron2 INFO: Loss on Validation  done 378/468. 0.0001 s / img. ETA=0:00:11
[07/29 22:26:03] detectron2 INFO: Loss on Validation  done 427/468. 0.0001 s / img. ETA=0:00:04
[07/29 22:26:08] detectron2 INFO: mean_loss=0.12132162462351004, best_loss=0.11919471451081007
[07/29 22:26:08] detectron2 INFO: could not find a better loss with mean_loss=0.12132162462351004 best_loss=0.11919471451081007 and failed count=5.0
[07/29 22:26:08] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 22:26:08] detectron2 INFO: removing the best model from _saved_model_names so that it wont get deleted: model_0007499.pth
[07/29 22:26:08] detectron2 INFO: best models so far: {'model_0007499.pth': 0.11919471451081007}
[07/29 22:26:08] detectron2 INFO: saving model to: model_0008999.pth, saved_model_names=model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth
[07/29 22:26:08] d2.utils.events INFO:  eta: 1:11:54  iter: 8999  total_loss: 0.096  loss_cls: 0.016  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8600  data_time: 0.0128  lr: 0.005000  max_mem: 6856M
[07/29 22:26:25] d2.utils.events INFO:  eta: 1:11:41  iter: 9019  total_loss: 0.104  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.036  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8605  data_time: 0.0153  lr: 0.004000  max_mem: 6856M
[07/29 22:26:43] d2.utils.events INFO:  eta: 1:11:28  iter: 9039  total_loss: 0.095  loss_cls: 0.018  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8613  data_time: 0.0198  lr: 0.004000  max_mem: 6856M
[07/29 22:27:00] d2.utils.events INFO:  eta: 1:11:13  iter: 9059  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8620  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 22:27:17] d2.utils.events INFO:  eta: 1:10:55  iter: 9079  total_loss: 0.109  loss_cls: 0.020  loss_box_reg: 0.050  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8613  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 22:27:34] d2.utils.events INFO:  eta: 1:10:39  iter: 9099  total_loss: 0.117  loss_cls: 0.019  loss_box_reg: 0.062  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8616  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 22:27:52] d2.utils.events INFO:  eta: 1:10:25  iter: 9119  total_loss: 0.112  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8621  data_time: 0.0150  lr: 0.004000  max_mem: 6856M
[07/29 22:28:09] d2.utils.events INFO:  eta: 1:10:05  iter: 9139  total_loss: 0.117  loss_cls: 0.020  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8617  data_time: 0.0183  lr: 0.004000  max_mem: 6856M
[07/29 22:28:26] d2.utils.events INFO:  eta: 1:09:49  iter: 9159  total_loss: 0.111  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8617  data_time: 0.0156  lr: 0.004000  max_mem: 6856M
[07/29 22:28:44] d2.utils.events INFO:  eta: 1:09:34  iter: 9179  total_loss: 0.103  loss_cls: 0.020  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8619  data_time: 0.0139  lr: 0.004000  max_mem: 6856M
[07/29 22:29:01] d2.utils.events INFO:  eta: 1:09:15  iter: 9199  total_loss: 0.107  loss_cls: 0.019  loss_box_reg: 0.057  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8616  data_time: 0.0167  lr: 0.004000  max_mem: 6856M
[07/29 22:29:18] d2.utils.events INFO:  eta: 1:08:59  iter: 9219  total_loss: 0.094  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8619  data_time: 0.0160  lr: 0.004000  max_mem: 6856M
[07/29 22:29:36] d2.utils.events INFO:  eta: 1:08:46  iter: 9239  total_loss: 0.095  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8627  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 22:29:53] d2.utils.events INFO:  eta: 1:08:28  iter: 9259  total_loss: 0.096  loss_cls: 0.020  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8625  data_time: 0.0156  lr: 0.004000  max_mem: 6856M
[07/29 22:30:10] d2.utils.events INFO:  eta: 1:08:06  iter: 9279  total_loss: 0.093  loss_cls: 0.016  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.121  loss_failed_to_get_better_count: 0.000  time: 0.8615  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 22:30:29] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:30:29] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:30:29] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:30:29] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:30:32] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1072 s / img. ETA=0:00:54
[07/29 22:30:37] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1038 s / img. ETA=0:00:50
[07/29 22:30:42] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1070 s / img. ETA=0:00:48
[07/29 22:30:47] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1053 s / img. ETA=0:00:42
[07/29 22:30:52] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1050 s / img. ETA=0:00:37
[07/29 22:30:57] d2.evaluation.evaluator INFO: Inference done 213/468. 0.1053 s / img. ETA=0:00:32
[07/29 22:31:02] d2.evaluation.evaluator INFO: Inference done 255/468. 0.1046 s / img. ETA=0:00:26
[07/29 22:31:07] d2.evaluation.evaluator INFO: Inference done 304/468. 0.1031 s / img. ETA=0:00:19
[07/29 22:31:13] d2.evaluation.evaluator INFO: Inference done 359/468. 0.1011 s / img. ETA=0:00:12
[07/29 22:31:18] d2.evaluation.evaluator INFO: Inference done 414/468. 0.0997 s / img. ETA=0:00:06
[07/29 22:31:23] d2.evaluation.evaluator INFO: Inference done 466/468. 0.0993 s / img. ETA=0:00:00
[07/29 22:31:23] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.831357 (0.111947 s / img per device, on 1 devices)
[07/29 22:31:23] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.099214 s / img per device, on 1 devices)
[07/29 22:31:23] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:31:23] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:31:23] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:31:23] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.411 | 98.925 | 98.925 |  nan  | 92.983 | 96.330 |
[07/29 22:31:23] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:31:23] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:31:23] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:31:23] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:31:23] d2.evaluation.testing INFO: copypaste: 95.4113,98.9247,98.9247,nan,92.9825,96.3295
[07/29 22:31:26] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 22:31:31] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 22:31:36] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 22:31:41] detectron2 INFO: Loss on Validation  done 128/468. 0.0001 s / img. ETA=0:00:43
[07/29 22:31:46] detectron2 INFO: Loss on Validation  done 167/468. 0.0001 s / img. ETA=0:00:38
[07/29 22:31:51] detectron2 INFO: Loss on Validation  done 205/468. 0.0001 s / img. ETA=0:00:34
[07/29 22:31:56] detectron2 INFO: Loss on Validation  done 244/468. 0.0001 s / img. ETA=0:00:29
[07/29 22:32:01] detectron2 INFO: Loss on Validation  done 286/468. 0.0001 s / img. ETA=0:00:23
[07/29 22:32:06] detectron2 INFO: Loss on Validation  done 336/468. 0.0001 s / img. ETA=0:00:16
[07/29 22:32:11] detectron2 INFO: Loss on Validation  done 383/468. 0.0001 s / img. ETA=0:00:10
[07/29 22:32:16] detectron2 INFO: Loss on Validation  done 433/468. 0.0001 s / img. ETA=0:00:04
[07/29 22:32:20] detectron2 INFO: mean_loss=0.11474820644582451, best_loss=0.11919471451081007
[07/29 22:32:20] detectron2 INFO: could not find a better loss with mean_loss=0.11474820644582451 best_loss=0.11919471451081007 and failed count=1
[07/29 22:32:20] detectron2 INFO: saving model to: model_0009299.pth, saved_model_names=model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth, model_0009299.pth
[07/29 22:32:20] d2.utils.events INFO:  eta: 1:07:54  iter: 9299  total_loss: 0.086  loss_cls: 0.016  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8625  data_time: 0.0144  lr: 0.004000  max_mem: 6856M
[07/29 22:32:37] d2.utils.events INFO:  eta: 1:07:36  iter: 9319  total_loss: 0.102  loss_cls: 0.020  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8621  data_time: 0.0127  lr: 0.004000  max_mem: 6856M
[07/29 22:32:55] d2.utils.events INFO:  eta: 1:07:19  iter: 9339  total_loss: 0.108  loss_cls: 0.016  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8624  data_time: 0.0133  lr: 0.004000  max_mem: 6856M
[07/29 22:33:12] d2.utils.events INFO:  eta: 1:07:02  iter: 9359  total_loss: 0.129  loss_cls: 0.022  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8622  data_time: 0.0168  lr: 0.004000  max_mem: 6856M
[07/29 22:33:29] d2.utils.events INFO:  eta: 1:06:45  iter: 9379  total_loss: 0.105  loss_cls: 0.022  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8625  data_time: 0.0144  lr: 0.004000  max_mem: 6856M
[07/29 22:33:47] d2.utils.events INFO:  eta: 1:06:28  iter: 9399  total_loss: 0.085  loss_cls: 0.016  loss_box_reg: 0.041  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8627  data_time: 0.0164  lr: 0.004000  max_mem: 6856M
[07/29 22:34:04] d2.utils.events INFO:  eta: 1:06:16  iter: 9419  total_loss: 0.094  loss_cls: 0.016  loss_box_reg: 0.040  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8633  data_time: 0.0171  lr: 0.004000  max_mem: 6856M
[07/29 22:34:22] d2.utils.events INFO:  eta: 1:05:58  iter: 9439  total_loss: 0.103  loss_cls: 0.016  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8633  data_time: 0.0128  lr: 0.004000  max_mem: 6856M
[07/29 22:34:39] d2.utils.events INFO:  eta: 1:05:41  iter: 9459  total_loss: 0.120  loss_cls: 0.017  loss_box_reg: 0.064  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8631  data_time: 0.0147  lr: 0.004000  max_mem: 6856M
[07/29 22:34:56] d2.utils.events INFO:  eta: 1:05:25  iter: 9479  total_loss: 0.094  loss_cls: 0.020  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8634  data_time: 0.0134  lr: 0.004000  max_mem: 6856M
[07/29 22:35:13] d2.utils.events INFO:  eta: 1:05:06  iter: 9499  total_loss: 0.103  loss_cls: 0.016  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8632  data_time: 0.0135  lr: 0.004000  max_mem: 6856M
[07/29 22:35:31] d2.utils.events INFO:  eta: 1:04:51  iter: 9519  total_loss: 0.094  loss_cls: 0.015  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8634  data_time: 0.0178  lr: 0.004000  max_mem: 6856M
[07/29 22:35:48] d2.utils.events INFO:  eta: 1:04:32  iter: 9539  total_loss: 0.118  loss_cls: 0.019  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8634  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 22:36:05] d2.utils.events INFO:  eta: 1:04:18  iter: 9559  total_loss: 0.087  loss_cls: 0.016  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8635  data_time: 0.0149  lr: 0.004000  max_mem: 6856M
[07/29 22:36:23] d2.utils.events INFO:  eta: 1:04:03  iter: 9579  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.118  loss_failed_to_get_better_count: 0.500  time: 0.8637  data_time: 0.0158  lr: 0.004000  max_mem: 6856M
[07/29 22:36:43] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:36:43] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:36:43] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:36:43] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:36:45] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1035 s / img. ETA=0:00:58
[07/29 22:36:50] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1020 s / img. ETA=0:00:50
[07/29 22:36:55] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1042 s / img. ETA=0:00:49
[07/29 22:37:00] d2.evaluation.evaluator INFO: Inference done 131/468. 0.1028 s / img. ETA=0:00:42
[07/29 22:37:05] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1023 s / img. ETA=0:00:36
[07/29 22:37:10] d2.evaluation.evaluator INFO: Inference done 215/468. 0.1031 s / img. ETA=0:00:31
[07/29 22:37:16] d2.evaluation.evaluator INFO: Inference done 257/468. 0.1027 s / img. ETA=0:00:25
[07/29 22:37:21] d2.evaluation.evaluator INFO: Inference done 305/468. 0.1015 s / img. ETA=0:00:19
[07/29 22:37:26] d2.evaluation.evaluator INFO: Inference done 359/468. 0.0998 s / img. ETA=0:00:12
[07/29 22:37:31] d2.evaluation.evaluator INFO: Inference done 414/468. 0.0986 s / img. ETA=0:00:06
[07/29 22:37:36] d2.evaluation.evaluator INFO: Inference done 468/468. 0.0978 s / img. ETA=0:00:00
[07/29 22:37:36] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.290550 (0.110779 s / img per device, on 1 devices)
[07/29 22:37:36] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097787 s / img per device, on 1 devices)
[07/29 22:37:36] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:37:36] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:37:36] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:37:36] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.087 | 98.935 | 98.935 |  nan  | 92.018 | 96.088 |
[07/29 22:37:36] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:37:36] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:37:36] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:37:36] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:37:36] d2.evaluation.testing INFO: copypaste: 95.0868,98.9355,98.9355,nan,92.0184,96.0876
[07/29 22:37:39] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 22:37:44] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 22:37:49] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 22:37:54] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 22:37:59] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 22:38:04] detectron2 INFO: Loss on Validation  done 206/468. 0.0001 s / img. ETA=0:00:33
[07/29 22:38:09] detectron2 INFO: Loss on Validation  done 245/468. 0.0001 s / img. ETA=0:00:28
[07/29 22:38:14] detectron2 INFO: Loss on Validation  done 287/468. 0.0001 s / img. ETA=0:00:23
[07/29 22:38:19] detectron2 INFO: Loss on Validation  done 336/468. 0.0001 s / img. ETA=0:00:16
[07/29 22:38:24] detectron2 INFO: Loss on Validation  done 383/468. 0.0001 s / img. ETA=0:00:10
[07/29 22:38:29] detectron2 INFO: Loss on Validation  done 433/468. 0.0001 s / img. ETA=0:00:04
[07/29 22:38:33] detectron2 INFO: mean_loss=0.13089414335682187, best_loss=0.11919471451081007
[07/29 22:38:33] detectron2 INFO: could not find a better loss with mean_loss=0.13089414335682187 best_loss=0.11919471451081007 and failed count=2
[07/29 22:38:33] detectron2 INFO: saving model to: model_0009599.pth, saved_model_names=model_0008099.pth, model_0008399.pth, model_0008699.pth, model_0008999.pth, model_0009299.pth, model_0009599.pth
[07/29 22:38:33] detectron2 INFO: exeeded model save threshold - removing model_0008099.pth
[07/29 22:38:33] detectron2 INFO: saved_model_names=model_0008399.pth, model_0008699.pth, model_0008999.pth, model_0009299.pth, model_0009599.pth
[07/29 22:38:33] d2.utils.events INFO:  eta: 1:03:40  iter: 9599  total_loss: 0.118  loss_cls: 0.021  loss_box_reg: 0.066  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8632  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 22:38:50] d2.utils.events INFO:  eta: 1:03:22  iter: 9619  total_loss: 0.111  loss_cls: 0.018  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8630  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 22:39:08] d2.utils.events INFO:  eta: 1:03:06  iter: 9639  total_loss: 0.101  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8633  data_time: 0.0162  lr: 0.004000  max_mem: 6856M
[07/29 22:39:25] d2.utils.events INFO:  eta: 1:02:51  iter: 9659  total_loss: 0.092  loss_cls: 0.017  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 22:39:42] d2.utils.events INFO:  eta: 1:02:35  iter: 9679  total_loss: 0.080  loss_cls: 0.014  loss_box_reg: 0.039  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 22:40:00] d2.utils.events INFO:  eta: 1:02:17  iter: 9699  total_loss: 0.109  loss_cls: 0.019  loss_box_reg: 0.057  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8633  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 22:40:17] d2.utils.events INFO:  eta: 1:01:59  iter: 9719  total_loss: 0.098  loss_cls: 0.020  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8631  data_time: 0.0173  lr: 0.004000  max_mem: 6856M
[07/29 22:40:34] d2.utils.events INFO:  eta: 1:01:42  iter: 9739  total_loss: 0.087  loss_cls: 0.018  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8634  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 22:40:51] d2.utils.events INFO:  eta: 1:01:23  iter: 9759  total_loss: 0.113  loss_cls: 0.016  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8629  data_time: 0.0157  lr: 0.004000  max_mem: 6856M
[07/29 22:41:08] d2.utils.events INFO:  eta: 1:01:05  iter: 9779  total_loss: 0.092  loss_cls: 0.019  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8631  data_time: 0.0160  lr: 0.004000  max_mem: 6856M
[07/29 22:41:26] d2.utils.events INFO:  eta: 1:00:50  iter: 9799  total_loss: 0.092  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8632  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 22:41:43] d2.utils.events INFO:  eta: 1:00:32  iter: 9819  total_loss: 0.106  loss_cls: 0.016  loss_box_reg: 0.051  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8633  data_time: 0.0159  lr: 0.004000  max_mem: 6856M
[07/29 22:42:00] d2.utils.events INFO:  eta: 1:00:14  iter: 9839  total_loss: 0.110  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8632  data_time: 0.0137  lr: 0.004000  max_mem: 6856M
[07/29 22:42:18] d2.utils.events INFO:  eta: 0:59:58  iter: 9859  total_loss: 0.112  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8632  data_time: 0.0148  lr: 0.004000  max_mem: 6856M
[07/29 22:42:35] d2.utils.events INFO:  eta: 0:59:45  iter: 9879  total_loss: 0.122  loss_cls: 0.023  loss_box_reg: 0.056  loss_rpn_cls: 0.002  loss_rpn_loc: 0.032  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8632  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 22:42:54] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:42:54] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:42:54] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:42:54] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:42:57] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1000 s / img. ETA=0:00:51
[07/29 22:43:02] d2.evaluation.evaluator INFO: Inference done 54/468. 0.1040 s / img. ETA=0:00:48
[07/29 22:43:07] d2.evaluation.evaluator INFO: Inference done 93/468. 0.1039 s / img. ETA=0:00:46
[07/29 22:43:12] d2.evaluation.evaluator INFO: Inference done 136/468. 0.1035 s / img. ETA=0:00:40
[07/29 22:43:17] d2.evaluation.evaluator INFO: Inference done 179/468. 0.1035 s / img. ETA=0:00:35
[07/29 22:43:23] d2.evaluation.evaluator INFO: Inference done 221/468. 0.1040 s / img. ETA=0:00:29
[07/29 22:43:28] d2.evaluation.evaluator INFO: Inference done 264/468. 0.1035 s / img. ETA=0:00:24
[07/29 22:43:33] d2.evaluation.evaluator INFO: Inference done 313/468. 0.1026 s / img. ETA=0:00:18
[07/29 22:43:38] d2.evaluation.evaluator INFO: Inference done 368/468. 0.1008 s / img. ETA=0:00:11
[07/29 22:43:43] d2.evaluation.evaluator INFO: Inference done 422/468. 0.0995 s / img. ETA=0:00:05
[07/29 22:43:47] d2.evaluation.evaluator INFO: Total inference time: 0:00:50.848769 (0.109825 s / img per device, on 1 devices)
[07/29 22:43:47] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098727 s / img per device, on 1 devices)
[07/29 22:43:47] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:43:47] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:43:47] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:43:48] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.907 | 98.944 | 98.944 |  nan  | 93.346 | 96.896 |
[07/29 22:43:48] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:43:48] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:43:48] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:43:48] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:43:48] d2.evaluation.testing INFO: copypaste: 95.9068,98.9445,98.9445,nan,93.3464,96.8963
[07/29 22:43:50] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 22:43:55] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 22:44:00] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 22:44:05] detectron2 INFO: Loss on Validation  done 128/468. 0.0001 s / img. ETA=0:00:43
[07/29 22:44:10] detectron2 INFO: Loss on Validation  done 167/468. 0.0001 s / img. ETA=0:00:38
[07/29 22:44:15] detectron2 INFO: Loss on Validation  done 206/468. 0.0001 s / img. ETA=0:00:33
[07/29 22:44:20] detectron2 INFO: Loss on Validation  done 244/468. 0.0001 s / img. ETA=0:00:29
[07/29 22:44:25] detectron2 INFO: Loss on Validation  done 286/468. 0.0001 s / img. ETA=0:00:23
[07/29 22:44:30] detectron2 INFO: Loss on Validation  done 335/468. 0.0001 s / img. ETA=0:00:16
[07/29 22:44:35] detectron2 INFO: Loss on Validation  done 383/468. 0.0001 s / img. ETA=0:00:10
[07/29 22:44:41] detectron2 INFO: Loss on Validation  done 433/468. 0.0001 s / img. ETA=0:00:04
[07/29 22:44:44] detectron2 INFO: mean_loss=0.11490266958576985, best_loss=0.11919471451081007
[07/29 22:44:44] detectron2 INFO: could not find a better loss with mean_loss=0.11490266958576985 best_loss=0.11919471451081007 and failed count=3
[07/29 22:44:44] detectron2 INFO: saving model to: model_0009899.pth, saved_model_names=model_0008399.pth, model_0008699.pth, model_0008999.pth, model_0009299.pth, model_0009599.pth, model_0009899.pth
[07/29 22:44:44] detectron2 INFO: exeeded model save threshold - removing model_0008399.pth
[07/29 22:44:44] detectron2 INFO: saved_model_names=model_0008699.pth, model_0008999.pth, model_0009299.pth, model_0009599.pth, model_0009899.pth
[07/29 22:44:44] d2.utils.events INFO:  eta: 0:59:27  iter: 9899  total_loss: 0.102  loss_cls: 0.018  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8635  data_time: 0.0169  lr: 0.004000  max_mem: 6856M
[07/29 22:45:02] d2.utils.events INFO:  eta: 0:59:14  iter: 9919  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0144  lr: 0.004000  max_mem: 6856M
[07/29 22:45:19] d2.utils.events INFO:  eta: 0:58:53  iter: 9939  total_loss: 0.102  loss_cls: 0.017  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8637  data_time: 0.0158  lr: 0.004000  max_mem: 6856M
[07/29 22:45:36] d2.utils.events INFO:  eta: 0:58:38  iter: 9959  total_loss: 0.095  loss_cls: 0.017  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0131  lr: 0.004000  max_mem: 6856M
[07/29 22:45:53] d2.utils.events INFO:  eta: 0:58:18  iter: 9979  total_loss: 0.122  loss_cls: 0.020  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8635  data_time: 0.0137  lr: 0.004000  max_mem: 6856M
[07/29 22:46:11] d2.utils.events INFO:  eta: 0:58:04  iter: 9999  total_loss: 0.101  loss_cls: 0.019  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0151  lr: 0.004000  max_mem: 6856M
[07/29 22:46:28] d2.utils.events INFO:  eta: 0:57:48  iter: 10019  total_loss: 0.097  loss_cls: 0.018  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8637  data_time: 0.0179  lr: 0.004000  max_mem: 6856M
[07/29 22:46:46] d2.utils.events INFO:  eta: 0:57:30  iter: 10039  total_loss: 0.094  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8638  data_time: 0.0154  lr: 0.004000  max_mem: 6856M
[07/29 22:47:03] d2.utils.events INFO:  eta: 0:57:09  iter: 10059  total_loss: 0.096  loss_cls: 0.016  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 22:47:20] d2.utils.events INFO:  eta: 0:56:55  iter: 10079  total_loss: 0.103  loss_cls: 0.020  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0171  lr: 0.004000  max_mem: 6856M
[07/29 22:47:38] d2.utils.events INFO:  eta: 0:56:37  iter: 10099  total_loss: 0.098  loss_cls: 0.019  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8638  data_time: 0.0153  lr: 0.004000  max_mem: 6856M
[07/29 22:47:55] d2.utils.events INFO:  eta: 0:56:18  iter: 10119  total_loss: 0.106  loss_cls: 0.019  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8638  data_time: 0.0148  lr: 0.004000  max_mem: 6856M
[07/29 22:48:12] d2.utils.events INFO:  eta: 0:56:03  iter: 10139  total_loss: 0.097  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 22:48:30] d2.utils.events INFO:  eta: 0:55:45  iter: 10159  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0169  lr: 0.004000  max_mem: 6856M
[07/29 22:48:47] d2.utils.events INFO:  eta: 0:55:25  iter: 10179  total_loss: 0.087  loss_cls: 0.016  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0153  lr: 0.004000  max_mem: 6856M
[07/29 22:49:06] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:49:06] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:49:06] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:49:06] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:49:09] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1044 s / img. ETA=0:00:58
[07/29 22:49:14] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1049 s / img. ETA=0:00:51
[07/29 22:49:19] d2.evaluation.evaluator INFO: Inference done 91/468. 0.1044 s / img. ETA=0:00:48
[07/29 22:49:24] d2.evaluation.evaluator INFO: Inference done 133/468. 0.1031 s / img. ETA=0:00:41
[07/29 22:49:29] d2.evaluation.evaluator INFO: Inference done 174/468. 0.1038 s / img. ETA=0:00:36
[07/29 22:49:34] d2.evaluation.evaluator INFO: Inference done 214/468. 0.1042 s / img. ETA=0:00:31
[07/29 22:49:39] d2.evaluation.evaluator INFO: Inference done 257/468. 0.1038 s / img. ETA=0:00:26
[07/29 22:49:44] d2.evaluation.evaluator INFO: Inference done 303/468. 0.1023 s / img. ETA=0:00:19
[07/29 22:49:50] d2.evaluation.evaluator INFO: Inference done 358/468. 0.1004 s / img. ETA=0:00:12
[07/29 22:49:55] d2.evaluation.evaluator INFO: Inference done 412/468. 0.0992 s / img. ETA=0:00:06
[07/29 22:50:00] d2.evaluation.evaluator INFO: Inference done 466/468. 0.0983 s / img. ETA=0:00:00
[07/29 22:50:00] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.519217 (0.111273 s / img per device, on 1 devices)
[07/29 22:50:00] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098279 s / img per device, on 1 devices)
[07/29 22:50:00] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:50:00] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:50:00] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:50:00] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 93.309 | 98.970 | 98.970 |  nan  | 92.068 | 93.727 |
[07/29 22:50:00] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:50:00] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:50:00] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:50:00] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:50:00] d2.evaluation.testing INFO: copypaste: 93.3088,98.9704,98.9704,nan,92.0682,93.7267
[07/29 22:50:03] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 22:50:08] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 22:50:13] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 22:50:18] detectron2 INFO: Loss on Validation  done 128/468. 0.0001 s / img. ETA=0:00:43
[07/29 22:50:23] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 22:50:28] detectron2 INFO: Loss on Validation  done 205/468. 0.0001 s / img. ETA=0:00:34
[07/29 22:50:33] detectron2 INFO: Loss on Validation  done 243/468. 0.0001 s / img. ETA=0:00:29
[07/29 22:50:38] detectron2 INFO: Loss on Validation  done 284/468. 0.0001 s / img. ETA=0:00:23
[07/29 22:50:43] detectron2 INFO: Loss on Validation  done 333/468. 0.0001 s / img. ETA=0:00:16
[07/29 22:50:48] detectron2 INFO: Loss on Validation  done 381/468. 0.0001 s / img. ETA=0:00:10
[07/29 22:50:53] detectron2 INFO: Loss on Validation  done 430/468. 0.0001 s / img. ETA=0:00:04
[07/29 22:50:57] detectron2 INFO: mean_loss=0.12139258757406399, best_loss=0.11919471451081007
[07/29 22:50:57] detectron2 INFO: could not find a better loss with mean_loss=0.12139258757406399 best_loss=0.11919471451081007 and failed count=4
[07/29 22:50:57] detectron2 INFO: saving model to: model_0010199.pth, saved_model_names=model_0008699.pth, model_0008999.pth, model_0009299.pth, model_0009599.pth, model_0009899.pth, model_0010199.pth
[07/29 22:50:57] detectron2 INFO: exeeded model save threshold - removing model_0008699.pth
[07/29 22:50:57] detectron2 INFO: saved_model_names=model_0008999.pth, model_0009299.pth, model_0009599.pth, model_0009899.pth, model_0010199.pth
[07/29 22:50:57] d2.utils.events INFO:  eta: 0:55:10  iter: 10199  total_loss: 0.094  loss_cls: 0.016  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8641  data_time: 0.0133  lr: 0.004000  max_mem: 6856M
[07/29 22:51:14] d2.utils.events INFO:  eta: 0:54:52  iter: 10219  total_loss: 0.104  loss_cls: 0.018  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8641  data_time: 0.0150  lr: 0.004000  max_mem: 6856M
[07/29 22:51:32] d2.utils.events INFO:  eta: 0:54:35  iter: 10239  total_loss: 0.096  loss_cls: 0.014  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8641  data_time: 0.0158  lr: 0.004000  max_mem: 6856M
[07/29 22:51:49] d2.utils.events INFO:  eta: 0:54:18  iter: 10259  total_loss: 0.096  loss_cls: 0.019  loss_box_reg: 0.059  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0145  lr: 0.004000  max_mem: 6856M
[07/29 22:52:06] d2.utils.events INFO:  eta: 0:54:02  iter: 10279  total_loss: 0.101  loss_cls: 0.017  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8639  data_time: 0.0158  lr: 0.004000  max_mem: 6856M
[07/29 22:52:23] d2.utils.events INFO:  eta: 0:53:44  iter: 10299  total_loss: 0.106  loss_cls: 0.017  loss_box_reg: 0.052  loss_rpn_cls: 0.001  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8639  data_time: 0.0143  lr: 0.004000  max_mem: 6856M
[07/29 22:52:41] d2.utils.events INFO:  eta: 0:53:26  iter: 10319  total_loss: 0.097  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0135  lr: 0.004000  max_mem: 6856M
[07/29 22:52:58] d2.utils.events INFO:  eta: 0:53:10  iter: 10339  total_loss: 0.086  loss_cls: 0.019  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8642  data_time: 0.0158  lr: 0.004000  max_mem: 6856M
[07/29 22:53:15] d2.utils.events INFO:  eta: 0:52:53  iter: 10359  total_loss: 0.116  loss_cls: 0.019  loss_box_reg: 0.062  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8639  data_time: 0.0145  lr: 0.004000  max_mem: 6856M
[07/29 22:53:32] d2.utils.events INFO:  eta: 0:52:34  iter: 10379  total_loss: 0.099  loss_cls: 0.019  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0153  lr: 0.004000  max_mem: 6856M
[07/29 22:53:49] d2.utils.events INFO:  eta: 0:52:16  iter: 10399  total_loss: 0.112  loss_cls: 0.020  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.037  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0168  lr: 0.004000  max_mem: 6856M
[07/29 22:54:06] d2.utils.events INFO:  eta: 0:51:56  iter: 10419  total_loss: 0.094  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0148  lr: 0.004000  max_mem: 6856M
[07/29 22:54:24] d2.utils.events INFO:  eta: 0:51:39  iter: 10439  total_loss: 0.102  loss_cls: 0.017  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0219  lr: 0.004000  max_mem: 6856M
[07/29 22:54:41] d2.utils.events INFO:  eta: 0:51:21  iter: 10459  total_loss: 0.109  loss_cls: 0.020  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0174  lr: 0.004000  max_mem: 6856M
[07/29 22:54:59] d2.utils.events INFO:  eta: 0:51:04  iter: 10479  total_loss: 0.094  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8638  data_time: 0.0156  lr: 0.004000  max_mem: 6856M
[07/29 22:55:17] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 22:55:17] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 22:55:17] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 22:55:17] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 22:55:20] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1091 s / img. ETA=0:00:56
[07/29 22:55:25] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1028 s / img. ETA=0:00:50
[07/29 22:55:30] d2.evaluation.evaluator INFO: Inference done 91/468. 0.1028 s / img. ETA=0:00:47
[07/29 22:55:35] d2.evaluation.evaluator INFO: Inference done 133/468. 0.1020 s / img. ETA=0:00:41
[07/29 22:55:40] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1027 s / img. ETA=0:00:36
[07/29 22:55:45] d2.evaluation.evaluator INFO: Inference done 215/468. 0.1037 s / img. ETA=0:00:31
[07/29 22:55:50] d2.evaluation.evaluator INFO: Inference done 259/468. 0.1030 s / img. ETA=0:00:25
[07/29 22:55:55] d2.evaluation.evaluator INFO: Inference done 308/468. 0.1015 s / img. ETA=0:00:19
[07/29 22:56:00] d2.evaluation.evaluator INFO: Inference done 363/468. 0.0998 s / img. ETA=0:00:12
[07/29 22:56:05] d2.evaluation.evaluator INFO: Inference done 418/468. 0.0986 s / img. ETA=0:00:05
[07/29 22:56:10] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.023591 (0.110202 s / img per device, on 1 devices)
[07/29 22:56:10] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097829 s / img per device, on 1 devices)
[07/29 22:56:10] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 22:56:10] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 22:56:10] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 22:56:10] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 96.546 | 98.952 | 98.952 |  nan  | 93.421 | 97.743 |
[07/29 22:56:10] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 22:56:10] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 22:56:10] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 22:56:10] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 22:56:10] d2.evaluation.testing INFO: copypaste: 96.5457,98.9523,98.9523,nan,93.4209,97.7428
[07/29 22:56:13] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:53
[07/29 22:56:18] detectron2 INFO: Loss on Validation  done 51/468. 0.0001 s / img. ETA=0:00:52
[07/29 22:56:23] detectron2 INFO: Loss on Validation  done 90/468. 0.0001 s / img. ETA=0:00:48
[07/29 22:56:28] detectron2 INFO: Loss on Validation  done 130/468. 0.0001 s / img. ETA=0:00:43
[07/29 22:56:33] detectron2 INFO: Loss on Validation  done 169/468. 0.0001 s / img. ETA=0:00:38
[07/29 22:56:38] detectron2 INFO: Loss on Validation  done 208/468. 0.0001 s / img. ETA=0:00:33
[07/29 22:56:43] detectron2 INFO: Loss on Validation  done 246/468. 0.0001 s / img. ETA=0:00:28
[07/29 22:56:48] detectron2 INFO: Loss on Validation  done 288/468. 0.0001 s / img. ETA=0:00:23
[07/29 22:56:53] detectron2 INFO: Loss on Validation  done 338/468. 0.0001 s / img. ETA=0:00:16
[07/29 22:56:58] detectron2 INFO: Loss on Validation  done 386/468. 0.0001 s / img. ETA=0:00:09
[07/29 22:57:03] detectron2 INFO: Loss on Validation  done 436/468. 0.0001 s / img. ETA=0:00:03
[07/29 22:57:07] detectron2 INFO: mean_loss=0.10624293216935557, best_loss=0.11919471451081007
[07/29 22:57:07] detectron2 INFO: saving model to: model_0010499.pth, saved_model_names=model_0008999.pth, model_0009299.pth, model_0009599.pth, model_0009899.pth, model_0010199.pth, model_0010499.pth
[07/29 22:57:07] detectron2 INFO: exeeded model save threshold - removing model_0008999.pth
[07/29 22:57:07] detectron2 INFO: saved_model_names=model_0009299.pth, model_0009599.pth, model_0009899.pth, model_0010199.pth, model_0010499.pth
[07/29 22:57:07] d2.utils.events INFO:  eta: 0:50:46  iter: 10499  total_loss: 0.096  loss_cls: 0.017  loss_box_reg: 0.039  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8634  data_time: 0.0153  lr: 0.004000  max_mem: 6856M
[07/29 22:57:24] d2.utils.events INFO:  eta: 0:50:25  iter: 10519  total_loss: 0.086  loss_cls: 0.016  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8633  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 22:57:41] d2.utils.events INFO:  eta: 0:50:08  iter: 10539  total_loss: 0.092  loss_cls: 0.015  loss_box_reg: 0.042  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8634  data_time: 0.0139  lr: 0.004000  max_mem: 6856M
[07/29 22:57:58] d2.utils.events INFO:  eta: 0:49:50  iter: 10559  total_loss: 0.096  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0175  lr: 0.004000  max_mem: 6856M
[07/29 22:58:16] d2.utils.events INFO:  eta: 0:49:32  iter: 10579  total_loss: 0.087  loss_cls: 0.018  loss_box_reg: 0.039  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8633  data_time: 0.0139  lr: 0.004000  max_mem: 6856M
[07/29 22:58:33] d2.utils.events INFO:  eta: 0:49:15  iter: 10599  total_loss: 0.108  loss_cls: 0.016  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 22:58:50] d2.utils.events INFO:  eta: 0:49:02  iter: 10619  total_loss: 0.090  loss_cls: 0.017  loss_box_reg: 0.039  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8633  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 22:59:07] d2.utils.events INFO:  eta: 0:48:41  iter: 10639  total_loss: 0.105  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8631  data_time: 0.0166  lr: 0.004000  max_mem: 6856M
[07/29 22:59:25] d2.utils.events INFO:  eta: 0:48:25  iter: 10659  total_loss: 0.107  loss_cls: 0.020  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0165  lr: 0.004000  max_mem: 6856M
[07/29 22:59:42] d2.utils.events INFO:  eta: 0:48:05  iter: 10679  total_loss: 0.096  loss_cls: 0.017  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0149  lr: 0.004000  max_mem: 6856M
[07/29 22:59:59] d2.utils.events INFO:  eta: 0:47:46  iter: 10699  total_loss: 0.115  loss_cls: 0.018  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8630  data_time: 0.0128  lr: 0.004000  max_mem: 6856M
[07/29 23:00:16] d2.utils.events INFO:  eta: 0:47:29  iter: 10719  total_loss: 0.122  loss_cls: 0.020  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8630  data_time: 0.0132  lr: 0.004000  max_mem: 6856M
[07/29 23:00:33] d2.utils.events INFO:  eta: 0:47:11  iter: 10739  total_loss: 0.091  loss_cls: 0.016  loss_box_reg: 0.041  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8631  data_time: 0.0156  lr: 0.004000  max_mem: 6856M
[07/29 23:00:51] d2.utils.events INFO:  eta: 0:47:00  iter: 10759  total_loss: 0.100  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8631  data_time: 0.0145  lr: 0.004000  max_mem: 6856M
[07/29 23:01:08] d2.utils.events INFO:  eta: 0:46:43  iter: 10779  total_loss: 0.110  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8633  data_time: 0.0156  lr: 0.004000  max_mem: 6856M
[07/29 23:01:28] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:01:28] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:01:28] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:01:28] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:01:30] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1004 s / img. ETA=0:00:49
[07/29 23:01:35] d2.evaluation.evaluator INFO: Inference done 53/468. 0.1006 s / img. ETA=0:00:49
[07/29 23:01:40] d2.evaluation.evaluator INFO: Inference done 95/468. 0.1002 s / img. ETA=0:00:44
[07/29 23:01:45] d2.evaluation.evaluator INFO: Inference done 136/468. 0.1015 s / img. ETA=0:00:40
[07/29 23:01:51] d2.evaluation.evaluator INFO: Inference done 177/468. 0.1025 s / img. ETA=0:00:35
[07/29 23:01:56] d2.evaluation.evaluator INFO: Inference done 220/468. 0.1025 s / img. ETA=0:00:30
[07/29 23:02:01] d2.evaluation.evaluator INFO: Inference done 263/468. 0.1027 s / img. ETA=0:00:24
[07/29 23:02:06] d2.evaluation.evaluator INFO: Inference done 314/468. 0.1010 s / img. ETA=0:00:18
[07/29 23:02:11] d2.evaluation.evaluator INFO: Inference done 369/468. 0.0994 s / img. ETA=0:00:11
[07/29 23:02:16] d2.evaluation.evaluator INFO: Inference done 423/468. 0.0983 s / img. ETA=0:00:04
[07/29 23:02:20] d2.evaluation.evaluator INFO: Total inference time: 0:00:50.659583 (0.109416 s / img per device, on 1 devices)
[07/29 23:02:20] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097516 s / img per device, on 1 devices)
[07/29 23:02:20] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:02:20] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:02:20] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:02:21] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.942 | 98.928 | 98.928 |  nan  | 93.111 | 95.628 |
[07/29 23:02:21] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:02:21] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:02:21] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:02:21] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:02:21] d2.evaluation.testing INFO: copypaste: 94.9422,98.9278,98.9278,nan,93.1112,95.6280
[07/29 23:02:23] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:48
[07/29 23:02:28] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:52
[07/29 23:02:33] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:02:38] detectron2 INFO: Loss on Validation  done 128/468. 0.0001 s / img. ETA=0:00:43
[07/29 23:02:43] detectron2 INFO: Loss on Validation  done 167/468. 0.0001 s / img. ETA=0:00:38
[07/29 23:02:48] detectron2 INFO: Loss on Validation  done 206/468. 0.0001 s / img. ETA=0:00:33
[07/29 23:02:53] detectron2 INFO: Loss on Validation  done 244/468. 0.0001 s / img. ETA=0:00:28
[07/29 23:02:58] detectron2 INFO: Loss on Validation  done 286/468. 0.0001 s / img. ETA=0:00:23
[07/29 23:03:03] detectron2 INFO: Loss on Validation  done 335/468. 0.0001 s / img. ETA=0:00:16
[07/29 23:03:08] detectron2 INFO: Loss on Validation  done 383/468. 0.0001 s / img. ETA=0:00:10
[07/29 23:03:13] detectron2 INFO: Loss on Validation  done 434/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:03:17] detectron2 INFO: mean_loss=0.12391262874973673, best_loss=0.10624293216935557
[07/29 23:03:17] detectron2 INFO: could not find a better loss with mean_loss=0.12391262874973673 best_loss=0.10624293216935557 and failed count=1
[07/29 23:03:17] detectron2 INFO: saving model to: model_0010799.pth, saved_model_names=model_0009299.pth, model_0009599.pth, model_0009899.pth, model_0010199.pth, model_0010499.pth, model_0010799.pth
[07/29 23:03:17] detectron2 INFO: exeeded model save threshold - removing model_0009299.pth
[07/29 23:03:17] detectron2 INFO: saved_model_names=model_0009599.pth, model_0009899.pth, model_0010199.pth, model_0010499.pth, model_0010799.pth
[07/29 23:03:17] d2.utils.events INFO:  eta: 0:46:25  iter: 10799  total_loss: 0.103  loss_cls: 0.017  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8634  data_time: 0.0140  lr: 0.004000  max_mem: 6856M
[07/29 23:03:35] d2.utils.events INFO:  eta: 0:46:09  iter: 10819  total_loss: 0.094  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 23:03:52] d2.utils.events INFO:  eta: 0:45:51  iter: 10839  total_loss: 0.088  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 23:04:09] d2.utils.events INFO:  eta: 0:45:34  iter: 10859  total_loss: 0.108  loss_cls: 0.022  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0148  lr: 0.004000  max_mem: 6856M
[07/29 23:04:27] d2.utils.events INFO:  eta: 0:45:15  iter: 10879  total_loss: 0.092  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0142  lr: 0.004000  max_mem: 6856M
[07/29 23:04:44] d2.utils.events INFO:  eta: 0:44:54  iter: 10899  total_loss: 0.096  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8635  data_time: 0.0139  lr: 0.004000  max_mem: 6856M
[07/29 23:05:01] d2.utils.events INFO:  eta: 0:44:34  iter: 10919  total_loss: 0.109  loss_cls: 0.016  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8634  data_time: 0.0147  lr: 0.004000  max_mem: 6856M
[07/29 23:05:18] d2.utils.events INFO:  eta: 0:44:20  iter: 10939  total_loss: 0.104  loss_cls: 0.017  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8636  data_time: 0.0140  lr: 0.004000  max_mem: 6856M
[07/29 23:05:36] d2.utils.events INFO:  eta: 0:44:03  iter: 10959  total_loss: 0.110  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8637  data_time: 0.0144  lr: 0.004000  max_mem: 6856M
[07/29 23:05:53] d2.utils.events INFO:  eta: 0:43:49  iter: 10979  total_loss: 0.086  loss_cls: 0.019  loss_box_reg: 0.041  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8638  data_time: 0.0148  lr: 0.004000  max_mem: 6856M
[07/29 23:06:11] d2.utils.events INFO:  eta: 0:43:33  iter: 10999  total_loss: 0.100  loss_cls: 0.019  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8639  data_time: 0.0131  lr: 0.004000  max_mem: 6856M
[07/29 23:06:28] d2.utils.events INFO:  eta: 0:43:14  iter: 11019  total_loss: 0.094  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8639  data_time: 0.0143  lr: 0.004000  max_mem: 6856M
[07/29 23:06:46] d2.utils.events INFO:  eta: 0:42:57  iter: 11039  total_loss: 0.086  loss_cls: 0.017  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8641  data_time: 0.0138  lr: 0.004000  max_mem: 6856M
[07/29 23:07:03] d2.utils.events INFO:  eta: 0:42:40  iter: 11059  total_loss: 0.103  loss_cls: 0.016  loss_box_reg: 0.054  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8640  data_time: 0.0154  lr: 0.004000  max_mem: 6856M
[07/29 23:07:20] d2.utils.events INFO:  eta: 0:42:22  iter: 11079  total_loss: 0.092  loss_cls: 0.016  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 1.000  time: 0.8638  data_time: 0.0132  lr: 0.004000  max_mem: 6856M
[07/29 23:07:39] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:07:39] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:07:39] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:07:39] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:07:42] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0957 s / img. ETA=0:00:59
[07/29 23:07:47] d2.evaluation.evaluator INFO: Inference done 55/468. 0.1036 s / img. ETA=0:00:48
[07/29 23:07:52] d2.evaluation.evaluator INFO: Inference done 93/468. 0.1050 s / img. ETA=0:00:46
[07/29 23:07:57] d2.evaluation.evaluator INFO: Inference done 137/468. 0.1037 s / img. ETA=0:00:40
[07/29 23:08:02] d2.evaluation.evaluator INFO: Inference done 179/468. 0.1033 s / img. ETA=0:00:34
[07/29 23:08:07] d2.evaluation.evaluator INFO: Inference done 221/468. 0.1030 s / img. ETA=0:00:29
[07/29 23:08:12] d2.evaluation.evaluator INFO: Inference done 263/468. 0.1026 s / img. ETA=0:00:24
[07/29 23:08:17] d2.evaluation.evaluator INFO: Inference done 314/468. 0.1009 s / img. ETA=0:00:18
[07/29 23:08:22] d2.evaluation.evaluator INFO: Inference done 369/468. 0.0992 s / img. ETA=0:00:11
[07/29 23:08:27] d2.evaluation.evaluator INFO: Inference done 424/468. 0.0981 s / img. ETA=0:00:04
[07/29 23:08:31] d2.evaluation.evaluator INFO: Total inference time: 0:00:50.396567 (0.108848 s / img per device, on 1 devices)
[07/29 23:08:31] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097369 s / img per device, on 1 devices)
[07/29 23:08:31] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:08:31] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:08:31] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:08:32] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.731 | 98.935 | 98.935 |  nan  | 93.029 | 96.663 |
[07/29 23:08:32] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:08:32] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:08:32] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:08:32] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:08:32] d2.evaluation.testing INFO: copypaste: 95.7305,98.9346,98.9346,nan,93.0290,96.6629
[07/29 23:08:34] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 23:08:39] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 23:08:44] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:08:49] detectron2 INFO: Loss on Validation  done 128/468. 0.0001 s / img. ETA=0:00:43
[07/29 23:08:54] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 23:08:59] detectron2 INFO: Loss on Validation  done 206/468. 0.0001 s / img. ETA=0:00:33
[07/29 23:09:04] detectron2 INFO: Loss on Validation  done 244/468. 0.0001 s / img. ETA=0:00:29
[07/29 23:09:09] detectron2 INFO: Loss on Validation  done 286/468. 0.0001 s / img. ETA=0:00:23
[07/29 23:09:14] detectron2 INFO: Loss on Validation  done 336/468. 0.0001 s / img. ETA=0:00:16
[07/29 23:09:19] detectron2 INFO: Loss on Validation  done 384/468. 0.0001 s / img. ETA=0:00:10
[07/29 23:09:24] detectron2 INFO: Loss on Validation  done 434/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:09:28] detectron2 INFO: mean_loss=0.11101665271743538, best_loss=0.10624293216935557
[07/29 23:09:28] detectron2 INFO: could not find a better loss with mean_loss=0.11101665271743538 best_loss=0.10624293216935557 and failed count=2
[07/29 23:09:28] detectron2 INFO: saving model to: model_0011099.pth, saved_model_names=model_0009599.pth, model_0009899.pth, model_0010199.pth, model_0010499.pth, model_0010799.pth, model_0011099.pth
[07/29 23:09:28] detectron2 INFO: exeeded model save threshold - removing model_0009599.pth
[07/29 23:09:28] detectron2 INFO: saved_model_names=model_0009899.pth, model_0010199.pth, model_0010499.pth, model_0010799.pth, model_0011099.pth
[07/29 23:09:28] d2.utils.events INFO:  eta: 0:42:01  iter: 11099  total_loss: 0.100  loss_cls: 0.019  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8638  data_time: 0.0139  lr: 0.004000  max_mem: 6856M
[07/29 23:09:45] d2.utils.events INFO:  eta: 0:41:47  iter: 11119  total_loss: 0.107  loss_cls: 0.019  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8638  data_time: 0.0153  lr: 0.004000  max_mem: 6856M
[07/29 23:10:03] d2.utils.events INFO:  eta: 0:41:30  iter: 11139  total_loss: 0.081  loss_cls: 0.016  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8638  data_time: 0.0183  lr: 0.004000  max_mem: 6856M
[07/29 23:10:20] d2.utils.events INFO:  eta: 0:41:10  iter: 11159  total_loss: 0.096  loss_cls: 0.015  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8637  data_time: 0.0161  lr: 0.004000  max_mem: 6856M
[07/29 23:10:37] d2.utils.events INFO:  eta: 0:40:55  iter: 11179  total_loss: 0.090  loss_cls: 0.015  loss_box_reg: 0.040  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0151  lr: 0.004000  max_mem: 6856M
[07/29 23:10:54] d2.utils.events INFO:  eta: 0:40:37  iter: 11199  total_loss: 0.094  loss_cls: 0.016  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8637  data_time: 0.0133  lr: 0.004000  max_mem: 6856M
[07/29 23:11:11] d2.utils.events INFO:  eta: 0:40:18  iter: 11219  total_loss: 0.101  loss_cls: 0.020  loss_box_reg: 0.051  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8635  data_time: 0.0132  lr: 0.004000  max_mem: 6856M
[07/29 23:11:28] d2.utils.events INFO:  eta: 0:39:59  iter: 11239  total_loss: 0.098  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8635  data_time: 0.0218  lr: 0.004000  max_mem: 6856M
[07/29 23:11:46] d2.utils.events INFO:  eta: 0:39:43  iter: 11259  total_loss: 0.075  loss_cls: 0.018  loss_box_reg: 0.039  loss_rpn_cls: 0.001  loss_rpn_loc: 0.019  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 23:12:03] d2.utils.events INFO:  eta: 0:39:25  iter: 11279  total_loss: 0.087  loss_cls: 0.020  loss_box_reg: 0.039  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8636  data_time: 0.0175  lr: 0.004000  max_mem: 6856M
[07/29 23:12:20] d2.utils.events INFO:  eta: 0:39:03  iter: 11299  total_loss: 0.100  loss_cls: 0.021  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8634  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 23:12:37] d2.utils.events INFO:  eta: 0:38:45  iter: 11319  total_loss: 0.098  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0157  lr: 0.004000  max_mem: 6856M
[07/29 23:12:54] d2.utils.events INFO:  eta: 0:38:25  iter: 11339  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 23:13:11] d2.utils.events INFO:  eta: 0:38:08  iter: 11359  total_loss: 0.086  loss_cls: 0.017  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8632  data_time: 0.0186  lr: 0.004000  max_mem: 6856M
[07/29 23:13:29] d2.utils.events INFO:  eta: 0:37:54  iter: 11379  total_loss: 0.099  loss_cls: 0.023  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 1.500  time: 0.8634  data_time: 0.0130  lr: 0.004000  max_mem: 6856M
[07/29 23:13:48] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:13:48] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:13:48] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:13:48] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:13:51] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1008 s / img. ETA=0:00:52
[07/29 23:13:56] d2.evaluation.evaluator INFO: Inference done 55/468. 0.1002 s / img. ETA=0:00:47
[07/29 23:14:01] d2.evaluation.evaluator INFO: Inference done 92/468. 0.1008 s / img. ETA=0:00:46
[07/29 23:14:06] d2.evaluation.evaluator INFO: Inference done 134/468. 0.1004 s / img. ETA=0:00:40
[07/29 23:14:11] d2.evaluation.evaluator INFO: Inference done 177/468. 0.1009 s / img. ETA=0:00:35
[07/29 23:14:16] d2.evaluation.evaluator INFO: Inference done 219/468. 0.1017 s / img. ETA=0:00:30
[07/29 23:14:21] d2.evaluation.evaluator INFO: Inference done 263/468. 0.1012 s / img. ETA=0:00:24
[07/29 23:14:26] d2.evaluation.evaluator INFO: Inference done 315/468. 0.0998 s / img. ETA=0:00:17
[07/29 23:14:31] d2.evaluation.evaluator INFO: Inference done 370/468. 0.0983 s / img. ETA=0:00:11
[07/29 23:14:37] d2.evaluation.evaluator INFO: Inference done 425/468. 0.0973 s / img. ETA=0:00:04
[07/29 23:14:41] d2.evaluation.evaluator INFO: Total inference time: 0:00:50.383700 (0.108820 s / img per device, on 1 devices)
[07/29 23:14:41] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:44 (0.096719 s / img per device, on 1 devices)
[07/29 23:14:41] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:14:41] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:14:41] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:14:41] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.445 | 98.918 | 98.872 |  nan  | 92.334 | 96.497 |
[07/29 23:14:41] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:14:41] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:14:41] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:14:41] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:14:41] d2.evaluation.testing INFO: copypaste: 95.4452,98.9183,98.8716,nan,92.3335,96.4970
[07/29 23:14:44] detectron2 INFO: Loss on Validation  done 11/468. 0.0000 s / img. ETA=0:00:47
[07/29 23:14:49] detectron2 INFO: Loss on Validation  done 51/468. 0.0001 s / img. ETA=0:00:52
[07/29 23:14:54] detectron2 INFO: Loss on Validation  done 90/468. 0.0001 s / img. ETA=0:00:48
[07/29 23:14:59] detectron2 INFO: Loss on Validation  done 130/468. 0.0001 s / img. ETA=0:00:42
[07/29 23:15:04] detectron2 INFO: Loss on Validation  done 169/468. 0.0001 s / img. ETA=0:00:38
[07/29 23:15:09] detectron2 INFO: Loss on Validation  done 208/468. 0.0001 s / img. ETA=0:00:33
[07/29 23:15:14] detectron2 INFO: Loss on Validation  done 246/468. 0.0001 s / img. ETA=0:00:28
[07/29 23:15:19] detectron2 INFO: Loss on Validation  done 289/468. 0.0001 s / img. ETA=0:00:22
[07/29 23:15:24] detectron2 INFO: Loss on Validation  done 339/468. 0.0001 s / img. ETA=0:00:15
[07/29 23:15:29] detectron2 INFO: Loss on Validation  done 387/468. 0.0001 s / img. ETA=0:00:09
[07/29 23:15:34] detectron2 INFO: Loss on Validation  done 437/468. 0.0001 s / img. ETA=0:00:03
[07/29 23:15:37] detectron2 INFO: mean_loss=0.13236931558893283, best_loss=0.10624293216935557
[07/29 23:15:37] detectron2 INFO: could not find a better loss with mean_loss=0.13236931558893283 best_loss=0.10624293216935557 and failed count=3
[07/29 23:15:37] detectron2 INFO: saving model to: model_0011399.pth, saved_model_names=model_0009899.pth, model_0010199.pth, model_0010499.pth, model_0010799.pth, model_0011099.pth, model_0011399.pth
[07/29 23:15:37] detectron2 INFO: exeeded model save threshold - removing model_0009899.pth
[07/29 23:15:37] detectron2 INFO: saved_model_names=model_0010199.pth, model_0010499.pth, model_0010799.pth, model_0011099.pth, model_0011399.pth
[07/29 23:15:37] d2.utils.events INFO:  eta: 0:37:40  iter: 11399  total_loss: 0.135  loss_cls: 0.024  loss_box_reg: 0.059  loss_rpn_cls: 0.002  loss_rpn_loc: 0.034  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 23:15:55] d2.utils.events INFO:  eta: 0:37:23  iter: 11419  total_loss: 0.110  loss_cls: 0.025  loss_box_reg: 0.054  loss_rpn_cls: 0.002  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0127  lr: 0.004000  max_mem: 6856M
[07/29 23:16:12] d2.utils.events INFO:  eta: 0:37:06  iter: 11439  total_loss: 0.110  loss_cls: 0.018  loss_box_reg: 0.052  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0170  lr: 0.004000  max_mem: 6856M
[07/29 23:16:29] d2.utils.events INFO:  eta: 0:36:50  iter: 11459  total_loss: 0.100  loss_cls: 0.021  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 23:16:47] d2.utils.events INFO:  eta: 0:36:33  iter: 11479  total_loss: 0.108  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0143  lr: 0.004000  max_mem: 6856M
[07/29 23:17:04] d2.utils.events INFO:  eta: 0:36:16  iter: 11499  total_loss: 0.102  loss_cls: 0.021  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0146  lr: 0.004000  max_mem: 6856M
[07/29 23:17:22] d2.utils.events INFO:  eta: 0:36:00  iter: 11519  total_loss: 0.099  loss_cls: 0.017  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0164  lr: 0.004000  max_mem: 6856M
[07/29 23:17:39] d2.utils.events INFO:  eta: 0:35:43  iter: 11539  total_loss: 0.103  loss_cls: 0.018  loss_box_reg: 0.056  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0141  lr: 0.004000  max_mem: 6856M
[07/29 23:17:56] d2.utils.events INFO:  eta: 0:35:27  iter: 11559  total_loss: 0.084  loss_cls: 0.015  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0163  lr: 0.004000  max_mem: 6856M
[07/29 23:18:13] d2.utils.events INFO:  eta: 0:35:10  iter: 11579  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0142  lr: 0.004000  max_mem: 6856M
[07/29 23:18:30] d2.utils.events INFO:  eta: 0:34:52  iter: 11599  total_loss: 0.091  loss_cls: 0.019  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0142  lr: 0.004000  max_mem: 6856M
[07/29 23:18:48] d2.utils.events INFO:  eta: 0:34:35  iter: 11619  total_loss: 0.093  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0166  lr: 0.004000  max_mem: 6856M
[07/29 23:19:05] d2.utils.events INFO:  eta: 0:34:17  iter: 11639  total_loss: 0.097  loss_cls: 0.017  loss_box_reg: 0.051  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0156  lr: 0.004000  max_mem: 6856M
[07/29 23:19:22] d2.utils.events INFO:  eta: 0:34:00  iter: 11659  total_loss: 0.081  loss_cls: 0.017  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0140  lr: 0.004000  max_mem: 6856M
[07/29 23:19:39] d2.utils.events INFO:  eta: 0:33:41  iter: 11679  total_loss: 0.107  loss_cls: 0.020  loss_box_reg: 0.055  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.121  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 23:19:58] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:19:58] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:19:58] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:19:59] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:20:02] d2.evaluation.evaluator INFO: Inference done 11/468. 0.0954 s / img. ETA=0:01:03
[07/29 23:20:07] d2.evaluation.evaluator INFO: Inference done 55/468. 0.1021 s / img. ETA=0:00:49
[07/29 23:20:12] d2.evaluation.evaluator INFO: Inference done 94/468. 0.1034 s / img. ETA=0:00:46
[07/29 23:20:17] d2.evaluation.evaluator INFO: Inference done 135/468. 0.1030 s / img. ETA=0:00:41
[07/29 23:20:22] d2.evaluation.evaluator INFO: Inference done 176/468. 0.1032 s / img. ETA=0:00:36
[07/29 23:20:27] d2.evaluation.evaluator INFO: Inference done 217/468. 0.1032 s / img. ETA=0:00:31
[07/29 23:20:32] d2.evaluation.evaluator INFO: Inference done 259/468. 0.1027 s / img. ETA=0:00:25
[07/29 23:20:37] d2.evaluation.evaluator INFO: Inference done 308/468. 0.1014 s / img. ETA=0:00:19
[07/29 23:20:42] d2.evaluation.evaluator INFO: Inference done 363/468. 0.0997 s / img. ETA=0:00:12
[07/29 23:20:47] d2.evaluation.evaluator INFO: Inference done 417/468. 0.0986 s / img. ETA=0:00:05
[07/29 23:20:52] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.298127 (0.110795 s / img per device, on 1 devices)
[07/29 23:20:52] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.097765 s / img per device, on 1 devices)
[07/29 23:20:52] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:20:52] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:20:52] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:20:52] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.231 | 98.927 | 98.927 |  nan  | 92.259 | 96.350 |
[07/29 23:20:52] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:20:52] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:20:52] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:20:52] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:20:52] d2.evaluation.testing INFO: copypaste: 95.2310,98.9275,98.9275,nan,92.2589,96.3503
[07/29 23:20:55] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 23:21:00] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 23:21:05] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:21:10] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 23:21:15] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 23:21:20] detectron2 INFO: Loss on Validation  done 205/468. 0.0001 s / img. ETA=0:00:34
[07/29 23:21:25] detectron2 INFO: Loss on Validation  done 243/468. 0.0001 s / img. ETA=0:00:29
[07/29 23:21:30] detectron2 INFO: Loss on Validation  done 284/468. 0.0001 s / img. ETA=0:00:23
[07/29 23:21:35] detectron2 INFO: Loss on Validation  done 333/468. 0.0001 s / img. ETA=0:00:16
[07/29 23:21:40] detectron2 INFO: Loss on Validation  done 381/468. 0.0001 s / img. ETA=0:00:10
[07/29 23:21:45] detectron2 INFO: Loss on Validation  done 430/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:21:49] detectron2 INFO: mean_loss=0.1142735605424371, best_loss=0.10624293216935557
[07/29 23:21:49] detectron2 INFO: could not find a better loss with mean_loss=0.1142735605424371 best_loss=0.10624293216935557 and failed count=4
[07/29 23:21:49] detectron2 INFO: saving model to: model_0011699.pth, saved_model_names=model_0010199.pth, model_0010499.pth, model_0010799.pth, model_0011099.pth, model_0011399.pth, model_0011699.pth
[07/29 23:21:49] detectron2 INFO: exeeded model save threshold - removing model_0010199.pth
[07/29 23:21:49] detectron2 INFO: saved_model_names=model_0010499.pth, model_0010799.pth, model_0011099.pth, model_0011399.pth, model_0011699.pth
[07/29 23:21:49] d2.utils.events INFO:  eta: 0:33:25  iter: 11699  total_loss: 0.086  loss_cls: 0.015  loss_box_reg: 0.050  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8634  data_time: 0.0160  lr: 0.004000  max_mem: 6856M
[07/29 23:22:07] d2.utils.events INFO:  eta: 0:33:08  iter: 11719  total_loss: 0.086  loss_cls: 0.016  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8634  data_time: 0.0137  lr: 0.004000  max_mem: 6856M
[07/29 23:22:24] d2.utils.events INFO:  eta: 0:32:48  iter: 11739  total_loss: 0.096  loss_cls: 0.016  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8633  data_time: 0.0132  lr: 0.004000  max_mem: 6856M
[07/29 23:22:41] d2.utils.events INFO:  eta: 0:32:30  iter: 11759  total_loss: 0.086  loss_cls: 0.016  loss_box_reg: 0.038  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8634  data_time: 0.0159  lr: 0.004000  max_mem: 6856M
[07/29 23:22:59] d2.utils.events INFO:  eta: 0:32:10  iter: 11779  total_loss: 0.109  loss_cls: 0.024  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0155  lr: 0.004000  max_mem: 6856M
[07/29 23:23:16] d2.utils.events INFO:  eta: 0:31:55  iter: 11799  total_loss: 0.132  loss_cls: 0.028  loss_box_reg: 0.067  loss_rpn_cls: 0.001  loss_rpn_loc: 0.028  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0141  lr: 0.004000  max_mem: 6856M
[07/29 23:23:34] d2.utils.events INFO:  eta: 0:31:37  iter: 11819  total_loss: 0.140  loss_cls: 0.029  loss_box_reg: 0.060  loss_rpn_cls: 0.002  loss_rpn_loc: 0.035  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0152  lr: 0.004000  max_mem: 6856M
[07/29 23:23:51] d2.utils.events INFO:  eta: 0:31:19  iter: 11839  total_loss: 0.110  loss_cls: 0.020  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.033  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0145  lr: 0.004000  max_mem: 6856M
[07/29 23:24:08] d2.utils.events INFO:  eta: 0:31:01  iter: 11859  total_loss: 0.103  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0167  lr: 0.004000  max_mem: 6856M
[07/29 23:24:25] d2.utils.events INFO:  eta: 0:30:46  iter: 11879  total_loss: 0.101  loss_cls: 0.019  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0128  lr: 0.004000  max_mem: 6856M
[07/29 23:24:43] d2.utils.events INFO:  eta: 0:30:31  iter: 11899  total_loss: 0.089  loss_cls: 0.016  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0147  lr: 0.004000  max_mem: 6856M
[07/29 23:25:00] d2.utils.events INFO:  eta: 0:30:14  iter: 11919  total_loss: 0.100  loss_cls: 0.020  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0158  lr: 0.004000  max_mem: 6856M
[07/29 23:25:17] d2.utils.events INFO:  eta: 0:29:55  iter: 11939  total_loss: 0.114  loss_cls: 0.019  loss_box_reg: 0.058  loss_rpn_cls: 0.002  loss_rpn_loc: 0.031  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0135  lr: 0.004000  max_mem: 6856M
[07/29 23:25:34] d2.utils.events INFO:  eta: 0:29:37  iter: 11959  total_loss: 0.101  loss_cls: 0.021  loss_box_reg: 0.055  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0136  lr: 0.004000  max_mem: 6856M
[07/29 23:25:51] d2.utils.events INFO:  eta: 0:29:16  iter: 11979  total_loss: 0.089  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  validation_loss: 0.118  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0167  lr: 0.004000  max_mem: 6856M
[07/29 23:26:11] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:26:11] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:26:11] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:26:11] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:26:14] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1091 s / img. ETA=0:00:52
[07/29 23:26:19] d2.evaluation.evaluator INFO: Inference done 54/468. 0.1032 s / img. ETA=0:00:48
[07/29 23:26:24] d2.evaluation.evaluator INFO: Inference done 92/468. 0.1033 s / img. ETA=0:00:46
[07/29 23:26:29] d2.evaluation.evaluator INFO: Inference done 132/468. 0.1030 s / img. ETA=0:00:42
[07/29 23:26:34] d2.evaluation.evaluator INFO: Inference done 174/468. 0.1036 s / img. ETA=0:00:36
[07/29 23:26:39] d2.evaluation.evaluator INFO: Inference done 215/468. 0.1035 s / img. ETA=0:00:31
[07/29 23:26:44] d2.evaluation.evaluator INFO: Inference done 256/468. 0.1032 s / img. ETA=0:00:26
[07/29 23:26:49] d2.evaluation.evaluator INFO: Inference done 304/468. 0.1018 s / img. ETA=0:00:19
[07/29 23:26:54] d2.evaluation.evaluator INFO: Inference done 358/468. 0.1001 s / img. ETA=0:00:12
[07/29 23:26:59] d2.evaluation.evaluator INFO: Inference done 412/468. 0.0990 s / img. ETA=0:00:06
[07/29 23:27:04] d2.evaluation.evaluator INFO: Inference done 466/468. 0.0981 s / img. ETA=0:00:00
[07/29 23:27:04] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.324126 (0.110851 s / img per device, on 1 devices)
[07/29 23:27:04] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098035 s / img per device, on 1 devices)
[07/29 23:27:04] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:27:04] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:27:04] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:27:05] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.394 | 98.943 | 98.942 |  nan  | 92.846 | 96.411 |
[07/29 23:27:05] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:27:05] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:27:05] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:27:05] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:27:05] d2.evaluation.testing INFO: copypaste: 95.3935,98.9432,98.9419,nan,92.8460,96.4113
[07/29 23:27:07] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:55
[07/29 23:27:12] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 23:27:17] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:27:22] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 23:27:27] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 23:27:32] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 23:27:38] detectron2 INFO: Loss on Validation  done 243/468. 0.0001 s / img. ETA=0:00:29
[07/29 23:27:43] detectron2 INFO: Loss on Validation  done 285/468. 0.0001 s / img. ETA=0:00:23
[07/29 23:27:48] detectron2 INFO: Loss on Validation  done 334/468. 0.0001 s / img. ETA=0:00:16
[07/29 23:27:53] detectron2 INFO: Loss on Validation  done 382/468. 0.0001 s / img. ETA=0:00:10
[07/29 23:27:58] detectron2 INFO: Loss on Validation  done 432/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:28:02] detectron2 INFO: mean_loss=0.1098461919222103, best_loss=0.10624293216935557
[07/29 23:28:02] detectron2 INFO: could not find a better loss with mean_loss=0.1098461919222103 best_loss=0.10624293216935557 and failed count=5
[07/29 23:28:02] detectron2 INFO: Could not compute a better loss for the last 5 iterations - lowering learning rate in the next iteration
[07/29 23:28:02] detectron2 INFO: removing the best model from _saved_model_names so that it wont get deleted: model_0010499.pth
[07/29 23:28:02] detectron2 INFO: best models so far: {'model_0007499.pth': 0.11919471451081007, 'model_0010499.pth': 0.10624293216935557}
[07/29 23:28:02] detectron2 INFO: saving model to: model_0011999.pth, saved_model_names=model_0010799.pth, model_0011099.pth, model_0011399.pth, model_0011699.pth, model_0011999.pth
[07/29 23:28:02] d2.utils.events INFO:  eta: 0:28:58  iter: 11999  total_loss: 0.095  loss_cls: 0.017  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0147  lr: 0.004000  max_mem: 6856M
[07/29 23:28:19] d2.utils.events INFO:  eta: 0:28:40  iter: 12019  total_loss: 0.088  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0169  lr: 0.003200  max_mem: 6856M
[07/29 23:28:36] d2.utils.events INFO:  eta: 0:28:23  iter: 12039  total_loss: 0.092  loss_cls: 0.017  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0160  lr: 0.003200  max_mem: 6856M
[07/29 23:28:54] d2.utils.events INFO:  eta: 0:28:06  iter: 12059  total_loss: 0.092  loss_cls: 0.019  loss_box_reg: 0.041  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0156  lr: 0.003200  max_mem: 6856M
[07/29 23:29:11] d2.utils.events INFO:  eta: 0:27:49  iter: 12079  total_loss: 0.098  loss_cls: 0.018  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0170  lr: 0.003200  max_mem: 6856M
[07/29 23:29:28] d2.utils.events INFO:  eta: 0:27:32  iter: 12099  total_loss: 0.114  loss_cls: 0.021  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8634  data_time: 0.0164  lr: 0.003200  max_mem: 6856M
[07/29 23:29:45] d2.utils.events INFO:  eta: 0:27:11  iter: 12119  total_loss: 0.120  loss_cls: 0.024  loss_box_reg: 0.058  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8634  data_time: 0.0169  lr: 0.003200  max_mem: 6856M
[07/29 23:30:03] d2.utils.events INFO:  eta: 0:26:56  iter: 12139  total_loss: 0.099  loss_cls: 0.016  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0148  lr: 0.003200  max_mem: 6856M
[07/29 23:30:20] d2.utils.events INFO:  eta: 0:26:39  iter: 12159  total_loss: 0.101  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0144  lr: 0.003200  max_mem: 6856M
[07/29 23:30:37] d2.utils.events INFO:  eta: 0:26:22  iter: 12179  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0164  lr: 0.003200  max_mem: 6856M
[07/29 23:30:54] d2.utils.events INFO:  eta: 0:26:03  iter: 12199  total_loss: 0.104  loss_cls: 0.021  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8635  data_time: 0.0140  lr: 0.003200  max_mem: 6856M
[07/29 23:31:11] d2.utils.events INFO:  eta: 0:25:47  iter: 12219  total_loss: 0.101  loss_cls: 0.021  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8634  data_time: 0.0136  lr: 0.003200  max_mem: 6856M
[07/29 23:31:29] d2.utils.events INFO:  eta: 0:25:30  iter: 12239  total_loss: 0.096  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8636  data_time: 0.0145  lr: 0.003200  max_mem: 6856M
[07/29 23:31:47] d2.utils.events INFO:  eta: 0:25:13  iter: 12259  total_loss: 0.094  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.028  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8637  data_time: 0.0151  lr: 0.003200  max_mem: 6856M
[07/29 23:32:05] d2.utils.events INFO:  eta: 0:24:58  iter: 12279  total_loss: 0.094  loss_cls: 0.019  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8638  data_time: 0.0141  lr: 0.003200  max_mem: 6856M
[07/29 23:32:24] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:32:24] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:32:24] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:32:24] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:32:27] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1019 s / img. ETA=0:01:08
[07/29 23:32:32] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1053 s / img. ETA=0:00:53
[07/29 23:32:37] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1053 s / img. ETA=0:00:49
[07/29 23:32:42] d2.evaluation.evaluator INFO: Inference done 132/468. 0.1040 s / img. ETA=0:00:42
[07/29 23:32:47] d2.evaluation.evaluator INFO: Inference done 174/468. 0.1039 s / img. ETA=0:00:36
[07/29 23:32:52] d2.evaluation.evaluator INFO: Inference done 215/468. 0.1045 s / img. ETA=0:00:31
[07/29 23:32:57] d2.evaluation.evaluator INFO: Inference done 257/468. 0.1039 s / img. ETA=0:00:26
[07/29 23:33:02] d2.evaluation.evaluator INFO: Inference done 305/468. 0.1026 s / img. ETA=0:00:19
[07/29 23:33:07] d2.evaluation.evaluator INFO: Inference done 359/468. 0.1008 s / img. ETA=0:00:12
[07/29 23:33:12] d2.evaluation.evaluator INFO: Inference done 413/468. 0.0995 s / img. ETA=0:00:06
[07/29 23:33:17] d2.evaluation.evaluator INFO: Inference done 467/468. 0.0986 s / img. ETA=0:00:00
[07/29 23:33:17] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.672872 (0.111604 s / img per device, on 1 devices)
[07/29 23:33:17] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098564 s / img per device, on 1 devices)
[07/29 23:33:17] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:33:17] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:33:17] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:33:18] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 94.465 | 98.925 | 98.925 |  nan  | 92.973 | 95.023 |
[07/29 23:33:18] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:33:18] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:33:18] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:33:18] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:33:18] d2.evaluation.testing INFO: copypaste: 94.4648,98.9253,98.9253,nan,92.9725,95.0230
[07/29 23:33:20] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:33:25] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 23:33:30] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:33:35] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 23:33:40] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 23:33:45] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 23:33:50] detectron2 INFO: Loss on Validation  done 242/468. 0.0001 s / img. ETA=0:00:29
[07/29 23:33:55] detectron2 INFO: Loss on Validation  done 282/468. 0.0001 s / img. ETA=0:00:24
[07/29 23:34:01] detectron2 INFO: Loss on Validation  done 331/468. 0.0001 s / img. ETA=0:00:17
[07/29 23:34:06] detectron2 INFO: Loss on Validation  done 379/468. 0.0001 s / img. ETA=0:00:10
[07/29 23:34:11] detectron2 INFO: Loss on Validation  done 428/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:34:15] detectron2 INFO: mean_loss=0.11410303198571066, best_loss=0.10624293216935557
[07/29 23:34:15] detectron2 INFO: could not find a better loss with mean_loss=0.11410303198571066 best_loss=0.10624293216935557 and failed count=1
[07/29 23:34:15] detectron2 INFO: saving model to: model_0012299.pth, saved_model_names=model_0010799.pth, model_0011099.pth, model_0011399.pth, model_0011699.pth, model_0011999.pth, model_0012299.pth
[07/29 23:34:15] detectron2 INFO: exeeded model save threshold - removing model_0010799.pth
[07/29 23:34:15] detectron2 INFO: saved_model_names=model_0011099.pth, model_0011399.pth, model_0011699.pth, model_0011999.pth, model_0012299.pth
[07/29 23:34:15] d2.utils.events INFO:  eta: 0:24:41  iter: 12299  total_loss: 0.083  loss_cls: 0.015  loss_box_reg: 0.037  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0142  lr: 0.003200  max_mem: 6856M
[07/29 23:34:33] d2.utils.events INFO:  eta: 0:24:25  iter: 12319  total_loss: 0.092  loss_cls: 0.018  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8640  data_time: 0.0153  lr: 0.003200  max_mem: 6856M
[07/29 23:34:50] d2.utils.events INFO:  eta: 0:24:07  iter: 12339  total_loss: 0.108  loss_cls: 0.020  loss_box_reg: 0.057  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0152  lr: 0.003200  max_mem: 6856M
[07/29 23:35:07] d2.utils.events INFO:  eta: 0:23:49  iter: 12359  total_loss: 0.113  loss_cls: 0.018  loss_box_reg: 0.066  loss_rpn_cls: 0.001  loss_rpn_loc: 0.030  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0153  lr: 0.003200  max_mem: 6856M
[07/29 23:35:24] d2.utils.events INFO:  eta: 0:23:32  iter: 12379  total_loss: 0.104  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8640  data_time: 0.0163  lr: 0.003200  max_mem: 6856M
[07/29 23:35:42] d2.utils.events INFO:  eta: 0:23:14  iter: 12399  total_loss: 0.104  loss_cls: 0.020  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8641  data_time: 0.0150  lr: 0.003200  max_mem: 6856M
[07/29 23:35:59] d2.utils.events INFO:  eta: 0:22:56  iter: 12419  total_loss: 0.086  loss_cls: 0.018  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8641  data_time: 0.0162  lr: 0.003200  max_mem: 6856M
[07/29 23:36:17] d2.utils.events INFO:  eta: 0:22:38  iter: 12439  total_loss: 0.093  loss_cls: 0.017  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8641  data_time: 0.0139  lr: 0.003200  max_mem: 6856M
[07/29 23:36:34] d2.utils.events INFO:  eta: 0:22:21  iter: 12459  total_loss: 0.105  loss_cls: 0.019  loss_box_reg: 0.049  loss_rpn_cls: 0.001  loss_rpn_loc: 0.027  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8641  data_time: 0.0146  lr: 0.003200  max_mem: 6856M
[07/29 23:36:51] d2.utils.events INFO:  eta: 0:22:03  iter: 12479  total_loss: 0.094  loss_cls: 0.017  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8641  data_time: 0.0158  lr: 0.003200  max_mem: 6856M
[07/29 23:37:08] d2.utils.events INFO:  eta: 0:21:45  iter: 12499  total_loss: 0.111  loss_cls: 0.019  loss_box_reg: 0.051  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8640  data_time: 0.0161  lr: 0.003200  max_mem: 6856M
[07/29 23:37:26] d2.utils.events INFO:  eta: 0:21:27  iter: 12519  total_loss: 0.099  loss_cls: 0.015  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8640  data_time: 0.0146  lr: 0.003200  max_mem: 6856M
[07/29 23:37:42] d2.utils.events INFO:  eta: 0:21:09  iter: 12539  total_loss: 0.096  loss_cls: 0.019  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0136  lr: 0.003200  max_mem: 6856M
[07/29 23:38:00] d2.utils.events INFO:  eta: 0:20:51  iter: 12559  total_loss: 0.080  loss_cls: 0.015  loss_box_reg: 0.038  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8640  data_time: 0.0138  lr: 0.003200  max_mem: 6856M
[07/29 23:38:17] d2.utils.events INFO:  eta: 0:20:34  iter: 12579  total_loss: 0.089  loss_cls: 0.015  loss_box_reg: 0.046  loss_rpn_cls: 0.001  loss_rpn_loc: 0.019  validation_loss: 0.115  loss_failed_to_get_better_count: 1.500  time: 0.8639  data_time: 0.0142  lr: 0.003200  max_mem: 6856M
[07/29 23:38:37] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:38:37] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:38:37] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:38:37] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:38:39] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1057 s / img. ETA=0:01:08
[07/29 23:38:44] d2.evaluation.evaluator INFO: Inference done 51/468. 0.1039 s / img. ETA=0:00:54
[07/29 23:38:49] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1052 s / img. ETA=0:00:49
[07/29 23:38:54] d2.evaluation.evaluator INFO: Inference done 132/468. 0.1036 s / img. ETA=0:00:42
[07/29 23:38:59] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1029 s / img. ETA=0:00:37
[07/29 23:39:04] d2.evaluation.evaluator INFO: Inference done 213/468. 0.1028 s / img. ETA=0:00:32
[07/29 23:39:10] d2.evaluation.evaluator INFO: Inference done 255/468. 0.1029 s / img. ETA=0:00:26
[07/29 23:39:15] d2.evaluation.evaluator INFO: Inference done 304/468. 0.1019 s / img. ETA=0:00:19
[07/29 23:39:20] d2.evaluation.evaluator INFO: Inference done 358/468. 0.1002 s / img. ETA=0:00:12
[07/29 23:39:25] d2.evaluation.evaluator INFO: Inference done 412/468. 0.0990 s / img. ETA=0:00:06
[07/29 23:39:30] d2.evaluation.evaluator INFO: Inference done 466/468. 0.0981 s / img. ETA=0:00:00
[07/29 23:39:30] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.757537 (0.111787 s / img per device, on 1 devices)
[07/29 23:39:30] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098064 s / img per device, on 1 devices)
[07/29 23:39:30] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:39:30] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:39:30] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:39:31] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 96.299 | 98.921 | 98.921 |  nan  | 93.410 | 97.395 |
[07/29 23:39:31] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:39:31] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:39:31] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:39:31] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:39:31] d2.evaluation.testing INFO: copypaste: 96.2994,98.9207,98.9207,nan,93.4100,97.3947
[07/29 23:39:33] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:50
[07/29 23:39:38] detectron2 INFO: Loss on Validation  done 50/468. 0.0001 s / img. ETA=0:00:53
[07/29 23:39:43] detectron2 INFO: Loss on Validation  done 88/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:39:48] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 23:39:53] detectron2 INFO: Loss on Validation  done 165/468. 0.0001 s / img. ETA=0:00:39
[07/29 23:39:58] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 23:40:03] detectron2 INFO: Loss on Validation  done 242/468. 0.0001 s / img. ETA=0:00:29
[07/29 23:40:08] detectron2 INFO: Loss on Validation  done 282/468. 0.0001 s / img. ETA=0:00:24
[07/29 23:40:13] detectron2 INFO: Loss on Validation  done 331/468. 0.0001 s / img. ETA=0:00:17
[07/29 23:40:18] detectron2 INFO: Loss on Validation  done 379/468. 0.0001 s / img. ETA=0:00:10
[07/29 23:40:23] detectron2 INFO: Loss on Validation  done 428/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:40:28] detectron2 INFO: mean_loss=0.11348892110801634, best_loss=0.10624293216935557
[07/29 23:40:28] detectron2 INFO: could not find a better loss with mean_loss=0.11348892110801634 best_loss=0.10624293216935557 and failed count=2
[07/29 23:40:28] detectron2 INFO: saving model to: model_0012599.pth, saved_model_names=model_0011099.pth, model_0011399.pth, model_0011699.pth, model_0011999.pth, model_0012299.pth, model_0012599.pth
[07/29 23:40:28] detectron2 INFO: exeeded model save threshold - removing model_0011099.pth
[07/29 23:40:28] detectron2 INFO: saved_model_names=model_0011399.pth, model_0011699.pth, model_0011999.pth, model_0012299.pth, model_0012599.pth
[07/29 23:40:28] d2.utils.events INFO:  eta: 0:20:17  iter: 12599  total_loss: 0.089  loss_cls: 0.016  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0128  lr: 0.003200  max_mem: 6856M
[07/29 23:40:44] d2.utils.events INFO:  eta: 0:19:59  iter: 12619  total_loss: 0.113  loss_cls: 0.020  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.030  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8638  data_time: 0.0201  lr: 0.003200  max_mem: 6856M
[07/29 23:41:02] d2.utils.events INFO:  eta: 0:19:42  iter: 12639  total_loss: 0.092  loss_cls: 0.015  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.029  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8638  data_time: 0.0147  lr: 0.003200  max_mem: 6856M
[07/29 23:41:19] d2.utils.events INFO:  eta: 0:19:24  iter: 12659  total_loss: 0.096  loss_cls: 0.015  loss_box_reg: 0.041  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8638  data_time: 0.0157  lr: 0.003200  max_mem: 6856M
[07/29 23:41:37] d2.utils.events INFO:  eta: 0:19:07  iter: 12679  total_loss: 0.078  loss_cls: 0.014  loss_box_reg: 0.037  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8639  data_time: 0.0190  lr: 0.003200  max_mem: 6856M
[07/29 23:41:54] d2.utils.events INFO:  eta: 0:18:50  iter: 12699  total_loss: 0.090  loss_cls: 0.016  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8639  data_time: 0.0143  lr: 0.003200  max_mem: 6856M
[07/29 23:42:11] d2.utils.events INFO:  eta: 0:18:32  iter: 12719  total_loss: 0.100  loss_cls: 0.019  loss_box_reg: 0.054  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0146  lr: 0.003200  max_mem: 6856M
[07/29 23:42:29] d2.utils.events INFO:  eta: 0:18:16  iter: 12739  total_loss: 0.102  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0141  lr: 0.003200  max_mem: 6856M
[07/29 23:42:46] d2.utils.events INFO:  eta: 0:17:58  iter: 12759  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.020  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8641  data_time: 0.0139  lr: 0.003200  max_mem: 6856M
[07/29 23:43:03] d2.utils.events INFO:  eta: 0:17:41  iter: 12779  total_loss: 0.093  loss_cls: 0.016  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0143  lr: 0.003200  max_mem: 6856M
[07/29 23:43:21] d2.utils.events INFO:  eta: 0:17:23  iter: 12799  total_loss: 0.101  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0135  lr: 0.003200  max_mem: 6856M
[07/29 23:43:38] d2.utils.events INFO:  eta: 0:17:05  iter: 12819  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0151  lr: 0.003200  max_mem: 6856M
[07/29 23:43:55] d2.utils.events INFO:  eta: 0:16:47  iter: 12839  total_loss: 0.106  loss_cls: 0.023  loss_box_reg: 0.059  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8639  data_time: 0.0150  lr: 0.003200  max_mem: 6856M
[07/29 23:44:12] d2.utils.events INFO:  eta: 0:16:30  iter: 12859  total_loss: 0.084  loss_cls: 0.016  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.020  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8640  data_time: 0.0170  lr: 0.003200  max_mem: 6856M
[07/29 23:44:30] d2.utils.events INFO:  eta: 0:16:13  iter: 12879  total_loss: 0.094  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8641  data_time: 0.0141  lr: 0.003200  max_mem: 6856M
[07/29 23:44:51] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:44:51] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:44:51] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:44:51] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:44:54] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1034 s / img. ETA=0:00:57
[07/29 23:44:59] d2.evaluation.evaluator INFO: Inference done 54/468. 0.1039 s / img. ETA=0:00:49
[07/29 23:45:04] d2.evaluation.evaluator INFO: Inference done 90/468. 0.1056 s / img. ETA=0:00:48
[07/29 23:45:09] d2.evaluation.evaluator INFO: Inference done 132/468. 0.1037 s / img. ETA=0:00:42
[07/29 23:45:14] d2.evaluation.evaluator INFO: Inference done 173/468. 0.1030 s / img. ETA=0:00:36
[07/29 23:45:19] d2.evaluation.evaluator INFO: Inference done 214/468. 0.1035 s / img. ETA=0:00:31
[07/29 23:45:24] d2.evaluation.evaluator INFO: Inference done 256/468. 0.1031 s / img. ETA=0:00:26
[07/29 23:45:29] d2.evaluation.evaluator INFO: Inference done 304/468. 0.1020 s / img. ETA=0:00:19
[07/29 23:45:34] d2.evaluation.evaluator INFO: Inference done 359/468. 0.1002 s / img. ETA=0:00:12
[07/29 23:45:39] d2.evaluation.evaluator INFO: Inference done 413/468. 0.0990 s / img. ETA=0:00:06
[07/29 23:45:44] d2.evaluation.evaluator INFO: Inference done 467/468. 0.0981 s / img. ETA=0:00:00
[07/29 23:45:44] d2.evaluation.evaluator INFO: Total inference time: 0:00:51.458398 (0.111141 s / img per device, on 1 devices)
[07/29 23:45:44] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098061 s / img per device, on 1 devices)
[07/29 23:45:44] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:45:44] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:45:44] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:45:45] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.129 | 98.959 | 98.959 |  nan  | 92.581 | 96.015 |
[07/29 23:45:45] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:45:45] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:45:45] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:45:45] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:45:45] d2.evaluation.testing INFO: copypaste: 95.1290,98.9589,98.9589,nan,92.5809,96.0148
[07/29 23:45:47] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:51
[07/29 23:45:52] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 23:45:57] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 23:46:02] detectron2 INFO: Loss on Validation  done 127/468. 0.0001 s / img. ETA=0:00:44
[07/29 23:46:07] detectron2 INFO: Loss on Validation  done 166/468. 0.0001 s / img. ETA=0:00:39
[07/29 23:46:12] detectron2 INFO: Loss on Validation  done 204/468. 0.0001 s / img. ETA=0:00:34
[07/29 23:46:18] detectron2 INFO: Loss on Validation  done 242/468. 0.0001 s / img. ETA=0:00:29
[07/29 23:46:23] detectron2 INFO: Loss on Validation  done 283/468. 0.0001 s / img. ETA=0:00:24
[07/29 23:46:28] detectron2 INFO: Loss on Validation  done 332/468. 0.0001 s / img. ETA=0:00:17
[07/29 23:46:33] detectron2 INFO: Loss on Validation  done 379/468. 0.0001 s / img. ETA=0:00:11
[07/29 23:46:38] detectron2 INFO: Loss on Validation  done 428/468. 0.0001 s / img. ETA=0:00:04
[07/29 23:46:42] detectron2 INFO: mean_loss=0.11200089856231346, best_loss=0.10624293216935557
[07/29 23:46:42] detectron2 INFO: could not find a better loss with mean_loss=0.11200089856231346 best_loss=0.10624293216935557 and failed count=3
[07/29 23:46:42] detectron2 INFO: saving model to: model_0012899.pth, saved_model_names=model_0011399.pth, model_0011699.pth, model_0011999.pth, model_0012299.pth, model_0012599.pth, model_0012899.pth
[07/29 23:46:42] detectron2 INFO: exeeded model save threshold - removing model_0011399.pth
[07/29 23:46:42] detectron2 INFO: saved_model_names=model_0011699.pth, model_0011999.pth, model_0012299.pth, model_0012599.pth, model_0012899.pth
[07/29 23:46:42] d2.utils.events INFO:  eta: 0:15:55  iter: 12899  total_loss: 0.085  loss_cls: 0.015  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8642  data_time: 0.0180  lr: 0.003200  max_mem: 6856M
[07/29 23:46:59] d2.utils.events INFO:  eta: 0:15:38  iter: 12919  total_loss: 0.086  loss_cls: 0.014  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8642  data_time: 0.0130  lr: 0.003200  max_mem: 6856M
[07/29 23:47:17] d2.utils.events INFO:  eta: 0:15:21  iter: 12939  total_loss: 0.078  loss_cls: 0.015  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.022  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0154  lr: 0.003200  max_mem: 6856M
[07/29 23:47:34] d2.utils.events INFO:  eta: 0:15:04  iter: 12959  total_loss: 0.101  loss_cls: 0.018  loss_box_reg: 0.050  loss_rpn_cls: 0.002  loss_rpn_loc: 0.021  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0141  lr: 0.003200  max_mem: 6856M
[07/29 23:47:52] d2.utils.events INFO:  eta: 0:14:47  iter: 12979  total_loss: 0.091  loss_cls: 0.017  loss_box_reg: 0.043  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0145  lr: 0.003200  max_mem: 6856M
[07/29 23:48:09] d2.utils.events INFO:  eta: 0:14:30  iter: 12999  total_loss: 0.095  loss_cls: 0.019  loss_box_reg: 0.043  loss_rpn_cls: 0.001  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0178  lr: 0.003200  max_mem: 6856M
[07/29 23:48:26] d2.utils.events INFO:  eta: 0:14:12  iter: 13019  total_loss: 0.084  loss_cls: 0.016  loss_box_reg: 0.042  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0181  lr: 0.003200  max_mem: 6856M
[07/29 23:48:44] d2.utils.events INFO:  eta: 0:13:55  iter: 13039  total_loss: 0.092  loss_cls: 0.015  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.029  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8644  data_time: 0.0134  lr: 0.003200  max_mem: 6856M
[07/29 23:49:01] d2.utils.events INFO:  eta: 0:13:38  iter: 13059  total_loss: 0.091  loss_cls: 0.017  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8644  data_time: 0.0155  lr: 0.003200  max_mem: 6856M
[07/29 23:49:19] d2.utils.events INFO:  eta: 0:13:21  iter: 13079  total_loss: 0.091  loss_cls: 0.015  loss_box_reg: 0.046  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8644  data_time: 0.0135  lr: 0.003200  max_mem: 6856M
[07/29 23:49:35] d2.utils.events INFO:  eta: 0:13:03  iter: 13099  total_loss: 0.098  loss_cls: 0.017  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0139  lr: 0.003200  max_mem: 6856M
[07/29 23:49:53] d2.utils.events INFO:  eta: 0:12:46  iter: 13119  total_loss: 0.090  loss_cls: 0.017  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8643  data_time: 0.0142  lr: 0.003200  max_mem: 6856M
[07/29 23:50:10] d2.utils.events INFO:  eta: 0:12:29  iter: 13139  total_loss: 0.081  loss_cls: 0.016  loss_box_reg: 0.038  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8644  data_time: 0.0144  lr: 0.003200  max_mem: 6856M
[07/29 23:50:28] d2.utils.events INFO:  eta: 0:12:11  iter: 13159  total_loss: 0.086  loss_cls: 0.018  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8644  data_time: 0.0153  lr: 0.003200  max_mem: 6856M
[07/29 23:50:46] d2.utils.events INFO:  eta: 0:11:54  iter: 13179  total_loss: 0.091  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.115  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0125  lr: 0.003200  max_mem: 6856M
[07/29 23:51:05] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:51:05] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:51:05] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:51:06] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:51:08] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1043 s / img. ETA=0:01:15
[07/29 23:51:13] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1010 s / img. ETA=0:00:53
[07/29 23:51:18] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1047 s / img. ETA=0:00:50
[07/29 23:51:23] d2.evaluation.evaluator INFO: Inference done 128/468. 0.1045 s / img. ETA=0:00:44
[07/29 23:51:28] d2.evaluation.evaluator INFO: Inference done 169/468. 0.1049 s / img. ETA=0:00:38
[07/29 23:51:33] d2.evaluation.evaluator INFO: Inference done 210/468. 0.1054 s / img. ETA=0:00:33
[07/29 23:51:39] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1051 s / img. ETA=0:00:27
[07/29 23:51:44] d2.evaluation.evaluator INFO: Inference done 297/468. 0.1038 s / img. ETA=0:00:21
[07/29 23:51:49] d2.evaluation.evaluator INFO: Inference done 351/468. 0.1020 s / img. ETA=0:00:14
[07/29 23:51:54] d2.evaluation.evaluator INFO: Inference done 405/468. 0.1005 s / img. ETA=0:00:07
[07/29 23:51:59] d2.evaluation.evaluator INFO: Inference done 459/468. 0.0994 s / img. ETA=0:00:01
[07/29 23:52:00] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.584573 (0.113574 s / img per device, on 1 devices)
[07/29 23:52:00] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.099307 s / img per device, on 1 devices)
[07/29 23:52:00] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:52:00] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:52:00] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:52:00] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.832 | 98.934 | 98.934 |  nan  | 93.418 | 96.616 |
[07/29 23:52:00] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:52:00] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:52:00] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:52:00] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:52:00] d2.evaluation.testing INFO: copypaste: 95.8323,98.9344,98.9344,nan,93.4184,96.6162
[07/29 23:52:03] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:49
[07/29 23:52:08] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 23:52:13] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 23:52:18] detectron2 INFO: Loss on Validation  done 125/468. 0.0001 s / img. ETA=0:00:45
[07/29 23:52:23] detectron2 INFO: Loss on Validation  done 162/468. 0.0001 s / img. ETA=0:00:40
[07/29 23:52:28] detectron2 INFO: Loss on Validation  done 200/468. 0.0001 s / img. ETA=0:00:35
[07/29 23:52:33] detectron2 INFO: Loss on Validation  done 237/468. 0.0001 s / img. ETA=0:00:31
[07/29 23:52:38] detectron2 INFO: Loss on Validation  done 276/468. 0.0001 s / img. ETA=0:00:25
[07/29 23:52:43] detectron2 INFO: Loss on Validation  done 324/468. 0.0001 s / img. ETA=0:00:18
[07/29 23:52:48] detectron2 INFO: Loss on Validation  done 372/468. 0.0001 s / img. ETA=0:00:12
[07/29 23:52:53] detectron2 INFO: Loss on Validation  done 421/468. 0.0001 s / img. ETA=0:00:05
[07/29 23:52:58] detectron2 INFO: mean_loss=0.10776680230664287, best_loss=0.10624293216935557
[07/29 23:52:58] detectron2 INFO: could not find a better loss with mean_loss=0.10776680230664287 best_loss=0.10624293216935557 and failed count=4
[07/29 23:52:58] detectron2 INFO: saving model to: model_0013199.pth, saved_model_names=model_0011699.pth, model_0011999.pth, model_0012299.pth, model_0012599.pth, model_0012899.pth, model_0013199.pth
[07/29 23:52:58] detectron2 INFO: exeeded model save threshold - removing model_0011699.pth
[07/29 23:52:58] detectron2 INFO: saved_model_names=model_0011999.pth, model_0012299.pth, model_0012599.pth, model_0012899.pth, model_0013199.pth
[07/29 23:52:58] d2.utils.events INFO:  eta: 0:11:36  iter: 13199  total_loss: 0.089  loss_cls: 0.016  loss_box_reg: 0.044  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0196  lr: 0.003200  max_mem: 6856M
[07/29 23:53:16] d2.utils.events INFO:  eta: 0:11:19  iter: 13219  total_loss: 0.081  loss_cls: 0.014  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0135  lr: 0.003200  max_mem: 6856M
[07/29 23:53:33] d2.utils.events INFO:  eta: 0:11:02  iter: 13239  total_loss: 0.089  loss_cls: 0.016  loss_box_reg: 0.045  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0139  lr: 0.003200  max_mem: 6856M
[07/29 23:53:51] d2.utils.events INFO:  eta: 0:10:44  iter: 13259  total_loss: 0.096  loss_cls: 0.018  loss_box_reg: 0.048  loss_rpn_cls: 0.001  loss_rpn_loc: 0.024  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8646  data_time: 0.0144  lr: 0.003200  max_mem: 6856M
[07/29 23:54:08] d2.utils.events INFO:  eta: 0:10:27  iter: 13279  total_loss: 0.109  loss_cls: 0.019  loss_box_reg: 0.053  loss_rpn_cls: 0.001  loss_rpn_loc: 0.031  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8646  data_time: 0.0166  lr: 0.003200  max_mem: 6856M
[07/29 23:54:25] d2.utils.events INFO:  eta: 0:10:09  iter: 13299  total_loss: 0.099  loss_cls: 0.018  loss_box_reg: 0.047  loss_rpn_cls: 0.002  loss_rpn_loc: 0.028  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0155  lr: 0.003200  max_mem: 6856M
[07/29 23:54:42] d2.utils.events INFO:  eta: 0:09:51  iter: 13319  total_loss: 0.109  loss_cls: 0.017  loss_box_reg: 0.053  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0134  lr: 0.003200  max_mem: 6856M
[07/29 23:55:00] d2.utils.events INFO:  eta: 0:09:34  iter: 13339  total_loss: 0.091  loss_cls: 0.015  loss_box_reg: 0.044  loss_rpn_cls: 0.002  loss_rpn_loc: 0.026  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0174  lr: 0.003200  max_mem: 6856M
[07/29 23:55:17] d2.utils.events INFO:  eta: 0:09:17  iter: 13359  total_loss: 0.090  loss_cls: 0.018  loss_box_reg: 0.042  loss_rpn_cls: 0.002  loss_rpn_loc: 0.025  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0129  lr: 0.003200  max_mem: 6856M
[07/29 23:55:34] d2.utils.events INFO:  eta: 0:08:59  iter: 13379  total_loss: 0.093  loss_cls: 0.019  loss_box_reg: 0.047  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8644  data_time: 0.0153  lr: 0.003200  max_mem: 6856M
[07/29 23:55:52] d2.utils.events INFO:  eta: 0:08:42  iter: 13399  total_loss: 0.086  loss_cls: 0.015  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.022  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8645  data_time: 0.0172  lr: 0.003200  max_mem: 6856M
[07/29 23:56:09] d2.utils.events INFO:  eta: 0:08:25  iter: 13419  total_loss: 0.080  loss_cls: 0.015  loss_box_reg: 0.041  loss_rpn_cls: 0.001  loss_rpn_loc: 0.023  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8646  data_time: 0.0136  lr: 0.003200  max_mem: 6856M
[07/29 23:56:27] d2.utils.events INFO:  eta: 0:08:07  iter: 13439  total_loss: 0.099  loss_cls: 0.017  loss_box_reg: 0.045  loss_rpn_cls: 0.001  loss_rpn_loc: 0.026  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8646  data_time: 0.0144  lr: 0.003200  max_mem: 6856M
[07/29 23:56:44] d2.utils.events INFO:  eta: 0:07:50  iter: 13459  total_loss: 0.078  loss_cls: 0.015  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.021  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8646  data_time: 0.0159  lr: 0.003200  max_mem: 6856M
[07/29 23:57:01] d2.utils.events INFO:  eta: 0:07:32  iter: 13479  total_loss: 0.081  loss_cls: 0.015  loss_box_reg: 0.040  loss_rpn_cls: 0.001  loss_rpn_loc: 0.018  validation_loss: 0.114  loss_failed_to_get_better_count: 2.000  time: 0.8646  data_time: 0.0162  lr: 0.003200  max_mem: 6856M
[07/29 23:57:20] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/29 23:57:20] d2.data.common INFO: Serialized dataset takes 0.47 MiB
[07/29 23:57:20] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800, 800), max_size=1333, sample_style='choice')]
[07/29 23:57:20] d2.evaluation.evaluator INFO: Start inference on 468 images
[07/29 23:57:23] d2.evaluation.evaluator INFO: Inference done 11/468. 0.1104 s / img. ETA=0:01:02
[07/29 23:57:28] d2.evaluation.evaluator INFO: Inference done 52/468. 0.1056 s / img. ETA=0:00:52
[07/29 23:57:33] d2.evaluation.evaluator INFO: Inference done 89/468. 0.1060 s / img. ETA=0:00:49
[07/29 23:57:38] d2.evaluation.evaluator INFO: Inference done 130/468. 0.1041 s / img. ETA=0:00:43
[07/29 23:57:43] d2.evaluation.evaluator INFO: Inference done 172/468. 0.1045 s / img. ETA=0:00:37
[07/29 23:57:48] d2.evaluation.evaluator INFO: Inference done 210/468. 0.1045 s / img. ETA=0:00:32
[07/29 23:57:53] d2.evaluation.evaluator INFO: Inference done 250/468. 0.1041 s / img. ETA=0:00:27
[07/29 23:57:58] d2.evaluation.evaluator INFO: Inference done 297/468. 0.1028 s / img. ETA=0:00:21
[07/29 23:58:03] d2.evaluation.evaluator INFO: Inference done 351/468. 0.1010 s / img. ETA=0:00:13
[07/29 23:58:08] d2.evaluation.evaluator INFO: Inference done 405/468. 0.0996 s / img. ETA=0:00:07
[07/29 23:58:13] d2.evaluation.evaluator INFO: Inference done 459/468. 0.0986 s / img. ETA=0:00:01
[07/29 23:58:14] d2.evaluation.evaluator INFO: Total inference time: 0:00:52.212803 (0.112771 s / img per device, on 1 devices)
[07/29 23:58:14] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:45 (0.098485 s / img per device, on 1 devices)
[07/29 23:58:14] d2.evaluation.coco_evaluation INFO: Preparing results for COCO format ...
[07/29 23:58:14] d2.evaluation.coco_evaluation INFO: Saving results to /content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/coco_instances_results.json
[07/29 23:58:14] d2.evaluation.coco_evaluation INFO: Evaluating predictions ...
[07/29 23:58:15] d2.evaluation.coco_evaluation INFO: Evaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 95.472 | 98.952 | 98.952 |  nan  | 92.040 | 96.817 |
[07/29 23:58:15] d2.evaluation.coco_evaluation INFO: Some metrics cannot be computed and is shown as NaN.
[07/29 23:58:15] d2.engine.defaults INFO: Evaluation results for test in csv format:
[07/29 23:58:15] d2.evaluation.testing INFO: copypaste: Task: bbox
[07/29 23:58:15] d2.evaluation.testing INFO: copypaste: AP,AP50,AP75,APs,APm,APl
[07/29 23:58:15] d2.evaluation.testing INFO: copypaste: 95.4715,98.9518,98.9518,nan,92.0399,96.8173
[07/29 23:58:17] detectron2 INFO: Loss on Validation  done 11/468. 0.0001 s / img. ETA=0:00:52
[07/29 23:58:22] detectron2 INFO: Loss on Validation  done 49/468. 0.0001 s / img. ETA=0:00:54
[07/29 23:58:27] detectron2 INFO: Loss on Validation  done 87/468. 0.0001 s / img. ETA=0:00:50
[07/29 23:58:32] detectron2 INFO: Loss on Validation  done 126/468. 0.0001 s / img. ETA=0:00:44
[07/29 23:58:37] detectron2 INFO: Loss on Validation  done 164/468. 0.0001 s / img. ETA=0:00:40
[07/29 23:58:42] detectron2 INFO: Loss on Validation  done 202/468. 0.0001 s / img. ETA=0:00:35
[07/29 23:58:47] detectron2 INFO: Loss on Validation  done 239/468. 0.0001 s / img. ETA=0:00:30
[07/29 23:58:52] detectron2 INFO: Loss on Validation  done 277/468. 0.0001 s / img. ETA=0:00:25
[07/29 23:58:58] detectron2 INFO: Loss on Validation  done 326/468. 0.0001 s / img. ETA=0:00:18
[07/29 23:59:03] detectron2 INFO: Loss on Validation  done 373/468. 0.0001 s / img. ETA=0:00:11
[07/29 23:59:08] detectron2 INFO: Loss on Validation  done 422/468. 0.0001 s / img. ETA=0:00:05
[07/29 23:59:12] detectron2 INFO: mean_loss=0.10434799028430422, best_loss=0.10624293216935557
[07/29 23:59:12] detectron2 INFO: could not find a better loss with mean_loss=0.10434799028430422 best_loss=0.10624293216935557 and failed count=5
[07/29 23:59:12] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 131, in train
    self.after_step()
  File "/usr/local/lib/python3.6/dist-packages/detectron2/engine/train_loop.py", line 152, in after_step
    h.after_step()
  File "<ipython-input-15-34e9666dc393>", line 141, in after_step
    raise Exception("Could not compute a better loss - training stopped as a result")
Exception: Could not compute a better loss - training stopped as a result
[07/29 23:59:12] d2.engine.hooks INFO: Overall training speed: 4797 iterations in 1:09:08 (0.8648 s / it)
[07/29 23:59:12] d2.engine.hooks INFO: Total training time: 1:39:14 (0:30:06 on hooks)
[07/30 00:01:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/30 00:01:14] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/30 00:01:14] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/30 00:01:15] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/30 00:01:15] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:01:15] d2.data.build INFO: Using training sampler TrainingSampler
[07/30 00:01:30] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/30 00:01:30] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/30 00:01:31] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/30 00:01:31] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/30 00:01:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:01:31] d2.data.build INFO: Using training sampler TrainingSampler
[07/30 00:01:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:01:31] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/30 00:01:31] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/30 00:02:31] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/30 00:02:31] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/30 00:02:31] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/30 00:02:31] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/30 00:02:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:02:31] d2.data.build INFO: Using training sampler TrainingSampler
[07/30 00:02:31] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:02:31] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/30 00:02:31] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/30 00:03:22] d2.evaluation.coco_evaluation INFO: 'test' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/30 00:03:22] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/test_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/30 00:03:22] d2.evaluation.coco_evaluation INFO: 'val' is not registered by `register_coco_instances`. Therefore trying to convert it to COCO format ...
[07/30 00:03:22] d2.data.datasets.coco WARNING: Using previously cached COCO format annotations at '/content/drive/My Drive/Colab Notebooks/Colab Data/models/R_101_FPN_3x-stave_measures/val_coco_format.json'. You need to clear the cache file if your dataset has been modified.
[07/30 00:03:27] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=2, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
    )
  )
)
[07/30 00:03:27] d2.data.build INFO: Removed 13 images with no usable annotations. 1391 images left.
[07/30 00:03:27] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 31664        |
|               |              |[0m
[07/30 00:03:27] d2.data.common INFO: Serializing 1391 elements to byte tensors and concatenating them all ...
[07/30 00:03:28] d2.data.common INFO: Serialized dataset takes 1.41 MiB
[07/30 00:03:28] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:03:28] d2.data.build INFO: Using training sampler TrainingSampler
[07/30 00:03:29] d2.data.dataset_mapper INFO: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[07/30 00:03:29] d2.data.build INFO: Distribution of instances among all 1 categories:
[36m|   category    | #instances   |
|:-------------:|:-------------|
| system_meas.. | 10786        |
|               |              |[0m
[07/30 00:03:29] d2.data.common INFO: Serializing 468 elements to byte tensors and concatenating them all ...
[07/30 00:03:29] d2.data.common INFO: Serialized dataset takes 0.48 MiB
[07/30 00:03:29] detectron2 INFO: found existing models
[07/30 00:03:29] detectron2 INFO: previous losses: 0.32907, 0.31504, 0.27454, 0.22205, 0.24074, 0.19486, 0.19123, 0.18060, 0.15299, 0.15955, 0.17572, 0.14668, 0.14792, 0.14196, 0.13913, 0.13883, 0.16737, 0.13708, 0.13626, 0.13224, 0.13220, 0.14236, 0.12464, 0.12436, 0.11919, 0.12011, 0.12541, 0.12360, 0.12551, 0.12132, 0.11475, 0.13089, 0.11490, 0.12139, 0.10624, 0.12391, 0.11102, 0.13237, 0.11427, 0.10985, 0.11410, 0.11349, 0.11200, 0.10777
[07/30 00:03:29] detectron2 INFO: best_loss=0.1098461919222103
[07/30 00:03:29] detectron2 INFO: loss_failed_to_get_better_count=4.0
[07/30 00:03:29] detectron2 INFO: saved_model_names=model_0007499.pth, model_0010499.pth, model_0011999.pth, model_0012299.pth, model_0012599.pth, model_0012899.pth, model_0013199.pth, model_0013499.pth
